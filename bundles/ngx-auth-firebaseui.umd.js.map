{"version":3,"file":"ngx-auth-firebaseui.umd.js","sources":["../../tmp/module/enums/accounts.enum.ts","../../tmp/module/services/firestore-sync.service.ts","../../tmp/module/services/auth-process.service.ts","../../tmp/module/animations/index.ts","../../tmp/module/components/ngx-auth-firebaseui-login/ngx-auth-firebaseui-login.component.ts","../../tmp/module/components/ngx-auth-firebaseui-register/ngx-auth-firebaseui-register.component.ts","../../tmp/module/components/legality-dialog/legality-dialog.component.ts","../../tmp/module/components/providers/auth.providers.component.ts","../../tmp/module/components/ngx-auth-firebaseui/auth.component.ts","../../tmp/module/components/ngx-auth-firebaseui-user/user.component.ts","../../tmp/module/components/email-confirmation/email-confirmation.component.ts","../../tmp/module/interfaces/config.interface.ts","../../tmp/module/components/ngx-auth-firebaseui-avatar/ngx-auth-firebaseui-avatar.component.ts","../../tmp/module/guards/logged-in.guard.ts","../../tmp/module/ngx-auth-firebase-u-i.module.ts"],"sourcesContent":["export enum Accounts {\n  NONE = 'account',\n  CHECK = 'account-check',\n  EDIT = 'account-edit',\n  OFF = 'account-off',\n  REMOVE = 'account-remove',\n}\n","import {Injectable} from '@angular/core';\nimport {AngularFirestore, AngularFirestoreDocument} from '@angular/fire/firestore';\nimport {UserInfo} from 'firebase';\n\nexport const collections = {\n  users: 'users',\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirestoreSyncService {\n\n  constructor(public afs: AngularFirestore) {\n    // this.afs.firestore.settings({timestampsInSnapshots: true});\n  }\n\n  // get timestamp() {\n  //     return firebase.firestore.FieldValue.serverTimestamp();\n  // }\n\n  public getUserDocRefByUID(uid: string): AngularFirestoreDocument<UserInfo> {\n    return this.afs.doc(`${collections.users}/${uid}`);\n  }\n\n  public deleteUserData(uid: string): Promise<any> {\n    const userRef: AngularFirestoreDocument<UserInfo> = this.getUserDocRefByUID(uid);\n    return userRef.delete();\n  }\n\n\n  public updateUserData(user: UserInfo): Promise<any> {\n    // Sets user$ data to firestore on login\n    const userRef: AngularFirestoreDocument<UserInfo> = this.getUserDocRefByUID(user.uid);\n    const data: UserInfo = {\n      uid: user.uid,\n      email: user.email,\n      displayName: user.displayName,\n      photoURL: user.photoURL,\n      phoneNumber: user.phoneNumber,\n      providerId: user.providerId\n    };\n    return userRef.set(data, {merge: true});\n  }\n}\n","import { EventEmitter, forwardRef, Inject, Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { MatSnackBar, MatSnackBarConfig, MAT_SNACK_BAR_DEFAULT_OPTIONS } from '@angular/material';\nimport { firebase } from '@firebase/app';\nimport '@firebase/auth';\nimport { User, UserInfo } from 'firebase/app';\nimport { isFunction } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Accounts } from '../enums';\nimport { NgxAuthFirebaseUIConfig } from '../interfaces/config.interface';\nimport { ICredentials, ISignInProcess, ISignUpProcess } from '../interfaces/main.interface';\nimport { NgxAuthFirebaseUIConfigToken } from '../ngx-auth-firebase-u-i.module';\nimport { FirestoreSyncService } from './firestore-sync.service';\n\n// import User = firebase.User;\n\nimport UserCredential = firebase.auth.UserCredential;\n\nexport const facebookAuthProvider = new firebase.auth.FacebookAuthProvider();\nexport const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\nexport const twitterAuthProvider = new firebase.auth.TwitterAuthProvider();\nexport const githubAuthProvider = new firebase.auth.GithubAuthProvider();\nexport const microsoftAuthProvider = new firebase.auth.OAuthProvider('microsoft.com');\nexport const yahooAuthProvider = new firebase.auth.OAuthProvider('yahoo.com');\n\nexport enum AuthProvider {\n  ALL = 'all',\n  ANONYMOUS = 'anonymous',\n  EmailAndPassword = 'firebase',\n  Google = 'google',\n  Facebook = 'facebook',\n  Twitter = 'twitter',\n  Github = 'github',\n  Microsoft = 'microsoft',\n  Yahoo = 'yahoo',\n  PhoneNumber = 'phoneNumber'\n}\n\nexport type getErrorMessageType = (error: any) => string;\nexport type messageOnAuthErrorType = string | getErrorMessageType;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthProcessService implements ISignInProcess, ISignUpProcess {\n  onSuccessEmitter: EventEmitter<any> = new EventEmitter<any>();\n  onErrorEmitter: EventEmitter<any> = new EventEmitter<any>();\n\n  // Useful to know aubout auth state even between reloads.\n  // Replace emailConfirmationSent and emailToConfirm.\n  user$: Observable<User>;\n  user: User;\n\n  messageOnAuthSuccess: string;\n  messageOnAuthError: messageOnAuthErrorType;\n\n  // Legacy field that is setted to true after sign up. Value is lost in case of reload. The idea here is to know if we just sent a verification email.\n  emailConfirmationSent: boolean;\n  // Lefacy filed that contain the mail to confirm. Same lifecyle than emailConfirmationSent.\n  emailToConfirm: string;\n\n  constructor(\n    public afa: AngularFireAuth,\n    @Inject(forwardRef(() => NgxAuthFirebaseUIConfigToken)) public config: NgxAuthFirebaseUIConfig,\n    private _snackBar: MatSnackBar,\n    private _fireStoreService: FirestoreSyncService,\n    @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _matSnackBarConfig: MatSnackBarConfig\n  ) {}\n\n  listenToUserEvents() {\n    this.user$ = this.afa.user.pipe(\n      tap(user => {\n        this.user = user;\n      })\n    );\n  }\n\n  /**\n   * Reset the password of the ngx-auth-firebaseui-user via email\n   *\n   * @param email - the email to reset\n   * @returns\n   */\n  public resetPassword(email: string) {\n    return this.afa.auth.sendPasswordResetEmail(email)\n      .then(() => console.log('Password reset email sent'))\n      .catch((error) => this.notifyError(error));\n  }\n\n  /**\n   * General sign in mechanism to authenticate the users with a firebase project\n   * using a traditional way, via username and password or by using an authentication provider\n   * like google, facebook, twitter and github\n   *\n   * @param provider - the provider to authenticate with (google, facebook, twitter, github)\n   * @param credentials\n   * @returns\n   */\n  public async signInWith(provider: AuthProvider, credentials?: ICredentials) {\n    try {\n      let signInResult: UserCredential | any;\n\n      switch (provider) {\n        case AuthProvider.ANONYMOUS:\n          signInResult = await this.afa.auth.signInAnonymously() as UserCredential;\n          break;\n\n        case AuthProvider.EmailAndPassword:\n          signInResult = await this.afa.auth.signInWithEmailAndPassword(credentials.email, credentials.password) as UserCredential;\n          break;\n\n        case AuthProvider.Google:\n          signInResult = await this.afa.auth.signInWithPopup(googleAuthProvider) as UserCredential;\n          break;\n\n        case AuthProvider.Facebook:\n          signInResult = await this.afa.auth.signInWithPopup(facebookAuthProvider) as UserCredential;\n          break;\n\n        case AuthProvider.Twitter:\n          signInResult = await this.afa.auth.signInWithPopup(twitterAuthProvider) as UserCredential;\n          break;\n\n        case AuthProvider.Github:\n          signInResult = await this.afa.auth.signInWithPopup(githubAuthProvider) as UserCredential;\n          break;\n\n        case AuthProvider.Microsoft:\n          signInResult = await this.afa.auth.signInWithPopup(microsoftAuthProvider) as UserCredential;\n          break;\n\n        case AuthProvider.Yahoo:\n          signInResult = await this.afa.auth.signInWithPopup(yahooAuthProvider) as UserCredential;\n          break;\n\n        case AuthProvider.PhoneNumber:\n          // coming soon - see feature/sms branch\n          break;\n\n        default:\n          throw new Error(`${AuthProvider[provider]} is not available as auth provider`);\n      }\n      await this.handleSuccess(signInResult);\n    } catch (err) {\n      this.handleError(err);\n    }\n  }\n\n  /**\n   * Sign up new users via email and password.\n   * After that the ngx-auth-firebaseui-user should verify and confirm an email sent via the firebase\n   *\n   * @param displayName - the displayName if the new ngx-auth-firebaseui-user\n   * @param credentials\n   * @returns\n   */\n  public async signUp(displayName: string, credentials: ICredentials) {\n    try {\n      const userCredential: UserCredential = await this.afa.auth.createUserWithEmailAndPassword(credentials.email, credentials.password);\n      const user = userCredential.user;\n      await this.updateProfile(displayName, user.photoURL);\n\n      if (this.config.enableFirestoreSync) {\n        await this._fireStoreService\n          .getUserDocRefByUID(user.uid)\n          .set({\n            uid: user.uid,\n            displayName: displayName,\n            email: user.email,\n            photoURL: user.photoURL\n          } as User);\n      }\n\n      await user.sendEmailVerification();\n\n      // Legacy fields\n      this.emailConfirmationSent = true;\n      this.emailToConfirm = credentials.email;\n\n      await this.handleSuccess(userCredential);\n    } catch (err) {\n      this.handleError(err);\n    }\n  }\n\n  async sendNewVerificationEmail() {\n    if (!this.user) {\n      return Promise.reject(new Error('No signed in user'));\n    }\n    return this.user.sendEmailVerification();\n  }\n\n  async signOut() {\n    try {\n      await this.afa.auth.signOut();\n    } catch (error) {\n      this.notifyError(error);\n    }\n  }\n\n  /**\n   * Update the profile (name + photo url) of the authenticated ngx-auth-firebaseui-user in the\n   * firebase authentication feature (not in firestore)\n   *\n   * @param name - the new name of the authenticated ngx-auth-firebaseui-user\n   * @param photoURL - the new photo url of the authenticated ngx-auth-firebaseui-user\n   * @returns\n   */\n  public updateProfile(name: string, photoURL: string): Promise<any> {\n    return this.afa.auth.currentUser.updateProfile({displayName: name, photoURL: photoURL});\n  }\n\n  public deleteAccount(): Promise<any> {\n    return this.afa.auth.currentUser.delete();\n  }\n\n  public parseUserInfo(user: User): UserInfo {\n    return {\n      uid: user.uid,\n      displayName: user.displayName,\n      email: user.email,\n      phoneNumber: user.phoneNumber,\n      photoURL: user.photoURL,\n      providerId: user.providerData.length > 0 ? user.providerData[0].providerId : null\n    };\n  }\n\n  public getUserPhotoUrl(): string {\n\n    const user: firebase.User | null = this.afa.auth.currentUser;\n\n    if (!user) {\n      return;\n    } else if (user.photoURL) {\n      return user.photoURL;\n    } else if (user.emailVerified) {\n      return this.getPhotoPath(Accounts.CHECK);\n    } else if (user.isAnonymous) {\n      return this.getPhotoPath(Accounts.OFF);\n    } else {\n      return this.getPhotoPath(Accounts.NONE);\n    }\n  }\n\n  public getPhotoPath(image: string) {\n    return `assets/user/${image}.svg`;\n  }\n\n  public signInWithPhoneNumber() {\n    // todo: 3.1.18\n  }\n\n  async handleSuccess(userCredential: UserCredential) {\n    this.onSuccessEmitter.next(userCredential.user);\n    if (this.config.enableFirestoreSync) {\n      try {\n        await this._fireStoreService.updateUserData(this.parseUserInfo(userCredential.user));\n      } catch (e) {\n        console.error(`Error occurred while updating user data with firestore: ${e}`);\n      }\n    }\n    if (this.config.toastMessageOnAuthSuccess) {\n      const fallbackMessage = `Hello ${userCredential.user.displayName ? userCredential.user.displayName : ''}!`;\n      this.showToast(this.messageOnAuthSuccess || fallbackMessage);\n    }\n  }\n\n  handleError(error: any) {\n    this.notifyError(error);\n    console.error(error);\n  }\n\n  // Refresh user info. Can be useful for instance to get latest status regarding email verification.\n  reloadUserInfo() {\n    return this.user.reload();\n  }\n\n  // Search for an error message.\n  // Consumers of this library are given the possibility to provide a function in case they want to instrument message based on error properties.\n  getMessageOnAuthError(error: any) {\n    let message: string;\n    const fallbackMessage = 'Sorry, something went wrong. Please retry later.';\n    if (isFunction(this.messageOnAuthError)) {\n      message = this.messageOnAuthError(error);\n    } else {\n      message = this.messageOnAuthError || fallbackMessage;\n    }\n    return message;\n  }\n\n  // Show a toast using current snackbar config. If message is empty, no toast is displayed allowing to opt-out when needed.\n  // Default MatSnackBarConfig has no duration, meaning it stays visible forever.\n  // If that's the case, an action button is added to allow the end-user to dismiss the toast.\n  showToast(message: string) {\n    if (message) {\n      this._snackBar.open(message, this._matSnackBarConfig.duration ? null : 'OK');\n    }\n  }\n\n  showErrorToast(error: any) {\n    if (this.config.toastMessageOnAuthError) {\n      this.showToast(this.getMessageOnAuthError(error));\n    }\n  }\n\n  notifyError(error: any) {\n    this.onErrorEmitter.emit(error);\n    this.showErrorToast(error);\n  }\n\n}\n","import {animate, animateChild, animation, query, stagger, state, style, transition, trigger, useAnimation} from '@angular/animations';\n\nconst customAnimation = animation(\n  [\n    style({\n      opacity: '{{opacity}}',\n      transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\n    }),\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\n  ],\n  {\n    params: {\n      duration: '200ms',\n      delay: '0ms',\n      opacity: '0',\n      scale: '1',\n      x: '0',\n      y: '0',\n      z: '0'\n    }\n  }\n);\n\nexport const NgxAuthFirebaseuiAnimations = [\n  trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\n\n  trigger('animateStagger', [\n    state('50', style('*')),\n    state('100', style('*')),\n    state('200', style('*')),\n\n    transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], {optional: true})),\n    transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], {optional: true})),\n    transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], {optional: true}))\n  ]),\n];\n","import {Component, EventEmitter, Inject, Input, OnInit, Output, PLATFORM_ID, ViewEncapsulation} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {MatFormFieldAppearance, ThemePalette} from '@angular/material';\nimport {AuthProcessService, AuthProvider} from '../../services/auth-process.service';\nimport {Subscription} from 'rxjs';\nimport {NgxAuthFirebaseuiAnimations} from '../../animations';\nimport {isPlatformBrowser} from '@angular/common';\n\n@Component({\n  selector: 'ngx-auth-firebaseui-login',\n  template: `\n    <div id=\"login\" fxLayout=\"column\">\n\n      <div id=\"login-form-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n\n        <div id=\"login-form\" [@animateStagger]=\"{ value: '50' }\">\n\n          <div *ngIf=\"logoUrl\" class=\"logo\">\n            <img [src]=\"logoUrl\" alt=\"logo\" [@animate]=\"{ value: '*', params: { x: '50px' } }\">\n          </div>\n\n          <div class=\"title\" [@animate]=\"{ value: '*', params: { x: '-50px' } }\">{{titleText}}</div>\n\n          <form name=\"loginForm\" [formGroup]=\"loginForm\" novalidate\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\">\n\n            <mat-form-field [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { x: '50px' } }\">\n              <input matInput [placeholder]=\"emailText\" formControlName=\"email\">\n              <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n              <mat-error *ngIf=\"loginForm.get('email')?.hasError('required')\">\n                {{emailErrorRequiredText}}\n              </mat-error>\n              <mat-error\n                *ngIf=\"!loginForm.get('email')?.hasError('required') &&\n                                    loginForm.get('email')?.hasError('email')\">\n                {{emailErrorPatternText}}\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { x: '50px' } }\">\n              <input matInput type=\"password\" [placeholder]=\"passwordText\" formControlName=\"password\">\n              <mat-icon matSuffix [color]=\"color\">lock</mat-icon>\n              <mat-error>\n                {{passwordErrorRequiredText}}\n              </mat-error>\n            </mat-form-field>\n\n            <div class=\"remember-forgot-password\"\n                 fxLayout=\"row\" fxLayout.xs=\"column\"\n                 fxLayoutAlign=\"space-between center\"\n                 [@animate]=\"{ value: '*', params: { x: '50px' } }\">\n    <!--          <mat-checkbox class=\"remember-me\" aria-label=\"Remember Me\">-->\n    <!--            {{rememberMeText}}-->\n    <!--          </mat-checkbox>-->\n\n              <button *ngIf=\"resetPasswordEnabled\"\n                      [@animate]=\"{ value: '*', params: { x: '-50px' } }\"\n                      mat-button\n                      class=\"forgot-password\"\n                      [color]=\"color\"\n                      type=\"button\"\n                      (click)=\"onResetPasswordRequested.emit()\">\n                {{forgotPasswordText}}\n              </button>\n            </div>\n\n            <button mat-raised-button\n                    id=\"loginButton\"\n                    [color]=\"colorAccent\"\n                    class=\"submit-button\"\n                    aria-label=\"LOG IN\"\n                    [disabled]=\"loginForm.invalid\"\n                    (click)=\"login()\">\n              {{loginButtonText}}\n            </button>\n\n          </form>\n\n          <div *ngIf=\"providers.length > 0\"\n               class=\"separator\"\n               [@animate]=\"{ value: '*', params: { z: '50px', delay: '50ms', scale: '0.2' } }\">\n            <span class=\"text\">{{orLabelText}}</span>\n          </div>\n\n          <ngx-auth-firebaseui-providers layout=\"column\"\n                                         fxLayoutAlign=\"center center\"\n                                         theme=\"raised\"\n                                         [providers]=\"providers\"></ngx-auth-firebaseui-providers>\n\n          <div *ngIf=\"registrationEnabled\"\n               [@animateStagger]=\"{ value: '100' }\"\n               class=\"register\"\n               fxLayout=\"column\" fxLayoutAlign=\"center center\">\n            <span class=\"text\" [@animate]=\"{ value: '*', params: { x: '100px' } }\">\n              {{dontHaveAnAccountText}}\n            </span>\n            <button [@animate]=\"{ value: '*', params: { x: '-100px' } }\"\n                    mat-button\n                    id=\"createAccountButton\"\n                    [color]=\"color\"\n                    type=\"button\"\n                    (click)=\"onCreateAccountRequested.emit()\">{{createAccountButtonText}}</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    ngx-auth-firebaseui-login #login-form-wrapper{-webkit-box-flex:1;flex:1 0 auto;padding:32px}@media screen and (max-width:599px){ngx-auth-firebaseui-login #login-form-wrapper{padding:16px}}ngx-auth-firebaseui-login #login-form-wrapper #login-form{width:384px;max-width:384px;padding:32px;text-align:center}@media screen and (max-width:599px){ngx-auth-firebaseui-login #login-form-wrapper #login-form{padding:24px;width:100%}}ngx-auth-firebaseui-login #login-form-wrapper #login-form .logo{width:150px;height:150px;margin:32px auto}ngx-auth-firebaseui-login #login-form-wrapper #login-form .title{font-size:20px;margin:16px 0 32px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form{width:100%;text-align:left}ngx-auth-firebaseui-login #login-form-wrapper #login-form form mat-form-field{width:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form form mat-checkbox{margin:0}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .remember-forgot-password{font-size:13px;margin-top:8px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .remember-forgot-password .remember-me{margin-bottom:16px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .remember-forgot-password .forgot-password{font-size:13px;font-weight:500;margin-bottom:16px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .submit-button{width:220px;margin:16px auto;display:block}@media screen and (max-width:599px){ngx-auth-firebaseui-login #login-form-wrapper #login-form form .submit-button{width:90%}}ngx-auth-firebaseui-login #login-form-wrapper #login-form .register{margin:32px auto 24px;font-weight:500}ngx-auth-firebaseui-login #login-form-wrapper #login-form .register .text{margin-right:8px}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator{font-size:15px;font-weight:600;margin:24px auto;position:relative;overflow:hidden;width:100px}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text{display:-webkit-inline-box;display:inline-flex;position:relative;padding:0 8px;z-index:9999}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:after,ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:before{content:\"\";display:block;width:30px;position:absolute;top:10px;border-top:1px solid}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:before{right:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:after{left:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form button.facebook-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.github-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.google-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.microsoft-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.twitter-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.yahoo-raised{width:192px;text-transform:none;color:#fff;font-size:13px;margin-bottom:8px}@media screen and (max-width:599px){ngx-auth-firebaseui-login #login-form-wrapper #login-form button{width:80%}}\n  `],\n  encapsulation: ViewEncapsulation.None,\n  animations: NgxAuthFirebaseuiAnimations\n})\nexport class NgxAuthFirebaseuiLoginComponent implements OnInit {\n\n  @Input() logoUrl: string;\n  @Input() providers: string[] | string = AuthProvider.ALL; //  google, facebook, twitter, github as array or all as one single string\n  @Input() appearance: MatFormFieldAppearance;\n  @Input() registrationEnabled = true;\n  @Input() resetPasswordEnabled = true;\n  @Input() messageOnAuthSuccess: string;\n  @Input() messageOnAuthError: string;\n\n  // i18n\n  @Input() titleText = 'LOGIN TO YOUR ACCOUNT';\n  @Input() rememberMeText = 'Remember Me';\n  @Input() loginButtonText = 'LOGIN';\n  @Input() orLabelText = 'OR';\n  @Input() forgotPasswordText = 'Forgot Password?';\n  @Input() dontHaveAnAccountText = 'Don\\'t have an account?';\n  @Input() createAccountButtonText = 'Create an account';\n\n  // i18n email\n  @Input() emailText = 'Email';\n  @Input() emailErrorRequiredText = 'Email is required';\n  @Input() emailErrorPatternText = 'Please enter a valid email address';\n\n  // i18n password\n  @Input() passwordText = 'Password';\n  @Input() passwordErrorRequiredText = 'Password is required';\n\n  // Events\n  @Output() onSuccess: any;\n  @Output() onError: any;\n  @Output() onCreateAccountRequested: EventEmitter<void> = new EventEmitter<void>();\n  @Output() onResetPasswordRequested: EventEmitter<void> = new EventEmitter<void>();\n\n  loginForm: FormGroup;\n  authProviders = AuthProvider;\n  onErrorSubscription: Subscription;\n  authenticationError = false;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    public authProcess: AuthProcessService,\n    private _formBuilder: FormBuilder) {\n    this.onSuccess = authProcess.onSuccessEmitter;\n    this.onError = authProcess.onErrorEmitter;\n  }\n\n  get color(): string | ThemePalette {\n    return this.authenticationError ? 'warn' : 'primary';\n  }\n\n  get colorAccent(): string | ThemePalette {\n    return this.authenticationError ? 'warn' : 'accent';\n  }\n\n  ngOnInit() {\n\n    if (isPlatformBrowser(this.platformId)) {\n      this.onErrorSubscription = this.onError.subscribe(() => this.authenticationError = true);\n    }\n\n    this.updateAuthSnackbarMessages();\n\n    this.loginForm = this._formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n\n  public updateAuthSnackbarMessages(): void {\n    this.authProcess.messageOnAuthSuccess = this.messageOnAuthSuccess;\n    this.authProcess.messageOnAuthError = this.messageOnAuthError;\n  }\n\n  async login() {\n    return await this.authProcess.signInWith(this.authProviders.EmailAndPassword,\n      {\n        email: this.loginForm.controls.email.value,\n        password: this.loginForm.controls.password.value\n      }\n    )\n  }\n}\n","import {Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output, PLATFORM_ID, ViewEncapsulation} from '@angular/core';\nimport {AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators} from '@angular/forms';\nimport {MatFormFieldAppearance, ThemePalette} from '@angular/material';\nimport {Subject, Subscription} from 'rxjs';\nimport {takeUntil} from 'rxjs/internal/operators';\n\nimport {NgxAuthFirebaseuiAnimations} from '../../animations';\nimport {AuthProcessService} from '../../services/auth-process.service';\nimport {isPlatformBrowser} from '@angular/common';\n\nexport const confirmPasswordValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n  if (!control.parent || !control) {\n    return null;\n  }\n\n  const password = control.parent.get('password');\n  const passwordConfirm = control.parent.get('passwordConfirm');\n\n  if (!password || !passwordConfirm) {\n    return null;\n  }\n\n  if (passwordConfirm.value === '') {\n    return null;\n  }\n\n  if (password.value === passwordConfirm.value) {\n    return null;\n  }\n\n  return {passwordsNotMatching: true};\n};\n\n@Component({\n  selector: 'ngx-auth-firebaseui-register',\n  template: `\n    <div id=\"register\" fxLayout=\"column\">\n\n      <div id=\"register-form-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n\n        <div id=\"register-form\" [@animateStagger]=\"{ value: '50' }\">\n\n          <div *ngIf=\"logoUrl\" class=\"logo\">\n            <img [src]=\"logoUrl\" alt=\"logo\" [@animate]=\"{ value: '*', params: { x: '50px' } }\">\n          </div>\n\n          <div class=\"title\" [@animate]=\"{ value: '*', params: { x: '-50px' } }\">{{titleText}}</div>\n\n          <form [formGroup]=\"registerForm\" name=\"registerForm\" novalidate\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\">\n\n            <mat-form-field [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { x: '50px' } }\">\n              <input formControlName=\"name\" matInput [placeholder]=\"nameText\"/>\n              <mat-icon matSuffix [color]=\"color\">person</mat-icon>\n              <mat-error>\n                {{nameErrorRequiredText}}\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { x: '50px' } }\">\n              <input formControlName=\"email\" matInput [placeholder]=\"emailText\"/>\n              <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n              <mat-error *ngIf=\"registerForm.get('email')?.hasError('required')\">\n                {{emailErrorRequiredText}}\n              </mat-error>\n              <mat-error *ngIf=\"registerForm.get('email')?.hasError('email')\">\n                {{emailErrorPatternText}}\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { x: '50px' } }\">\n              <input formControlName=\"password\" matInput [placeholder]=\"passwordText\" type=\"password\"/>\n              <mat-icon matSuffix [color]=\"color\">lock</mat-icon>\n              <mat-error>\n                {{passwordErrorRequiredText}}\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { x: '50px' } }\">\n              <input formControlName=\"passwordConfirm\" matInput [placeholder]=\"passwordConfirmationText\" type=\"password\"/>\n              <mat-icon matSuffix [color]=\"color\">lock</mat-icon>\n              <mat-error *ngIf=\"registerForm.get('passwordConfirm')?.hasError('required')\">\n                {{passwordConfirmationErrorRequiredText}}\n              </mat-error>\n              <mat-error\n                *ngIf=\"\n                  !registerForm.get('passwordConfirm')?.hasError('required') &&\n                  registerForm.get('passwordConfirm')?.hasError('passwordsNotMatching')\n                \">\n                {{passwordErrorMatchText}}\n              </mat-error>\n            </mat-form-field>\n\n            <!--        <div *ngIf=\"this.tosUrl || this.privacyPolicyUrl\"-->\n            <!--        <div-->\n            <!--          class=\"terms\"-->\n            <!--          fxLayout=\"row\" fxLayoutAlign=\"center center\"-->\n            <!--          [@animate]=\"{value:'*',params:{duration:'250ms',y:'100px'}}\">-->\n            <!--          <mat-checkbox aria-label=\"I read and accept\" name=\"terms\" required>-->\n            <!--            <span>{{readAncAcceptText}}</span>-->\n            <!--            <span>&nbsp;</span>-->\n            <!--            <a target=\"_blank\"-->\n            <!--               [href]=\"this.tosUrl\">-->\n            <!--              Terms of Service and Conditions-->\n            <!--            </a>-->\n            <!--          </mat-checkbox>-->\n            <!--        </div>-->\n\n            <button mat-raised-button\n                    id=\"createAccountButton\"\n                    class=\"submit-button\"\n                    aria-label=\"CREATE AN ACCOUNT\"\n                    [color]=\"colorAccent\"\n                    [disabled]=\"registerForm.invalid\"\n                    (click)=\"createAccount()\">\n              {{createAccountButtonText}}\n            </button>\n          </form>\n\n          <div class=\"register\" fxLayout=\"column\" fxLayoutAlign=\"center center\"\n               [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\">\n            <span class=\"text\" [@animate]=\"{ value: '*', params: { x: '100px' } }\">\n              {{alreadyHaveAccountText}}\n            </span>\n            <button mat-button\n                    id=\"loginButton\"\n                    type=\"button\"\n                    [color]=\"colorAccent\"\n                    (click)=\"onLoginRequested.emit()\"\n                    [@animate]=\"{ value: '*', params: { x: '-100px' } }\">\n              {{loginButtonText}}\n            </button>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    ngx-auth-firebaseui-register #register{width:100%;background-size:cover}ngx-auth-firebaseui-register #register #register-form-wrapper{-webkit-box-flex:1;flex:1 0 auto;padding:32px}@media screen and (max-width:599px){ngx-auth-firebaseui-register #register #register-form-wrapper{padding:16px}}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form{width:384px;max-width:384px;padding:32px;text-align:center}@media screen and (max-width:599px){ngx-auth-firebaseui-register #register #register-form-wrapper #register-form{padding:24px;width:100%}}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .logo{width:128px;margin:32px auto}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .title{font-size:20px;margin:16px 0 32px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form{width:100%;text-align:left}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form mat-form-field{width:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form mat-checkbox{margin:0}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .terms{margin:16px 0 32px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .terms a{font-size:16px;margin-left:4px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .submit-button{width:220px;margin:16px auto;display:block}@media screen and (max-width:599px){ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .submit-button{width:90%}}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .register{margin:32px auto 24px;font-weight:500}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .register .text{margin-right:8px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator{font-size:15px;font-weight:600;margin:24px auto;position:relative;overflow:hidden;width:100px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text{display:-webkit-inline-box;display:inline-flex;position:relative;padding:0 8px;z-index:9999}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:after,ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:before{content:\"\";display:block;width:30px;position:absolute;top:10px;border-top:1px solid}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:before{right:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:after{left:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.facebook,ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.google{width:192px;text-transform:none;color:#fff;font-size:13px}@media screen and (max-width:599px){ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button{width:80%}}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.google{background-color:#d73d32;margin-bottom:8px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.facebook{background-color:#3f5c9a}ngx-auth-firebaseui-register ::ng-deep .mat-checkbox-label{display:-webkit-box;display:flex;flex-wrap:wrap}\n  `],\n  encapsulation: ViewEncapsulation.None,\n  animations: NgxAuthFirebaseuiAnimations\n})\nexport class NgxAuthFirebaseuiRegisterComponent implements OnInit, OnDestroy {\n\n  @Input() logoUrl: string;\n  @Input() appearance: MatFormFieldAppearance;\n  @Input() tosUrl: string;\n  @Input() privacyPolicyUrl: string;\n\n  // i18n common\n  @Input() titleText = 'CREATE AN ACCOUNT';\n  @Input() readAncAcceptText = 'I read and accept';\n  @Input() termsAndConditionsText = 'terms and conditions';\n  @Input() createAccountButtonText = 'CREATE AN ACCOUNT';\n  @Input() alreadyHaveAccountText = 'Already have an account?';\n  @Input() loginButtonText = 'LOGIN';\n\n  // i18n emnameail\n  @Input() nameText = 'Name';\n  @Input() nameErrorRequiredText = 'Name is required';\n\n  // i18n email\n  @Input() emailText = 'Email';\n  @Input() emailErrorRequiredText = 'Email is required';\n  @Input() emailErrorPatternText = 'Please enter a valid email address';\n\n  // i18n password\n  @Input() passwordText = 'Password';\n  @Input() passwordErrorRequiredText = 'Password is required';\n  @Input() passwordConfirmationText = 'Password Confirmation';\n  @Input() passwordConfirmationErrorRequiredText = 'Password confirmation is required';\n  @Input() passwordErrorMatchText = 'Password must match';\n\n  // Events\n  @Output() onSuccess: any;\n  @Output() onError: any;\n  @Output() onLoginRequested: EventEmitter<void> = new EventEmitter<void>();\n\n  registerForm: FormGroup;\n  onErrorSubscription: Subscription;\n  authenticationError = false;\n\n  // Private\n  private _unsubscribeAll: Subject<any>;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object,\n              private _formBuilder: FormBuilder,\n              public authProcess: AuthProcessService) {\n    // Configure the layout\n\n    // Set the private defaults\n    this._unsubscribeAll = new Subject();\n    this.onSuccess = authProcess.onSuccessEmitter;\n    this.onError = authProcess.onErrorEmitter;\n  }\n\n  get color(): string | ThemePalette {\n    return this.authenticationError ? 'warn' : 'primary';\n  }\n\n  get colorAccent(): string | ThemePalette {\n    return this.authenticationError ? 'warn' : 'accent';\n  }\n\n  ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.onErrorSubscription = this.onError.subscribe(() => this.authenticationError = true);\n    }\n    this.registerForm = this._formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      passwordConfirm: ['', [Validators.required, confirmPasswordValidator]]\n    });\n\n    // Update the validity of the 'passwordConfirm' field\n    // when the 'password' field changes\n    this.registerForm\n      .controls\n      .password\n      .valueChanges.pipe(takeUntil(this._unsubscribeAll))\n      .subscribe(() => {\n        this.registerForm.controls.passwordConfirm.updateValueAndValidity();\n      });\n  }\n\n  /**\n   * On destroy\n   */\n  ngOnDestroy(): void {\n    // Unsubscribe from all subscriptions\n    this._unsubscribeAll.next();\n    this._unsubscribeAll.complete();\n  }\n\n  async createAccount() {\n    return await this.authProcess.signUp(\n      this.registerForm.controls.name.value,\n      {\n        email: this.registerForm.controls.email.value,\n        password: this.registerForm.controls.password.value\n      }\n    )\n  }\n}\n","import {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\nimport {LegalityDialogParams, LegalityDialogResult} from '../../interfaces/legality.dialog.intreface';\n\n@Component({\n  selector: 'ngx-auth-firebaseui-legality-dialog',\n  template: `\n    <h1 matDialogTitle>Legal requirements</h1>\n\n    <mat-dialog-content>\n      <div fxLayout=\"column\" fxLayoutAlign=\"start\">\n        <mat-checkbox *ngIf=\"this.data.tosUrl\" [(ngModel)]=\"checkTOS\">\n          I agree to the\n          <span>&nbsp;</span>\n          <a target=\"_blank\"\n             [href]=\"this.data.tosUrl\">\n            Terms of Service and Conditions\n          </a>\n        </mat-checkbox>\n\n        <mat-checkbox *ngIf=\"this.data.privacyPolicyUrl\"\n                      [(ngModel)]=\"checkPrivacyPolicy\">\n          I have read and agree to the\n          <span>&nbsp;</span>\n          <a target=\"_blank\"\n             [href]=\"this.data.privacyPolicyUrl\">\n            Privacy\n          </a>\n        </mat-checkbox>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n      <button id=\"decline-action\"\n              mat-raised-button\n              matDialogClose\n              color=\"warn\">Decline</button>\n      <button id=\"confirm-action\"\n              mat-raised-button\n              color=\"primary\"\n              [disabled]=\"disableConfirmActionButton\"\n              (click)=\"closeDialog()\">Confirm\n      </button>\n    </mat-dialog-actions>\n  `,\n  styles: [`\n    ::ng-deep .mat-checkbox-label{display:-webkit-box;display:flex;flex-wrap:wrap}mat-dialog-content div{margin-top:1.5rem}mat-dialog-actions{margin-top:1rem}\n  `]\n})\nexport class LegalityDialogComponent {\n\n  checkTOS: boolean;\n  checkPrivacyPolicy: boolean;\n  private _disableConfirmActionButton = false;\n\n  constructor(public dialogRef: MatDialogRef<LegalityDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: LegalityDialogParams) {\n  }\n\n\n  get disableConfirmActionButton(): boolean {\n    if (this.data.tosUrl && this.data.privacyPolicyUrl) {\n      this._disableConfirmActionButton = !(this.checkTOS && this.checkPrivacyPolicy);\n    } else if (this.data.tosUrl && !this.data.privacyPolicyUrl) {\n      this._disableConfirmActionButton = !this.checkTOS\n    } else if (!this.data.tosUrl && this.data.privacyPolicyUrl) {\n      this._disableConfirmActionButton = !this.checkPrivacyPolicy\n    }\n    return this._disableConfirmActionButton;\n  }\n\n  closeDialog() {\n    const result: LegalityDialogResult = {\n      checked: !this.disableConfirmActionButton,\n      authProvider: this.data.authProvider\n    };\n    this.dialogRef.close(result);\n  }\n\n}\n","import {Component, Input, Output} from '@angular/core';\nimport {AuthProcessService, AuthProvider} from '../../services/auth-process.service';\nimport {NgxAuthFirebaseuiAnimations} from '../../animations';\n\nexport enum Theme {\n  DEFAULT = 'default',\n  CLASSIC = 'classic',\n  STROKED = 'stroked',\n  FAB = 'fab',\n  MINI_FAB = 'mini-fab',\n  RAISED = 'raised',\n}\n\nexport enum Layout {\n  ROW = 'row',\n  COLUMN = 'column'\n}\n\n@Component({\n  selector: 'ngx-auth-firebaseui-providers',\n  template: `\n    <div [ngSwitch]=\"theme\" [@animateStagger]=\"{ value: '50' }\">\n\n      <!--default icon buttons-->\n      <div *ngSwitchDefault\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-button\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          <mat-icon svgIcon=\"google-colored\"></mat-icon>\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-button\n                class=\"facebook-filled\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          <mat-icon svgIcon=\"facebook\"></mat-icon>\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-button\n                class=\"twitter-filled\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          <mat-icon svgIcon=\"twitter\"></mat-icon>\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-button\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          <mat-icon svgIcon=\"github\"></mat-icon>\n          GitHub\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Microsoft)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-button\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Microsoft)\">\n          <mat-icon svgIcon=\"microsoft\"></mat-icon>\n          Microsoft\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Yahoo)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-button\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Yahoo)\">\n          <mat-icon svgIcon=\"yahoo\"></mat-icon>\n          Yahoo\n        </button>\n      </div>\n\n      <!--classic-->\n      <div *ngSwitchCase=\"themes.CLASSIC\"\n           class=\"buttons-classic\"\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-button\n                class=\"google-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-button\n                class=\"facebook-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-button\n                class=\"twitter-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-button\n                class=\"github-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          GitHub\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Microsoft)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-button\n                class=\"microsoft-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Microsoft)\">\n          Microsoft\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Yahoo)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-button\n                class=\"yahoo-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Yahoo)\">\n          Yahoo\n        </button>\n      </div>\n\n      <!--stroked-->\n      <div *ngSwitchCase=\"themes.STROKED\"\n           class=\"buttons-classic\"\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-stroked-button\n                class=\"google-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-stroked-button\n                class=\"facebook-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-stroked-button\n                class=\"twitter-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-stroked-button\n                class=\"github-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          GitHub\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Microsoft)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-stroked-button\n                class=\"microsoft-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Microsoft)\">\n          Microsoft\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Yahoo)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-stroked-button\n                class=\"yahoo-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Yahoo)\">\n          Yahoo\n        </button>\n      </div>\n\n      <!--raised-->\n      <div *ngSwitchCase=\"themes.RAISED\"\n           class=\"buttons-raised\"\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-raised-button\n                class=\"google-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-raised-button\n                class=\"facebook-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-raised-button\n                class=\"twitter-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-raised-button\n                class=\"github-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          GitHub\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Microsoft)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-raised-button\n                class=\"microsoft-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Microsoft)\">\n          Microsoft\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Yahoo)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-raised-button\n                class=\"yahoo-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Yahoo)\">\n          Yahoo\n        </button>\n      </div>\n\n      <!--fab-->\n      <div *ngSwitchCase=\"themes.FAB\"\n           class=\"buttons-raised\"\n           [fxLayout]=\"layout\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-fab\n                class=\"google-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          <mat-icon svgIcon=\"google\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-fab\n                class=\"facebook-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          <mat-icon svgIcon=\"facebook\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-fab\n                class=\"twitter-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          <mat-icon svgIcon=\"twitter\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-fab\n                class=\"github-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          <mat-icon svgIcon=\"github\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Microsoft)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-fab\n                class=\"microsoft\"\n                (click)=\"authProcess.signInWith(authProvider.Microsoft)\">\n          <mat-icon svgIcon=\"microsoft\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Yahoo)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-fab\n                class=\"yahoo-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Yahoo)\">\n          <mat-icon svgIcon=\"yahoo\"></mat-icon>\n        </button>\n      </div>\n\n      <!--mini-fab-->\n      <div *ngSwitchCase=\"themes.MINI_FAB\"\n           class=\"buttons-raised\"\n           [fxLayout]=\"layout\"\n           fxLayoutAlign.xs=\"center center\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-mini-fab\n                class=\"google-raised\"\n                fxFlexAlign=\"center\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          <mat-icon svgIcon=\"google\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-mini-fab\n                class=\"facebook-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          <mat-icon svgIcon=\"facebook\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-mini-fab\n                class=\"twitter-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          <mat-icon svgIcon=\"twitter\" class=\"icon-white\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-mini-fab\n                class=\"github-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          <mat-icon svgIcon=\"github\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Microsoft)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-mini-fab\n                class=\"microsoft\"\n                (click)=\"authProcess.signInWith(authProvider.Microsoft)\">\n          <mat-icon svgIcon=\"microsoft\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Yahoo)\"\n                [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                mat-mini-fab\n                class=\"yahoo-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Yahoo)\">\n          <mat-icon svgIcon=\"yahoo\"></mat-icon>\n        </button>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host{display:block}:host .mat-icon{vertical-align:inherit}.space-full-xs{width:100%;margin:.4rem}.facebook-filled mat-icon{fill:#385899}.twitter-filled mat-icon{fill:#1da1f2}.buttons-raised button{color:#fff!important}.buttons-raised .google-raised{background-color:#db4437}.buttons-raised .facebook-raised{background-color:#385899}.buttons-raised .twitter-raised{background-color:#1da1f2}.buttons-raised .github-raised{background-color:#000}.buttons-raised .microsoft-raised{background-color:#0078d4}.buttons-raised .yahoo-raised{background-color:#720e9e}.buttons-raised .phone-raised{background-color:#02bd7e}.buttons-classic button.google-classic{color:#db4437!important}.buttons-classic .facebook-classic{color:#385899!important}.buttons-classic .twitter-classic{color:#1da1f2!important}.buttons-classic .github-classic{color:#000!important}.buttons-classic .microsoft-classic{color:#0078d4!important}.buttons-classic .yahoo-classic{color:#720e9e!important}.buttons-classic .phone-classic{color:#02bd7e}.icon-white{color:#fff}.icon-white mat-icon{fill:#fff}button.microsoft{background:#f8f9fa}\n  `],\n  animations: NgxAuthFirebaseuiAnimations\n})\nexport class AuthProvidersComponent {\n\n  @Input() theme: Theme; // theme: string = Theme.DEFAULT;\n  @Input() layout: string = Layout.ROW;\n  @Input() providers: AuthProvider[] | AuthProvider = AuthProvider.ALL; //  google, facebook, twitter, github, microsoft, yahoo\n\n  @Output() onSuccess: any;\n  @Output() onError: any;\n\n  themes = Theme;\n  authProvider = AuthProvider;\n\n  constructor(public authProcess: AuthProcessService) {\n    this.onSuccess = authProcess.onSuccessEmitter;\n    this.onError = authProcess.onErrorEmitter;\n  }\n\n}\n","import {isPlatformBrowser} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  PLATFORM_ID,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport {AbstractControl, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {MatDialog, MatDialogRef, MatFormFieldAppearance, MatTabChangeEvent, MatTabGroup, ThemePalette} from '@angular/material';\nimport {ActivatedRoute} from '@angular/router';\nimport {Subscription} from 'rxjs/internal/Subscription';\nimport {LegalityDialogComponent} from '../../components/legality-dialog/legality-dialog.component';\nimport {LegalityDialogParams, LegalityDialogResult} from '../../interfaces/legality.dialog.intreface';\nimport {NgxAuthFirebaseUIConfig, NgxAuthFirebaseUIConfigToken} from '../../ngx-auth-firebase-u-i.module';\nimport {AuthProcessService, AuthProvider, messageOnAuthErrorType} from '../../services/auth-process.service';\nimport {Theme} from '../providers/auth.providers.component';\nimport {MatPasswordStrengthComponent} from '@angular-material-extensions/password-strength';\nimport {NgxAuthFirebaseuiAnimations} from '../../animations';\n\n\nexport const EMAIL_REGEX = new RegExp(['^(([^<>()[\\\\]\\\\\\.,;:\\\\s@\\\"]+(\\\\.[^<>()\\\\[\\\\]\\\\\\.,;:\\\\s@\\\"]+)*)',\n  '|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.',\n  '[0-9]{1,3}\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+',\n  '[a-zA-Z]{2,}))$'].join(''));\n\nexport const PHONE_NUMBER_REGEX = new RegExp(/^\\+(?:[0-9] ?){6,14}[0-9]$/);\n\n@Component({\n  selector: 'ngx-auth-firebaseui',\n  template: `\n    <ng-container *ngIf=\"authProcess.user$ | async as user; else showForm\">\n\n      <!-- This component will be shown when:\n        - we just sent a verification mail (notably after sign up)\n        - we arrived from the guard after trying to access a protected route even though we are connected\n      -->\n      <div *ngIf=\"(config.guardProtectedRoutesUntilEmailIsVerified && !user.emailVerified) || (authProcess.emailConfirmationSent && !user.emailVerified); else signedInUser\"\n           fxLayout=\"row\" fxLayoutAlign=\"center center\">\n          <ngx-auth-firebaseui-email-confirmation\n            [template]=\"verifyEmailTemplate\"\n            [email]=\"user.email\"\n            [goBackURL]=\"goBackURL\"\n            [verifyEmailTitleText]=\"verifyEmailTitleText\"\n            [verifyEmailConfirmationText]=\"verifyEmailConfirmationText\"\n            [verifyEmailGoBackText]=\"verifyEmailGoBackText\"\n            [sendNewVerificationEmailText]=\"sendNewVerificationEmailText\"\n            [signOutText]=\"signOutText\"\n            [messageOnEmailConfirmationSuccess]=\"messageOnEmailConfirmationSuccess\"\n            (signOut)=\"signOut()\">\n        </ngx-auth-firebaseui-email-confirmation>\n      </div>\n\n      <ng-template #signedInUser>\n          <div class=\"signed-in-container\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n            <img class=\"account-circle\" *ngIf=\"user.photoURL; else noPhoto\" [src]=\"user.photoURL\">\n            <ng-template #noPhoto><mat-icon class=\"account-circle\">account_circle</mat-icon></ng-template>\n            <div class=\"user-display-name mat-title\">{{ user.displayName }}</div>\n            <div class=\"user-email mat-body-2\">{{ user.email }}</div>\n            <div class=\"actions\">\n              <mat-progress-bar *ngIf=\"isLoading\" mode=\"indeterminate\"></mat-progress-bar>\n              <a mat-stroked-button class=\"go-back-button action-button\" color=\"primary\" [routerLink]=\"goBackURL\">{{ verifyEmailGoBackText }}</a>\n              <button mat-stroked-button class=\"sign-out-button action-button\" color=\"warn\" (click)=\"signOut()\">{{ signOutText }}</button>\n            </div>\n          </div>\n      </ng-template>\n\n    </ng-container>\n\n    <ng-template #showForm>\n      <mat-tab-group [color]=\"color\" [selectedIndex]=\"tabIndex\" (selectedTabChange)=\"onTabChange($event)\">\n        <!--Sign in tab-->\n        <mat-tab [label]=\"signInTabText\">\n          <mat-card>\n            <mat-card-title>{{signInCardTitleText}}</mat-card-title>\n            <mat-card-content>\n              <form  [@animateStagger]=\"{ value: '50' }\"\n                     [formGroup]=\"signInFormGroup\"\n                    (ngSubmit)=\"signIn()\">\n                <div fxLayout=\"column\" fxLayoutAlign=\"center\">\n                  <mat-form-field [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                                  [appearance]=\"appearance\">\n                    <mat-label>{{emailText}}</mat-label>\n                    <input matInput\n                          formControlName=\"email\"\n                          required>\n                    <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n                    <mat-error *ngIf=\"signInEmailFormControl.hasError('required')\">\n                      {{emailErrorRequiredText}}\n                    </mat-error>\n                    <mat-error *ngIf=\"signInEmailFormControl.hasError('pattern')\">\n                      {{emailErrorPatternText}}\n                    </mat-error>\n                  </mat-form-field>\n\n                  <mat-form-field [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\"\n                                [appearance]=\"appearance\">\n                    <mat-label>{{passwordText}}</mat-label>\n                    <input matInput [type]=\"togglePass.type\" [minlength]=\"min\" [maxlength]=\"max\" formControlName=\"password\"\n                          required/>\n                    <mat-pass-toggle-visibility #togglePass matSuffix></mat-pass-toggle-visibility>\n                    <mat-icon matSuffix [color]=\"color\">lock</mat-icon>\n                    <mat-hint align=\"end\" aria-live=\"polite\"> {{ signInFormGroup.value.password.length }}\n                      / {{ max }} </mat-hint>\n                    <mat-error *ngIf=\"sigInPasswordFormControl.hasError('required')\">\n                      {{passwordErrorRequiredText}}\n                    </mat-error>\n                    <mat-error *ngIf=\"sigInPasswordFormControl.hasError('minlength')\">\n                      {{ passwordErrorMinLengthText }}\n                    </mat-error>\n                    <mat-error *ngIf=\"sigInPasswordFormControl.hasError('maxlength')\">\n                      {{ passwordErrorMaxLengthText }}\n                    </mat-error>\n                  </mat-form-field>\n\n                  <button [@animate]=\"{ value: '*', params: { x: '50px' } }\"\n                        mat-raised-button\n                          style=\"margin-top: 20px\"\n                          type=\"submit\"\n                          class=\"space-top\"\n                          [color]=\"color\"\n                          [disabled]=\"signInFormGroup.invalid\">\n                    {{loginButtonText}}\n                  </button>\n\n                </div>\n              </form>\n\n              <div fxLayoutAlign=\"center\">\n                <button *ngIf=\"resetPasswordEnabled\"\n                        [@animate]=\"{ value: '*', params: { x: '-50px' } }\"\n                      mat-button\n                      class=\"space-top\"\n                      [color]=\"color\"\n                      (click)=\"createForgotPasswordTab()\">\n                {{forgotPasswordButtonText}}\n              </button>\n            </div>\n\n            </mat-card-content>\n            <mat-card-footer *ngIf=\"isLoading\">\n              <mat-progress-bar [@animate]=\"{ value: '*', params: { z: '50px', delay: '50ms', scale: '0.2' } }\"\n                              mode=\"indeterminate\"></mat-progress-bar>\n            </mat-card-footer>\n          </mat-card>\n        </mat-tab>\n\n        <!--tab register-->\n        <mat-tab [label]=\"registerTabText\" *ngIf=\"registrationEnabled\">\n          <mat-card>\n            <mat-card-title>{{registerCardTitleText}}</mat-card-title>\n              <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center\">\n                <form [@animateStagger]=\"{ value: '50' }\"\n                    [formGroup]=\"signUpFormGroup\" (ngSubmit)=\"signUpFormGroup.valid &&\n                processLegalSignUP(authProvider.EmailAndPassword)\">\n                  <div fxLayout=\"column\" fxLayoutAlign=\"center\">\n                    <!--name-->\n                    <mat-form-field [@animate]=\"{ value: '*', params: { x: '50px' } }\"\n                                  [appearance]=\"appearance\">\n                      <!--labels will work only with @angular/material@6.2.0 -->\n                      <mat-label>{{nameText}}</mat-label>\n                      <input\n                        matInput\n                        [minlength]=\"config.nameMinLength\"\n                        [maxlength]=\"config.nameMaxLength\"\n                        [formControl]=\"sigUpNameFormControl\"\n                        required\n                      />\n                      <mat-icon matSuffix [color]=\"color\">person</mat-icon>\n                      <mat-hint align=\"end\" aria-live=\"polite\"> {{ signUpFormGroup.value.name?.length }}\n                        / {{ config.nameMaxLength }} </mat-hint>\n                      <mat-error *ngIf=\"sigUpNameFormControl.hasError('required')\">\n                        {{nameErrorRequiredText}}\n                      </mat-error>\n                      <mat-error *ngIf=\"sigUpNameFormControl.hasError('minlength')\">\n                        {{nameErrorMinLengthText}}\n                      </mat-error>\n                      <mat-error *ngIf=\"sigUpNameFormControl.hasError('maxlength')\">\n                        {{nameErrorMaxLengthText}}\n                      </mat-error>\n                    </mat-form-field>\n\n                    <!--email-->\n                    <mat-form-field [@animate]=\"{ value: '*', params: { x: '50px' } }\"\n                                  [appearance]=\"appearance\">\n                      <mat-label>{{emailText}}</mat-label>\n                      <input matInput\n                            type=\"email\"\n                            [formControl]=\"sigUpEmailFormControl\"\n                            required>\n                      <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n                      <mat-error *ngIf=\"sigUpEmailFormControl.hasError('required')\">\n                        {{emailErrorRequiredText}}\n                      </mat-error>\n                      <mat-error *ngIf=\"sigUpEmailFormControl.hasError('pattern')\">\n                        {{emailErrorPatternText}}\n                      </mat-error>\n                    </mat-form-field>\n\n                    <!--password-->\n                    <div fxLayout=\"column\">\n                      <mat-form-field [@animate]=\"{ value: '*', params: { x: '50px' } }\"\n                                    [appearance]=\"appearance\">\n                        <mat-label>{{passwordText}}</mat-label>\n                        <input\n                          matInput\n                          [type]=\"toggle.type\"\n                          name=\"password\"\n                          [formControl]=\"sigUpPasswordFormControl\"\n                          required\n                          [minlength]=\"min\"\n                          [maxlength]=\"max\"\n                        />\n                        <mat-pass-toggle-visibility #toggle matSuffix></mat-pass-toggle-visibility>\n\n                        <mat-icon matSuffix [color]=\"color\">lock</mat-icon>\n\n                        <mat-hint align=\"end\" aria-live=\"polite\">\n                          {{signUpFormGroup.value.password?.length}} / {{ max }}\n                        </mat-hint>\n\n                        <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('required')\" class=\"cut-text\">\n                          {{passwordErrorRequiredText}}\n                        </mat-error>\n\n                        <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('minlength')\" class=\"cut-text\">\n                          {{ passwordErrorMinLengthText }}\n                        </mat-error>\n                        <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('maxlength')\" class=\"cut-text\">\n                          {{ passwordErrorMaxLengthText }}\n                        </mat-error>\n\n                      </mat-form-field>\n\n                      <mat-password-strength #passwordStrength\n                                            [min]=\"min\"\n                                            [max]=\"max\"\n                                            [customValidator]=\"customValidator\"\n                                            [enableLengthRule]=\"enableLengthRule\"\n                                            [enableLowerCaseLetterRule]=\"enableLowerCaseLetterRule\"\n                                            [enableUpperCaseLetterRule]=\"enableUpperCaseLetterRule\"\n                                            [enableDigitRule]=\"enableDigitRule\"\n                                            [enableSpecialCharRule]=\"enableSpecialCharRule\"\n                                            [password]=\"signUpFormGroup.value.password\"\n                                            [externalError]=\"sigUpPasswordFormControl.dirty\">\n                      </mat-password-strength>\n\n                    </div>\n\n                    <button [@animate]=\"{ value: '*', params: { x: '100px' } }\"\n                          mat-raised-button\n                            style=\"margin-top: 20px\"\n                            type=\"submit\"\n                            [disabled]=\"signUpFormGroup.invalid\"\n                            [color]=\"color\">\n                      {{registerButtonText}}\n                    </button>\n\n                  </div>\n                </form>\n\n                <button *ngIf=\"guestEnabled\"\n                        [@animate]=\"{ value: '*', params: { x: '-100px' } }\"\n                      mat-button\n                      style=\"margin-top: 20px\"\n                      [color]=\"color\"\n                      (click)=\"processLegalSignUP(authProvider.ANONYMOUS)\">\n                <mat-icon>fingerprint</mat-icon>\n                {{guestButtonText}}\n              </button>\n\n              </mat-card-content>\n\n              <mat-card-footer *ngIf=\"isLoading\">\n                <mat-progress-bar [@animate]=\"{ value: '*', params: { z: '50px', delay: '50ms', scale: '0.2' } }\"\n                                mode=\"indeterminate\"></mat-progress-bar>\n              </mat-card-footer>\n\n          </mat-card>\n        </mat-tab>\n\n        <!--Reset password tab-->\n        <mat-tab *ngIf=\"passwordResetWished\" class=\"reset-password-tab\">\n          <ng-template mat-tab-label>\n            <button mat-icon-button class=\"reset-password-tab__close-button\" (click)=\"passwordResetWished = false\">\n              {{ resetPasswordTabText }}\n              <mat-icon>close</mat-icon>\n            </button>\n          </ng-template>\n          <form [@animateStagger]=\"{ value: '50' }\"\n                [formGroup]=\"resetPasswordFormGroup\"\n                (ngSubmit)=\"resetPasswordFormGroup.valid && resetPassword()\">\n            <mat-card class=\"reset-password-card\">\n              <mat-card-content>\n                <mat-form-field [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\" class=\"full-width\"\n                                [appearance]=\"appearance\">\n                  <mat-label> {{ resetPasswordInputText }} </mat-label>\n                  <input matInput\n                        [title]=\"resetPasswordInputText\"\n                        formControlName=\"email\"\n                        required>\n                  <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n                  <mat-error *ngIf=\"resetPasswordEmailFormControl.hasError('required')\">\n                    {{resetPasswordErrorRequiredText}}\n                  </mat-error>\n                  <mat-error *ngIf=\"resetPasswordEmailFormControl.hasError('pattern')\">\n                    {{resetPasswordErrorPatternText}}\n                  </mat-error>\n                </mat-form-field>\n                <p *ngIf=\"passReset\">{{resetPasswordInstructionsText}}</p>\n              </mat-card-content>\n              <mat-card-actions fxLayoutAlign=\"center\">\n                <mat-progress-bar *ngIf=\"isLoading\" mode=\"indeterminate\"></mat-progress-bar>\n                <button [@animate]=\"{ value: '*', params: { x: '50px' } }\"\n                        mat-raised-button\n                        type=\"submit\"\n                        [color]=\"color\">\n                  {{resetPasswordActionButtonText}}\n                </button>\n              </mat-card-actions>\n            </mat-card>\n          </form>\n        </mat-tab>\n\n      </mat-tab-group>\n      <mat-divider></mat-divider>\n      <ngx-auth-firebaseui-providers *ngIf=\"tabIndex !== 2\"\n                                     [providers]=\"providers\"\n                                     [theme]=\"providersTheme\">\n      </ngx-auth-firebaseui-providers>\n    </ng-template>\n  `,\n  styles: [`\n    .mat-card{margin:2rem}.space-top{margin-top:.5rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.signed-in-container .account-circle{font-size:12rem;width:12rem;height:12rem}.signed-in-container img.account-circle{-o-object-fit:cover;object-fit:cover;border-radius:50%}.signed-in-container .sign-out-button{margin-top:2rem}.signed-in-container .user-display-name{margin-top:1rem}.signed-in-container .user-email{margin-top:-1rem}.signed-in-container .actions{margin-top:2rem}.signed-in-container .actions .action-button,.signed-in-container .actions mat-progress-bar{width:100%}.signed-in-container .actions .action-button{margin-top:1rem}.reset-password-tab mat-progress-bar{margin-bottom:1rem}.reset-password-tab__close-button{width:100%;display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.reset-password-tab__close-button mat-icon{font-size:18px;position:relative;top:-1px}\n  `],\n  animations: NgxAuthFirebaseuiAnimations,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AuthComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n\n  @ViewChild(MatTabGroup, {static: false}) matTabGroup: MatTabGroup;\n  @ViewChild(MatPasswordStrengthComponent, {static: false}) passwordStrength: MatPasswordStrengthComponent;\n\n  isLoading: boolean;\n\n  @Input() providers: AuthProvider[] | AuthProvider = AuthProvider.ALL; //  google, facebook, twitter, github as array or all as one single string\n  @Input() providersTheme: Theme; // Classic, Stroked, etc.\n\n  @Input() appearance: MatFormFieldAppearance;\n  @Input() tabIndex: number | null;\n  @Input() registrationEnabled = true;\n  @Input() resetPasswordEnabled = true;\n  @Input() guestEnabled = true;\n  @Input() tosUrl: string;\n  @Input() privacyPolicyUrl: string;\n  @Input() goBackURL: string;\n  @Input() messageOnAuthSuccess: string;\n  @Input() messageOnAuthError: messageOnAuthErrorType;\n  @Input() messageOnEmailConfirmationSuccess: string;\n\n  // Events\n  @Output() onSuccess: any;\n  @Output() onError: any;\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> = new EventEmitter();\n\n  // Password strength api\n  @Input() enableLengthRule = true;\n  @Input() enableLowerCaseLetterRule = true;\n  @Input() enableUpperCaseLetterRule = true;\n  @Input() enableDigitRule = true;\n  @Input() enableSpecialCharRule = true;\n  @Input() min: number;\n  @Input() max: number;\n  @Input() customValidator: RegExp;\n  @Output() onStrengthChanged: EventEmitter<number> = new EventEmitter();\n\n  // Verify email template to use in place of default template.\n  // See email-confirmation component\n  @Input() verifyEmailTemplate: TemplateRef<any>;\n\n  // i18n translations to use in default template for email verification.\n  // See email-confirmation component\n  @Input() verifyEmailTitleText: string;\n  @Input() verifyEmailConfirmationText: string;\n  @Input() verifyEmailGoBackText: string;\n  @Input() sendNewVerificationEmailText: string;\n  @Input() signOutText: string;\n\n  // Customize the text\n  // Reset Password Tab\n  @Input() resetPasswordTabText = 'Reset e-mail address to password';\n  @Input() resetPasswordInputText = 'Reset e-mail address to password';\n  @Input() resetPasswordErrorRequiredText = 'E-mail is required to reset the password!';\n  @Input() resetPasswordErrorPatternText = 'Please enter a valid e-mail address';\n  @Input() resetPasswordActionButtonText = 'Reset';\n  @Input() resetPasswordInstructionsText = 'Reset requested. Check your e-mail instructions.';\n\n  // SignIn Tab\n  @Input() signInTabText = 'Sign in';\n  @Input() signInCardTitleText = 'Signing in';\n  @Input() loginButtonText = 'Log In';\n  @Input() forgotPasswordButtonText = 'Forgot Password ?';\n\n  // Common\n  @Input() nameText = 'Name';\n  @Input() nameErrorRequiredText = 'Name is required';\n  @Input() nameErrorMinLengthText = 'The name is too short!';\n  @Input() nameErrorMaxLengthText = 'The name is too long!';\n\n  @Input() emailText = 'E-mail';\n  @Input() emailErrorRequiredText = 'E-mail is required';\n  @Input() emailErrorPatternText = 'Please enter a valid e-mail address';\n\n  @Input() passwordText = 'Password';\n  @Input() passwordErrorRequiredText = 'Password is required';\n  @Input() passwordErrorMinLengthText = 'The password is too short!';\n  @Input() passwordErrorMaxLengthText = 'The password is too long!';\n\n  // Register Tab\n  @Input() registerTabText = 'Register';\n  @Input() registerCardTitleText = 'Registration';\n  @Input() registerButtonText = 'Register';\n  @Input() guestButtonText = 'continue as guest';\n\n  // email confirmation component\n  @Input() emailConfirmationTitle = 'Confirm your e-mail address!';\n  @Input() emailConfirmationText = `A confirmation e-mail has been sent to you. Check your inbox and click on the link \"Confirm my e-mail\" to confirm your e-mail address.`;\n\n  authProvider = AuthProvider;\n  passwordResetWished: boolean;\n\n  public signInFormGroup: FormGroup;\n  public signUpFormGroup: FormGroup;\n  public resetPasswordFormGroup: FormGroup;\n\n  onErrorSubscription: Subscription;\n  authenticationError = false;\n\n  passReset = false;\n  dialogRef: MatDialogRef<LegalityDialogComponent>;\n\n  authProviders = AuthProvider;\n\n  signInEmailFormControl: AbstractControl;\n  sigInPasswordFormControl: AbstractControl;\n\n  sigUpNameFormControl: AbstractControl;\n  sigUpEmailFormControl: AbstractControl;\n  sigUpPasswordFormControl: AbstractControl;\n  sigUpPasswordConfirmationFormControl: AbstractControl;\n  resetPasswordEmailFormControl: AbstractControl;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    public auth: AngularFireAuth,\n    public authProcess: AuthProcessService,\n    public dialog: MatDialog,\n    @Inject(forwardRef(() => NgxAuthFirebaseUIConfigToken)) public config: NgxAuthFirebaseUIConfig,\n    private _activatedRoute: ActivatedRoute,\n    private _cdr: ChangeDetectorRef\n  ) {\n    this.onSuccess = authProcess.onSuccessEmitter;\n    this.onError = authProcess.onErrorEmitter;\n  }\n\n  public ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.onErrorSubscription = this.onError.subscribe(() => this.authenticationError = true);\n    }\n    this.min = this.min != null ? Math.max(this.min, this.config.passwordMinLength) : this.config.passwordMinLength;\n    this.max = this.max != null ? Math.min(this.max, this.config.passwordMaxLength) : this.config.passwordMaxLength;\n\n    this.goBackURL = this.chooseBackUrl();\n\n    this.updateAuthSnackbarMessages();\n    // auth form's initialization\n    this._initSignInFormGroupBuilder();\n    this._initSignUpFormGroupBuilder();\n    this._initResetPasswordFormGroupBuilder();\n  }\n\n  ngAfterViewInit(): void {\n    if (this.passwordStrength) {\n      this.passwordStrength.onStrengthChanged.subscribe((strength: number) => {\n        this.onStrengthChanged.emit(strength);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.messageOnAuthSuccess || changes.messageOnAuthError) {\n      this.updateAuthSnackbarMessages();\n    }\n    if (changes.min) {\n      this.min = this.min != null ? Math.max(this.min, this.config.passwordMinLength) : this.config.passwordMinLength;\n    }\n    if (changes.max) {\n      this.max = this.max != null ? Math.min(this.max, this.config.passwordMaxLength) : this.config.passwordMaxLength;\n    }\n    if (changes.goBackURL) {\n      this.goBackURL = this.chooseBackUrl();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.onErrorSubscription) {\n      this.onErrorSubscription.unsubscribe();\n    }\n  }\n\n  onTabChange(event: MatTabChangeEvent) {\n    this.selectedTabChange.emit(event);\n    this.tabIndex = event.index;\n  }\n\n  async signOut() {\n    try {\n      this.isLoading = true;\n      this._cdr.markForCheck();\n      await this.authProcess.signOut();\n    } finally {\n      this.isLoading = false;\n      this._cdr.markForCheck();\n    }\n  }\n\n  async signIn() {\n    if (!this.signInFormGroup.valid) {\n      return;\n    }\n    try {\n      this.isLoading = true;\n      this._cdr.markForCheck();\n      await this.authProcess.signInWith(this.authProviders.EmailAndPassword, {\n        email: this.signInFormGroup.value.email,\n        password: this.signInFormGroup.value.password\n      });\n    } finally {\n      this.isLoading = false;\n      this._cdr.markForCheck();\n    }\n  }\n\n  get color(): string | ThemePalette {\n    return this.authenticationError ? 'warn' : 'primary';\n  }\n\n  updateAuthSnackbarMessages(): void {\n    this.authProcess.messageOnAuthSuccess = this.messageOnAuthSuccess;\n    this.authProcess.messageOnAuthError = this.messageOnAuthError;\n  }\n\n  createForgotPasswordTab() {\n    this.passwordResetWished = true;\n    this.tabIndex = 2;\n    this._cdr.markForCheck();\n  }\n\n  processLegalSignUP(authProvider?: AuthProvider) {\n    if (this.tosUrl || this.privacyPolicyUrl) {\n      const params: LegalityDialogParams = {\n        tosUrl: this.tosUrl,\n        privacyPolicyUrl: this.privacyPolicyUrl,\n        authProvider: authProvider\n      };\n\n      this.dialogRef = this.dialog.open(LegalityDialogComponent, {data: params});\n      this.dialogRef.afterClosed().subscribe((result: LegalityDialogResult) => {\n        if (result && result.checked) {\n          this._afterSignUpMiddleware(result.authProvider).then(() => this.signUpFormGroup.reset());\n        }\n        this.dialogRef = null;\n      });\n    } else {\n      this._afterSignUpMiddleware(authProvider).then(() => this.signUpFormGroup.reset());\n    }\n  }\n\n  async signUp() {\n    try {\n      this.isLoading = true;\n      this._cdr.markForCheck();\n      return await this.authProcess.signUp(\n        this.signUpFormGroup.value.name,\n        {\n          email: this.signUpFormGroup.value.email,\n          password: this.signUpFormGroup.value.password\n        }\n      );\n    } finally {\n      this.isLoading = false;\n      this._cdr.markForCheck();\n    }\n  }\n\n  async signUpAnonymously() {\n    try {\n      this.isLoading = true;\n      this._cdr.markForCheck();\n      await this.authProcess.signInWith(this.authProvider.ANONYMOUS);\n    } finally {\n      this.isLoading = false;\n      this._cdr.markForCheck();\n    }\n  }\n\n\n  resetPassword() {\n    this.authProcess.resetPassword(this.resetPasswordEmailFormControl.value)\n      .then(() => {\n        this.passReset = true;\n        // this.tabIndex = 2;\n        this._cdr.markForCheck();\n      });\n  }\n\n  private chooseBackUrl() {\n    return this._activatedRoute.snapshot.queryParams['redirectUrl'] || this.goBackURL || '/';\n  }\n\n  private _initSignInFormGroupBuilder() {\n    this.signInFormGroup = new FormGroup({});\n    this.signInFormGroup.registerControl('email', this.signInEmailFormControl = new FormControl('',\n      [\n        Validators.required,\n        Validators.pattern(EMAIL_REGEX)\n      ]));\n    this.signInFormGroup.registerControl('password', this.sigInPasswordFormControl = new FormControl('',\n      [\n        Validators.required,\n        Validators.minLength(this.min),\n        Validators.maxLength(this.max)\n      ]));\n  }\n\n  private _initSignUpFormGroupBuilder() {\n    this.signUpFormGroup = new FormGroup({\n      name: this.sigUpNameFormControl = new FormControl('',\n        [\n          Validators.required,\n          Validators.minLength(this.config.nameMinLength),\n          Validators.maxLength(this.config.nameMaxLength)\n        ]),\n      email: this.sigUpEmailFormControl = new FormControl('',\n        [\n          Validators.required,\n          Validators.pattern(EMAIL_REGEX)\n        ]),\n      password: this.sigUpPasswordFormControl = new FormControl('',\n        [\n          Validators.required,\n          Validators.minLength(this.min),\n          Validators.maxLength(this.max),\n        ])\n    });\n  }\n\n  private _initResetPasswordFormGroupBuilder() {\n    this.resetPasswordFormGroup = new FormGroup({\n      email: this.resetPasswordEmailFormControl = new FormControl('',\n        [\n          Validators.required,\n          Validators.pattern(EMAIL_REGEX)\n        ])\n    });\n  }\n\n  private _afterSignUpMiddleware(authProvider?: AuthProvider) {\n    if (authProvider === this.authProvider.ANONYMOUS) {\n      return this.signUpAnonymously();\n    }\n    return this.signUp();\n  }\n\n}\n","import { Component, EventEmitter, forwardRef, Inject, Input, Output } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatFormFieldAppearance, MatSnackBar } from '@angular/material';\nimport { User } from 'firebase';\nimport { NgxAuthFirebaseUIConfig, NgxAuthFirebaseUIConfigToken } from '../../ngx-auth-firebase-u-i.module';\nimport { AuthProcessService } from '../../services/auth-process.service';\nimport { FirestoreSyncService } from '../../services/firestore-sync.service';\nimport { EMAIL_REGEX, PHONE_NUMBER_REGEX } from '../ngx-auth-firebaseui/auth.component';\n\n@Component({\n  selector: 'ngx-auth-firebaseui-user',\n  template: `\n    <div *ngIf=\"auth.authState| async as user; then authenticated else none\">\n\n    </div>\n\n    <ng-template #authenticated>\n      <mat-card *ngIf=\"auth.user | async as user\">\n        <!--<form [formGroup]=\"updateFormGroup\" >-->\n        <!--card header-->\n        <mat-card-header fxLayout=\"column\" fxLayoutAlign=\"center center\">\n\n          <img mat-card-avatar [src]=\"authProcess?.getUserPhotoUrl()\">\n\n          <div *ngIf=\"user.emailVerified; then emailVerified else emailNotVerified\"></div>\n          <ng-template #emailVerified>\n            <mat-icon color=\"primary\"\n                      matTooltip=\"email is verified\"\n                      matTooltipPosition=\"after\">\n              verified_user\n            </mat-icon>\n          </ng-template>\n          <ng-template #emailNotVerified>\n            <mat-icon color=\"warn\"\n                      matTooltip=\"email is not verified\"\n                      matTooltipPosition=\"after\">\n              warning\n            </mat-icon>\n          </ng-template>\n\n        </mat-card-header>\n\n        <!--card content-->\n        <mat-card-content *ngIf=\"editMode; then edit else readonly\">\n        </mat-card-content>\n\n        <ng-template #edit>\n          <form [formGroup]=\"updateFormGroup\" (submit)=\"save()\">\n\n            <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center center\">\n              <div fxLayoutAlign=\"center\">\n                <button mat-raised-button color=\"warn\" class=\"edit-button\"\n                        (click)=\"changeEditMode()\">\n                  cancel\n                </button>\n              </div>\n\n              <!--name-->\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>Name</mat-label>\n                <input matInput\n                       placeholder=\"Name\"\n                       [formControl]=\"updateNameFormControl\">\n                <mat-icon matSuffix>person</mat-icon>\n                <mat-hint align=\"end\" aria-live=\"polite\"> {{ updateNameFormControl.value?.length }} / {{ config.nameMaxLength }} </mat-hint>\n                <mat-error *ngIf=\"updateNameFormControl.hasError('required')\">\n                  Name is required\n                </mat-error>\n              </mat-form-field>\n\n              <!--email-->\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>E-mail</mat-label>\n                <input matInput\n                       placeholder=\"E-mail\"\n                       [formControl]=\"updateEmailFormControl\">\n                <mat-icon matSuffix>email</mat-icon>\n                <mat-error *ngIf=\"updateEmailFormControl.hasError('required')\">\n                  E-mail is required {{updateEmailFormControl.value}}\n                </mat-error>\n                <mat-error *ngIf=\"updateEmailFormControl.hasError('pattern')\">\n                  Please enter a valid e-mail address {{updateEmailFormControl.value}}\n                </mat-error>\n              </mat-form-field>\n\n              <!--phone number-->\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>Phone number</mat-label>\n                <input matInput\n                       type=\"number\"\n                       placeholder=\"Phone number\"\n                       [formControl]=\"updatePhoneNumberFormControl\">\n                <mat-icon matSuffix>phone</mat-icon>\n                <mat-hint align=\"end\" aria-live=\"polite\">\n                  The phone number is international. Therefore, it should start with a + sign or 00,\n                  followed by the country code, - and national number e.g: +49-12345678 or 0041-1234567890\n\n                  NOTE : the phone number must be a valid phone credential !!\n                </mat-hint>\n                <mat-error *ngIf=\"updatePhoneNumberFormControl.hasError('pattern')\">\n                  Please enter a valid phone number\n                </mat-error>\n              </mat-form-field>\n\n            </mat-card-content>\n\n            <mat-card-actions fxLayout=\"column\">\n              <button mat-button\n                      color=\"primary\"\n                      type=\"submit\">\n                Save changes\n              </button>\n            </mat-card-actions>\n          </form>\n        </ng-template>\n\n        <ng-template #readonly>\n          <div fxLayoutAlign=\"center\">\n            <button mat-raised-button color=\"primary\" class=\"edit-button\"\n                    (click)=\"changeEditMode()\">\n              edit\n            </button>\n          </div>\n\n          <!--name-->\n          <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n            <mat-label>Name</mat-label>\n            <input matInput\n                   placeholder=\"Name\"\n                   [value]=\"user.displayName\"\n                   [disabled]=\"!editMode\">\n            <mat-icon matSuffix color=\"primary\">person</mat-icon>\n          </mat-form-field>\n\n          <!--email-->\n          <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n            <mat-label>E-mail</mat-label>\n            <input matInput\n                   placeholder=\"E-mail\" [value]=\"user.email\"\n                   [disabled]=\"!editMode\">\n            <mat-icon matSuffix color=\"primary\">email</mat-icon>\n          </mat-form-field>\n\n          <!--phone number-->\n          <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n            <mat-label>Phone number</mat-label>\n            <input matInput\n                   placeholder=\"Phone number\"\n                   [value]=\"user.phoneNumber\"\n                   [disabled]=\"!editMode\">\n            <mat-icon matSuffix color=\"primary\">phone</mat-icon>\n          </mat-form-field>\n\n          <mat-card-actions fxLayout=\"column\">\n            <button *ngIf=\"canLogout\" mat-button color=\"primary\" (click)=\"signOut()\">Sign out</button>\n            <button *ngIf=\"canDeleteAccount\" mat-button color=\"warn\" (click)=\"deleteAccount()\">Delete account</button>\n          </mat-card-actions>\n\n        </ng-template>\n\n      </mat-card>\n\n    </ng-template>\n\n\n    <ng-template #none>\n      <mat-card class=\"none-card\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <mat-card-content fxLayout=\"row\" fxLayoutAlign=\"center center\">\n          <mat-icon color=\"accent\">warning</mat-icon>\n          <span>You are not logged in!</span>\n        </mat-card-content>\n      </mat-card>\n    </ng-template>\n  `,\n  styles: [`\n    .edit-button{margin:1rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.none-card{min-height:430px}.none-card span{font-size:24px;text-align:center;color:rgba(0,0,0,.54)}\n  `]\n})\nexport class UserComponent {\n\n  @Input()\n  editMode: boolean;\n\n  @Input()\n  canLogout = true;\n\n  @Input()\n  canEditAccount = true;\n\n  @Input()\n  canDeleteAccount = true;\n\n  @Input()\n  appearance: MatFormFieldAppearance;\n\n  @Output()\n  onSignOut: EventEmitter<void> = new EventEmitter();\n\n  @Output()\n  onAccountEdited: EventEmitter<void> = new EventEmitter();\n\n  @Output()\n  onAccountDeleted: EventEmitter<void> = new EventEmitter();\n\n  updateFormGroup: FormGroup;\n  updateNameFormControl: FormControl;\n  updateEmailFormControl: FormControl;\n  updatePhoneNumberFormControl: FormControl;\n  updatePasswordFormControl: FormControl;\n\n  constructor(\n    public auth: AngularFireAuth,\n    public authProcess: AuthProcessService,\n    private _fireStoreService: FirestoreSyncService,\n    private snackBar: MatSnackBar,\n    @Inject(forwardRef(() => NgxAuthFirebaseUIConfigToken)) public config: NgxAuthFirebaseUIConfig\n  ) { }\n\n  protected initUpdateFormGroup() {\n    const currentUser: User = this.auth.auth.currentUser;\n    this.updateFormGroup = new FormGroup({\n      name: this.updateNameFormControl = new FormControl(\n        { value: currentUser.displayName, disabled: this.editMode },\n        [\n          Validators.required,\n          Validators.minLength(this.config.nameMinLength),\n          Validators.maxLength(this.config.nameMaxLength)\n        ]\n      ),\n\n      email: this.updateEmailFormControl = new FormControl(\n        {value: currentUser.email, disabled: this.editMode},\n        [\n          Validators.required,\n          Validators.pattern(EMAIL_REGEX)\n        ]),\n\n      phoneNumber: this.updatePhoneNumberFormControl = new FormControl(\n        {value: currentUser.phoneNumber, disabled: this.editMode},\n        [Validators.pattern(PHONE_NUMBER_REGEX)])\n    });\n\n    this.updateFormGroup.enable();\n  }\n\n  changeEditMode() {\n    this.editMode = !this.editMode;\n\n    this.editMode ? this.initUpdateFormGroup() : this.reset();\n  }\n\n  reset() {\n    this.updateFormGroup.reset();\n    this.updateFormGroup.disable();\n    this.updateFormGroup = null;\n  }\n\n  async save() {\n    if (this.updateFormGroup.dirty) {\n      const user = this.auth.auth.currentUser;\n      // ngx-auth-firebaseui-user.updateProfile()\n      // ngx-auth-firebaseui-user.updateEmail()\n      // console.log('form = ', this.updateFormGroup);\n\n      const snackBarMsg: string[] = [];\n\n      try {\n        if (this.updateNameFormControl.dirty) {\n          await user.updateProfile({displayName: this.updateNameFormControl.value, photoURL: null});\n          snackBarMsg.push(`your name has been updated to ${user.displayName}`);\n        }\n\n        if (this.updateEmailFormControl.dirty) {\n          await user.updateEmail(this.updateEmailFormControl.value);\n          snackBarMsg.push(`your email has been updated to ${user.email}`);\n        }\n\n        if (this.updatePhoneNumberFormControl.dirty) {\n          await user.updatePhoneNumber(this.updatePhoneNumberFormControl.value);\n          console.log('phone number = ', this.updatePhoneNumberFormControl.value);\n          snackBarMsg.push(`your phone number has been updated to ${user.phoneNumber}`);\n        }\n\n        if (this.config.enableFirestoreSync) {\n          await this._fireStoreService.updateUserData(this.authProcess.parseUserInfo(user));\n        }\n\n      } catch (error) {\n        this.authProcess.showToast(error && error.message ? error.message : error);\n        console.error(error);\n      }\n\n\n      if (snackBarMsg.length > 0) {\n        this.authProcess.showToast(snackBarMsg.join('\\\\n'));\n      }\n      // this.updateFormGroup.reset();\n    }\n\n    this.editMode = false;\n  }\n\n  signOut() {\n    this.auth.auth.signOut()\n      .then(() => this.onSignOut.emit())\n      .catch(e => console.error('An error happened while signing out!', e));\n  }\n\n  /**\n   * Delete the account of the current firebase ngx-auth-firebaseui-user\n   *\n   * On Success, emit the <onAccountDeleted> event and toast a msg!#\n   * Otherwise, log the and toast and error msg!\n   *\n   */\n  async deleteAccount() {\n    try {\n      const user = this.auth.auth.currentUser;\n\n      // await this.authProcess.deleteAccount();\n      await this.auth.auth.currentUser.delete();\n      // if (this.config.enableFirestoreSync) {\n      await this._fireStoreService.deleteUserData(user.uid);\n      // }\n      this.onAccountDeleted.emit();\n      this.editMode = false;\n      console.log('Your account has been successfully deleted!');\n      this.authProcess.showToast('Your account has been successfully deleted!');\n    } catch (error) {\n      console.log('Error while delete user account', error);\n      this.authProcess.showToast(`Error occurred while deleting your account: ${error.message}`);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthProcessService } from './../../services/auth-process.service';\n\ninterface VerifyEmailContext {\n  email: string;\n  goBackURL: string;\n  verifyEmailTitleText: string;\n  verifyEmailConfirmationText: string;\n  verifyEmailGoBackText: string;\n  messageOnEmailConfirmationSuccess: string;\n  messageOnError: string;\n}\n\nconst defaultTranslations = {\n  verifyEmailTitleText: 'Confirm your e-mail address!',\n  verifyEmailConfirmationText: 'A confirmation e-mail has been sent. Check your inbox and click on the link \"Confirm my e-mail\" to confirm your e-mail address.',\n  verifyEmailGoBackText: 'Go back',\n  sendNewVerificationEmailText: 'Send new confirmation e-mail',\n  signOutText: 'Sign out',\n  messageOnEmailConfirmationSuccess: 'A new confirmation e-mail has been sent. Please check your inbox.',\n};\n\n@Component({\n  selector: 'ngx-auth-firebaseui-email-confirmation',\n  template: `\n    <ng-container *ngTemplateOutlet=\"verifyEmailTemplate; context: verifyEmailContext\"></ng-container>\n    <ng-template #defaultVerifyEmail let-email=\"email\" let-goBackURL=\"goBackURL\" let-verifyEmailTitleText=\"verifyEmailTitleText\" let-verifyEmailConfirmationText=\"verifyEmailConfirmationText\" let-verifyEmailGoBackText=\"verifyEmailGoBackText\" let-signOutText=\"signOutText\" let-sendNewVerificationEmailText=\"sendNewVerificationEmailText\">\n      <mat-card class=\"verify-email\">\n        <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center center\">\n          <mat-icon>email</mat-icon>\n          <p class=\"title\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n              <span class=\"mat-subheading-2\">{{ verifyEmailTitleText }}</span>\n              <span class=\"mat-body-2\">{{ email }}</span>\n            </p>\n            <p class=\"subtitle\">{{ verifyEmailConfirmationText }}</p>\n            <mat-progress-bar *ngIf=\"isLoading\" mode=\"indeterminate\"></mat-progress-bar>\n        </mat-card-content>\n        <mat-card-actions fxLayout=\"column\" fxLayoutAlign=\"center center\">\n          <button *ngIf=\"goBackURL\" mat-stroked-button (click)=\"continue()\" class=\"go-back-button action-button\">\n            {{ verifyEmailGoBackText }}\n          </button>\n          <button mat-stroked-button (click)=\"sendNewVerificationEmail()\" class=\"send-new-mail-button action-button\">{{ sendNewVerificationEmailText }}</button>\n          <button mat-stroked-button color=\"warn\" (click)=\"this.signOut.emit()\" class=\"sign-out-button action-button\">{{ signOutText }}</button>\n        </mat-card-actions>\n      </mat-card>\n    </ng-template>\n  `,\n  styles: [`\n    .material-icons{font-size:4rem}.verify-email{width:360px}.verify-email .mat-icon{height:4rem;width:4rem;color:#444}.verify-email .title{margin-top:16px}.verify-email .title .mat-subheading-2{margin-bottom:0}.verify-email .subtitle{margin:16px auto;text-align:justify}.verify-email p{display:block;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0}.verify-email mat-card-actions{text-align:center;margin-top:1rem}.verify-email mat-card-actions .action-button{width:100%}.verify-email mat-card-actions .action-button+.action-button{margin-top:1rem}\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EmailConfirmationComponent implements OnInit, OnChanges {\n\n  @Input() email: string;\n  @Input() goBackURL: string;\n  // i18n translations to use in default template\n  @Input() verifyEmailTitleText: string;\n  @Input() verifyEmailConfirmationText: string;\n  @Input() verifyEmailGoBackText: string;\n  @Input() sendNewVerificationEmailText: string;\n  @Input() signOutText: string;\n  @Input() messageOnEmailConfirmationSuccess: string;\n\n  // Template to use in place of default template\n  @Input() template: TemplateRef<any>;\n\n  @Output() signOut = new EventEmitter();\n\n  // Final template\n  verifyEmailTemplate: TemplateRef<any>;\n  // Context hash to use for verifyEmailTemplate.\n  verifyEmailContext: VerifyEmailContext;\n\n  isLoading: boolean;\n\n  @ViewChild('defaultVerifyEmail', {static: true}) defaultTemplate: TemplateRef<any>;\n\n  constructor(public authProcess: AuthProcessService, private _router: Router, private _cdr: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.verifyEmailTemplate && changes.verifyEmailTemplate.currentValue == null) {\n      this.verifyEmailTemplate = this.defaultTemplate;\n      console.log('ngOnChanges - defaultTemplate:', this.verifyEmailTemplate);\n    }\n    this.verifyEmailContext = this.createTemplateContext();\n  }\n\n  ngOnInit(): void {\n    if (!this.verifyEmailTemplate) {\n      console.log('ngOnInit - defaultTemplate');\n      this.verifyEmailTemplate = this.defaultTemplate;\n    }\n    this.verifyEmailContext = this.createTemplateContext();\n    console.log('verifyEmailTemplate:', this.verifyEmailTemplate);\n    console.log('verifyEmailContext:', this.verifyEmailContext);\n  }\n\n  async continue() {\n    try {\n      await this.authProcess.reloadUserInfo();\n      await this._router.navigate([this.goBackURL]);\n    } catch (error) {\n      this.authProcess.notifyError(error);\n    }\n  }\n\n  async sendNewVerificationEmail() {\n    try {\n      this.isLoading = true;\n      this._cdr.markForCheck();\n      await this.authProcess.sendNewVerificationEmail();\n      this.authProcess.showToast(this.verifyEmailContext.messageOnEmailConfirmationSuccess);\n    } catch (error) {\n      this.authProcess.notifyError(error);\n    } finally {\n      this.isLoading = false;\n      this._cdr.markForCheck();\n    }\n  }\n\n  private createTemplateContext(): any {\n    const context = {\n      email: this.email,\n      goBackURL: this.goBackURL,\n      verifyEmailTitleText: this.verifyEmailTitleText || defaultTranslations.verifyEmailTitleText,\n      verifyEmailConfirmationText: this.verifyEmailConfirmationText || defaultTranslations.verifyEmailConfirmationText,\n      verifyEmailGoBackText: this.verifyEmailGoBackText || defaultTranslations.verifyEmailGoBackText,\n      sendNewVerificationEmailText: this.sendNewVerificationEmailText || defaultTranslations.sendNewVerificationEmailText,\n      signOutText: this.signOutText || defaultTranslations.signOutText,\n      messageOnEmailConfirmationSuccess: this.messageOnEmailConfirmationSuccess || defaultTranslations.messageOnEmailConfirmationSuccess\n    };\n    return context;\n  }\n}\n","// import * as firebase from 'firebase';\n\nexport interface NgxAuthFirebaseUIConfig {\n  // authNextURL?: string, // popup or redirect\n  // tosUrl?: string, // term of services url\n  // ppUrl?: string, // privacy policy url\n  // authProviders?: Array<AuthProvider>,\n  // languageCode?: string, // todo: 28.3.18\n  authGuardFallbackURL?: string;\n  authGuardLoggedInURL?: string;\n  enableFirestoreSync?: boolean;\n\n  // Toasts\n  toastMessageOnAuthSuccess?: boolean;\n  toastMessageOnAuthError?: boolean;\n\n  // Password length min/max in forms independently of each componenet min/max.\n  // `min/max` input parameters in components should be within this range.\n  passwordMaxLength?: number;\n  passwordMinLength?: number;\n\n  // Same as password but for the name\n  nameMaxLength?: number;\n  nameMinLength?: number;\n\n  // If set, sign-in/up form is not available until email has been verified.\n  // Plus protected routes are still protected even though user is connected.\n  guardProtectedRoutesUntilEmailIsVerified?: boolean;\n}\n\nexport const defaultAuthFirebaseUIConfig: NgxAuthFirebaseUIConfig = {\n  // authMethod: 'redirect',\n  // authProviders: [new GoogleAuthProvider(), new FacebookAuthProvider(), new TwitterAuthProvider(), new GithubAuthProvider()],\n  enableFirestoreSync: true,\n  toastMessageOnAuthSuccess: true,\n  toastMessageOnAuthError: true,\n  authGuardFallbackURL: '/',\n  authGuardLoggedInURL: '/',\n\n  // Password length min/max in forms independently of each componenet min/max.\n  // `min/max` input parameters in components should be within this range.\n  passwordMaxLength: 60,\n  passwordMinLength: 8,\n\n  // Same as password but for the name\n  nameMaxLength: 50,\n  nameMinLength: 2,\n\n  // If set, sign-in/up form is not available until email has been verified.\n  // Plus protected routes are still protected even though user is connected.\n  guardProtectedRoutesUntilEmailIsVerified: true\n};\n\n// Merge default config with user provided config.\nexport function ngxAuthFirebaseUIConfigFactory(userProvidedConfig: NgxAuthFirebaseUIConfig): NgxAuthFirebaseUIConfig {\n  return Object.assign({}, defaultAuthFirebaseUIConfig, userProvidedConfig);\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport {User} from 'firebase';\nimport {Observable} from 'rxjs';\nimport {MatDialog} from '@angular/material';\nimport {UserComponent} from '../../..';\n\nexport interface LinkMenuItem {\n  text: string;\n  icon?: string;\n  callback?: Function;\n}\n\n@Component({\n  selector: 'ngx-auth-firebaseui-avatar',\n  template: `\n    <button *ngIf=\"user\"\n            mat-mini-fab\n            [matMenuTriggerFor]=\"posXMenu\"\n            aria-label=\"Open x-positioned menu\"\n            [style.background-image]=\"'url(' + user?.photoURL + ')'\"\n            style=\"background-size: cover\"\n            [matTooltip]=\"user?.displayName\">\n      <span *ngIf=\"!user?.photoURL\">{{displayNameInitials || ''}}</span>\n    </button>\n\n    <mat-menu xPosition=\"before\" #posXMenu=\"matMenu\" class=\"before\">\n      <div fxLayout=\"row\" fxLayout.xs=\"column\" style=\"padding-left: 10px; padding-right: 10px\">\n        <button mat-fab\n                [style.background-image]=\"'url(' + user?.photoURL + ')'\"\n                style=\"background-size: cover\">\n          <span *ngIf=\"!user?.photoURL\">{{displayNameInitials || ''}}</span>\n        </button>\n        <div fxLayout=\"column\" style=\"padding-left: 10px; padding-right: 10px\">\n          <strong mat-card-title>{{user?.displayName}}</strong>\n          <em mat-card-subtitle style=\"font-style: italic\">{{user?.email}}</em>\n        </div>\n      </div>\n\n      <div fxLayout=\"column\" fxFlex=\"100\">\n        <div class=\"links-menu\" *ngFor=\"let menuItem of links\">\n          <button mat-menu-item (click)=\"menuItem?.callback()\">\n            <mat-icon>{{menuItem?.icon}}</mat-icon>{{menuItem?.text}}</button>\n        </div>\n        <button mat-raised-button fxLayoutAlign=\"center\" color=\"primary\" (click)=\"openProfile()\">Profile\n        </button>\n        <button *ngIf=\"canLogout\" mat-raised-button fxLayoutAlign=\"center\" color=\"warn\" (click)=\"signOut()\">Sign Out\n        </button>\n      </div>\n    </mat-menu>\n  `,\n  styles: [`\n    .mat-raised-button{margin:.2rem 1rem}.links-menu{text-align:center}\n  `]\n})\nexport class NgxAuthFirebaseuiAvatarComponent implements OnInit {\n\n  @Input()\n  canLogout = true;\n\n  @Input()\n  links: LinkMenuItem[];\n\n  @Output()\n  onSignOut: EventEmitter<void> = new EventEmitter();\n\n  user: User;\n  user$: Observable<User | null>;\n  displayNameInitials: string | null;\n\n  constructor(public afa: AngularFireAuth,\n              public dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n    this.user$ = this.afa.user;\n    this.user$.subscribe((user: User) => {\n      this.user = user;\n      this.displayNameInitials = user ? this.getDisplayNameInitials(user.displayName) : null;\n    });\n  }\n\n  getDisplayNameInitials(displayName: string | null): string | null {\n    if (!displayName) {\n      return null;\n    }\n    const initialsRegExp: RegExpMatchArray = displayName.match(/\\b\\w/g) || [];\n    const initials = ((initialsRegExp.shift() || '') + (initialsRegExp.pop() || '')).toUpperCase();\n    return initials;\n  }\n\n  openProfile() {\n    this.dialog.open(UserComponent);\n  }\n\n  async signOut() {\n    try {\n      await this.afa.auth.signOut();\n      // Sign-out successful.\n      this.onSignOut.emit();\n    } catch (e) {\n      // An error happened.\n      console.error('An error happened while signing out!', e);\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthProcessService, NgxAuthFirebaseUIConfig, NgxAuthFirebaseUIConfigToken } from '../ngx-auth-firebase-u-i.module';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggedInGuard implements CanActivate {\n  constructor(\n    @Inject(NgxAuthFirebaseUIConfigToken)\n    private config: NgxAuthFirebaseUIConfig,\n    private router: Router,\n    private authProcess: AuthProcessService\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.authProcess.afa.user.pipe(\n      map(user => {\n        if (user) {\n          if (this.config.guardProtectedRoutesUntilEmailIsVerified && !user.emailVerified && !user.isAnonymous) {\n            if (this.config.authGuardFallbackURL) {\n              this.router.navigate([`${this.config.authGuardFallbackURL}`], { queryParams: { redirectUrl: state.url }});\n            }\n            return false;\n          } else {\n            return true;\n          }\n        } else {\n          if (this.config.authGuardFallbackURL) {\n            this.router.navigate([`/${this.config.authGuardFallbackURL}`], { queryParams: { redirectUrl: state.url }});\n          }\n          return false;\n        }\n      })\n    );\n  }\n}\n","// @angular/*\nimport {CommonModule} from '@angular/common';\nimport {InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {HttpClientModule} from '@angular/common/http';\nimport {RouterModule} from '@angular/router';\nimport {FlexLayoutModule} from '@angular/flex-layout';\n// @angular/fire\nimport {FirebaseAppConfig, FirebaseNameOrConfigToken, FirebaseOptionsToken} from '@angular/fire';\nimport {AngularFireAuthModule} from '@angular/fire/auth';\nimport {AngularFirestoreModule} from '@angular/fire/firestore';\n// @angular/material\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatIconModule, MatIconRegistry} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatTooltipModule} from '@angular/material/tooltip';\n\nimport {MatPasswordStrengthModule} from '@angular-material-extensions/password-strength';\n\n\nimport {NgxAuthFirebaseuiLoginComponent} from './components/ngx-auth-firebaseui-login/ngx-auth-firebaseui-login.component';\nimport {NgxAuthFirebaseuiRegisterComponent} from './components/ngx-auth-firebaseui-register/ngx-auth-firebaseui-register.component';\n\n\nimport {DomSanitizer} from '@angular/platform-browser';\n// ngx-auth-firebaseui\n// components\nimport {AuthComponent} from './components/ngx-auth-firebaseui/auth.component';\nimport {UserComponent} from './components/ngx-auth-firebaseui-user/user.component';\nimport {AuthProvidersComponent} from './components/providers/auth.providers.component';\nimport {EmailConfirmationComponent} from './components/email-confirmation/email-confirmation.component';\nimport {NgxAuthFirebaseUIConfig, ngxAuthFirebaseUIConfigFactory} from './interfaces/config.interface';\nimport {NgxAuthFirebaseuiAvatarComponent} from './components/ngx-auth-firebaseui-avatar/ngx-auth-firebaseui-avatar.component';\nimport {LegalityDialogComponent} from './components/legality-dialog/legality-dialog.component';\n// guards\nimport {LoggedInGuard} from './guards/logged-in.guard';\n// interfaces\n\n// services\nimport {FirestoreSyncService} from './services/firestore-sync.service';\nimport {AuthProcessService} from './services/auth-process.service';\n// ###################################################################################################\n// Export module's public API\n// components\nexport {LegalityDialogComponent} from './components/legality-dialog/legality-dialog.component';\nexport {LinkMenuItem, NgxAuthFirebaseuiAvatarComponent} from './components/ngx-auth-firebaseui-avatar/ngx-auth-firebaseui-avatar.component';\nexport {UserComponent} from './components/ngx-auth-firebaseui-user/user.component';\nexport {AuthComponent} from './components/ngx-auth-firebaseui/auth.component';\nexport {AuthProvidersComponent, Layout, Theme} from './components/providers/auth.providers.component';\nexport {NgxAuthFirebaseuiLoginComponent} from './components/ngx-auth-firebaseui-login/ngx-auth-firebaseui-login.component';\nexport {NgxAuthFirebaseuiRegisterComponent} from './components/ngx-auth-firebaseui-register/ngx-auth-firebaseui-register.component';\n\n\n// guards\nexport {LoggedInGuard} from './guards/logged-in.guard';\n// interfaces\nexport {NgxAuthFirebaseUIConfig} from './interfaces/config.interface';\n// services\nexport {AuthProcessService, AuthProvider} from './services/auth-process.service';\nexport {FirestoreSyncService} from './services/firestore-sync.service';\n\n\n// This token is the official token containing the final configuration; ie. the merge between default and user provided configurations\nexport const NgxAuthFirebaseUIConfigToken = new InjectionToken<NgxAuthFirebaseUIConfig>('NgxAuthFirebaseUIConfigToken');\n// This is an intermediate token containing only user-provided configuration\nexport const UserProvidedConfigToken = new InjectionToken<NgxAuthFirebaseUIConfig>('UserProvidedConfigToken');\n\n@NgModule({\n  imports: [\n    CommonModule,\n    // HTTP\n    RouterModule,\n    HttpClientModule,\n    // FLEX_LAYOUT\n    FlexLayoutModule,\n    // FORMS\n    FormsModule,\n    ReactiveFormsModule,\n    // MATERIAL2\n    MatTabsModule,\n    MatCardModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatDividerModule,\n    MatChipsModule,\n    MatTooltipModule,\n    MatDialogModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatDialogModule,\n    MatMenuModule,\n    // ANGULAR MATERIAL EXTENSIONS\n    MatPasswordStrengthModule,\n    // ANGULARFIRE2\n    AngularFireAuthModule,\n    AngularFirestoreModule,\n  ],\n  exports: [\n    AuthComponent,\n    UserComponent,\n    NgxAuthFirebaseuiAvatarComponent,\n    AuthProvidersComponent,\n    EmailConfirmationComponent,\n    // LoggedInGuard,\n    AngularFireAuthModule,\n    AngularFirestoreModule,\n    NgxAuthFirebaseuiLoginComponent,\n    NgxAuthFirebaseuiRegisterComponent\n  ],\n  declarations: [\n    AuthComponent,\n    UserComponent,\n    NgxAuthFirebaseuiAvatarComponent,\n    AuthProvidersComponent,\n    EmailConfirmationComponent,\n    LegalityDialogComponent,\n    NgxAuthFirebaseuiLoginComponent,\n    NgxAuthFirebaseuiRegisterComponent\n  ],\n  entryComponents: [\n    UserComponent,\n    LegalityDialogComponent\n  ]\n})\nexport class NgxAuthFirebaseUIModule {\n  static forRoot(\n    configFactory: FirebaseAppConfig,\n    appNameFactory: () => string | undefined = () => undefined,\n    config: NgxAuthFirebaseUIConfig = {}\n  ): ModuleWithProviders {\n    return {\n      ngModule: NgxAuthFirebaseUIModule,\n      providers:\n        [\n          {\n            provide: FirebaseOptionsToken,\n            useValue: configFactory\n          },\n          {\n            provide: FirebaseNameOrConfigToken,\n            useFactory: appNameFactory\n          },\n          {provide: UserProvidedConfigToken, useValue: config},\n          {\n            provide: NgxAuthFirebaseUIConfigToken,\n            useFactory: ngxAuthFirebaseUIConfigFactory,\n            deps: [UserProvidedConfigToken]\n          },\n          AuthProcessService,\n          FirestoreSyncService,\n          LoggedInGuard\n        ]\n    };\n  }\n\n  constructor(private _iconRegistry: MatIconRegistry, private _sanitizer: DomSanitizer, _auth: AuthProcessService) {\n    _auth.listenToUserEvents();\n    this.registerProviderIcons();\n  }\n\n  registerProviderIcons() {\n    this._iconRegistry\n      .addSvgIcon('google', this._sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/google.svg'))\n      .addSvgIcon('google-colored', this._sanitizer.bypassSecurityTrustResourceUrl('/assets/google.svg'))\n      .addSvgIcon('facebook', this._sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/facebook.svg'))\n      .addSvgIcon('twitter', this._sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/twitter.svg'))\n      .addSvgIcon('github', this._sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/github-circle.svg'))\n      .addSvgIcon('microsoft', this._sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/microsoft.svg'))\n      .addSvgIcon('yahoo', this._sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/yahoo.svg'))\n      .addSvgIcon('phone', this._sanitizer.bypassSecurityTrustResourceUrl('/assets/phone.svg'));\n  }\n}\n"],"names":["FirestoreSyncService","Injectable","AngularFirestore","firebase","EventEmitter","AuthProcessService","tap","isFunction","AngularFireAuth","Inject","forwardRef","MatSnackBar","MatSnackBarConfig","MAT_SNACK_BAR_DEFAULT_OPTIONS","animation","style","animate","trigger","transition","useAnimation","state","query","stagger","animateChild","isPlatformBrowser","Validators","Component","ViewEncapsulation","PLATFORM_ID","FormBuilder","Input","Output","Subject","takeUntil","MatDialogRef","MAT_DIALOG_DATA","FormGroup","FormControl","ChangeDetectionStrategy","MatDialog","ActivatedRoute","ChangeDetectorRef","ViewChild","MatTabGroup","MatPasswordStrengthComponent","Router","LoggedInGuard","map","InjectionToken","FirebaseOptionsToken","FirebaseNameOrConfigToken","NgModule","CommonModule","RouterModule","HttpClientModule","FlexLayoutModule","FormsModule","ReactiveFormsModule","MatTabsModule","MatCardModule","MatInputModule","MatButtonModule","MatIconModule","MatSnackBarModule","MatDividerModule","MatChipsModule","MatTooltipModule","MatDialogModule","MatCheckboxModule","MatProgressSpinnerModule","MatProgressBarModule","MatMenuModule","MatPasswordStrengthModule","AngularFireAuthModule","AngularFirestoreModule","MatIconRegistry","DomSanitizer"],"mappings":";;;;;;;;;;;;QACE,MAAO,SAAS;QAChB,OAAQ,eAAe;QACvB,MAAO,cAAc;QACrB,KAAM,aAAa;QACnB,QAAS,gBAAgB;;;;;;;ACL3B;AAIA,QAAa,WAAW,GAAG;QACzB,KAAK,EAAE,OAAO;KACf;AAED;QAKE,gCAAmB,GAAqB;YAArB,QAAG,GAAH,GAAG,CAAkB;;SAEvC;;;;;;;;;;;QAMMA,mDAAkB;;;;;;;;QAAzB,UAA0B,GAAW;YACnC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAI,WAAW,CAAC,KAAK,SAAI,GAAK,CAAC,CAAC;SACpD;;;;;QAEMA,+CAAc;;;;QAArB,UAAsB,GAAW;;gBACzB,OAAO,GAAuC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC;YAChF,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;SACzB;;;;;QAGMA,+CAAc;;;;QAArB,UAAsB,IAAc;;;gBAE5B,OAAO,GAAuC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC;;gBAC/E,IAAI,GAAa;gBACrB,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,UAAU,EAAE,IAAI,CAAC,UAAU;aAC5B;YACD,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;SACzC;;oBAnCFC,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;oBATOC,qBAAgB;;;qCADxB;KAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWA,QAAa,oBAAoB,GAAG,IAAIC,YAAQ,CAAC,IAAI,CAAC,oBAAoB,EAAE;;AAC5E,QAAa,kBAAkB,GAAG,IAAIA,YAAQ,CAAC,IAAI,CAAC,kBAAkB,EAAE;;AACxE,QAAa,mBAAmB,GAAG,IAAIA,YAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE;;AAC1E,QAAa,kBAAkB,GAAG,IAAIA,YAAQ,CAAC,IAAI,CAAC,kBAAkB,EAAE;;AACxE,QAAa,qBAAqB,GAAG,IAAIA,YAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC;;AACrF,QAAa,iBAAiB,GAAG,IAAIA,YAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC;;;QAG3E,KAAM,KAAK;QACX,WAAY,WAAW;QACvB,kBAAmB,UAAU;QAC7B,QAAS,QAAQ;QACjB,UAAW,UAAU;QACrB,SAAU,SAAS;QACnB,QAAS,QAAQ;QACjB,WAAY,WAAW;QACvB,OAAQ,OAAO;QACf,aAAc,aAAa;;;QA0B3B,8BACS,GAAoB,EACoC,MAA+B,EACtF,SAAsB,EACtB,iBAAuC,EACA,kBAAqC;YAJ7E,QAAG,GAAH,GAAG,CAAiB;YACoC,WAAM,GAAN,MAAM,CAAyB;YACtF,cAAS,GAAT,SAAS,CAAa;YACtB,sBAAiB,GAAjB,iBAAiB,CAAsB;YACA,uBAAkB,GAAlB,kBAAkB,CAAmB;YArBtF,qBAAgB,GAAsB,IAAIC,eAAY,EAAO,CAAC;YAC9D,mBAAc,GAAsB,IAAIA,eAAY,EAAO,CAAC;SAqBxD;;;;QAEJC,iDAAkB;;;QAAlB;YAAA,iBAMC;YALC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAC7BC,aAAG;;;;YAAC,UAAA,IAAI;gBACN,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aAClB,EAAC,CACH,CAAC;SACH;;;;;;;;;;;;;QAQMD,4CAAa;;;;;;QAApB,UAAqB,KAAa;YAAlC,iBAIC;YAHC,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC;iBAC/C,IAAI;;;YAAC,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,GAAA,EAAC;iBACpD,KAAK;;;;YAAC,UAAC,KAAK,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAA,EAAC,CAAC;SAC9C;;;;;;;;;;;;;;;;;;;QAWYA,yCAAU;;;;;;;;;QAAvB,UAAwB,QAAsB,EAAE,WAA0B;;;;;;;4BAElE,YAAY,SAAsB;4BAE9B,KAAA,QAAQ,CAAA;;qCACT,YAAY,CAAC,SAAS,EAAtB,wBAAsB;qCAItB,YAAY,CAAC,gBAAgB,EAA7B,wBAA6B;qCAI7B,YAAY,CAAC,MAAM,EAAnB,wBAAmB;qCAInB,YAAY,CAAC,QAAQ,EAArB,wBAAqB;qCAIrB,YAAY,CAAC,OAAO,EAApB,wBAAoB;qCAIpB,YAAY,CAAC,MAAM,EAAnB,yBAAmB;qCAInB,YAAY,CAAC,SAAS,EAAtB,yBAAsB;qCAItB,YAAY,CAAC,KAAK,EAAlB,yBAAkB;qCAIlB,YAAY,CAAC,WAAW,EAAxB,yBAAwB;;;gCA/BZ,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAA;;4BAAtD,YAAY,sBAAG,SAAuC,EAAkB,CAAC;4BACzE,yBAAM;gCAGS,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,0BAA0B,CAAC,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,QAAQ,CAAC,EAAA;;4BAAtG,YAAY,sBAAG,SAAuF,EAAkB,CAAC;4BACzH,yBAAM;gCAGS,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,EAAA;;4BAAtE,YAAY,sBAAG,SAAuD,EAAkB,CAAC;4BACzF,yBAAM;gCAGS,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,EAAA;;4BAAxE,YAAY,sBAAG,SAAyD,EAAkB,CAAC;4BAC3F,yBAAM;gCAGS,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,EAAA;;4BAAvE,YAAY,sBAAG,SAAwD,EAAkB,CAAC;4BAC1F,yBAAM;iCAGS,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,EAAA;;4BAAtE,YAAY,sBAAG,SAAuD,EAAkB,CAAC;4BACzF,yBAAM;iCAGS,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,EAAA;;4BAAzE,YAAY,sBAAG,SAA0D,EAAkB,CAAC;4BAC5F,yBAAM;iCAGS,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;4BAArE,YAAY,sBAAG,SAAsD,EAAkB,CAAC;4BACxF,yBAAM;;;wBAIN,yBAAM;iCAGN,MAAM,IAAI,KAAK,CAAI,YAAY,CAAC,QAAQ,CAAC,uCAAoC,CAAC,CAAC;iCAEnF,qBAAM,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAA;;4BAAtC,SAAsC,CAAC;;;;4BAEvC,IAAI,CAAC,WAAW,CAAC,KAAG,CAAC,CAAC;;;;;;SAEzB;;;;;;;;;;;;;;;;;QAUYA,qCAAM;;;;;;;;QAAnB,UAAoB,WAAmB,EAAE,WAAyB;;;;;;;4BAEvB,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,8BAA8B,CAAC,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,QAAQ,CAAC,EAAA;;4BAA5H,cAAc,GAAmB,SAA2F;4BAC5H,IAAI,GAAG,cAAc,CAAC,IAAI;4BAChC,qBAAM,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAA;;4BAApD,SAAoD,CAAC;iCAEjD,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAA/B,wBAA+B;4BACjC,qBAAM,IAAI,CAAC,iBAAiB;qCACzB,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC;qCAC5B,GAAG,oBAAC;oCACH,GAAG,EAAE,IAAI,CAAC,GAAG;oCACb,WAAW,EAAE,WAAW;oCACxB,KAAK,EAAE,IAAI,CAAC,KAAK;oCACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;iCACxB,GAAS,EAAA;;4BAPZ,SAOY,CAAC;;gCAGf,qBAAM,IAAI,CAAC,qBAAqB,EAAE,EAAA;;4BAAlC,SAAkC,CAAC;;4BAGnC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;4BAClC,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,KAAK,CAAC;4BAExC,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,EAAA;;4BAAxC,SAAwC,CAAC;;;;4BAEzC,IAAI,CAAC,WAAW,CAAC,KAAG,CAAC,CAAC;;;;;;SAEzB;;;;QAEKA,uDAAwB;;;QAA9B;;;oBACE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;wBACd,sBAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC,EAAC;qBACvD;oBACD,sBAAO,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,EAAC;;;SAC1C;;;;QAEKA,sCAAO;;;QAAb;;;;;;;4BAEI,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,EAAA;;4BAA7B,SAA6B,CAAC;;;;4BAE9B,IAAI,CAAC,WAAW,CAAC,OAAK,CAAC,CAAC;;;;;;SAE3B;;;;;;;;;;;;;;;;;QAUMA,4CAAa;;;;;;;;QAApB,UAAqB,IAAY,EAAE,QAAgB;YACjD,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,EAAC,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;SACzF;;;;QAEMA,4CAAa;;;QAApB;YACE,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;SAC3C;;;;;QAEMA,4CAAa;;;;QAApB,UAAqB,IAAU;YAC7B,OAAO;gBACL,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,IAAI;aAClF,CAAC;SACH;;;;QAEMA,8CAAe;;;QAAtB;;gBAEQ,IAAI,GAAyB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW;YAE5D,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO;aACR;iBAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACxB,OAAO,IAAI,CAAC,QAAQ,CAAC;aACtB;iBAAM,IAAI,IAAI,CAAC,aAAa,EAAE;gBAC7B,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aAC1C;iBAAM,IAAI,IAAI,CAAC,WAAW,EAAE;gBAC3B,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;aACxC;iBAAM;gBACL,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aACzC;SACF;;;;;QAEMA,2CAAY;;;;QAAnB,UAAoB,KAAa;YAC/B,OAAO,iBAAe,KAAK,SAAM,CAAC;SACnC;;;;QAEMA,oDAAqB;;;QAA5B;;SAEC;;;;;QAEKA,4CAAa;;;;QAAnB,UAAoB,cAA8B;;;;;;4BAChD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;iCAC5C,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAA/B,wBAA+B;;;;4BAE/B,qBAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAA;;4BAApF,SAAoF,CAAC;;;;4BAErF,OAAO,CAAC,KAAK,CAAC,6DAA2D,GAAG,CAAC,CAAC;;;4BAGlF,IAAI,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE;gCACnC,eAAe,GAAG,YAAS,cAAc,CAAC,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC,IAAI,CAAC,WAAW,GAAG,EAAE,OAAG;gCAC1G,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,oBAAoB,IAAI,eAAe,CAAC,CAAC;6BAC9D;;;;;SACF;;;;;QAEDA,0CAAW;;;;QAAX,UAAY,KAAU;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACxB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACtB;;;;;;QAGDA,6CAAc;;;;;QAAd;YACE,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;SAC3B;;;;;;;;;QAIDA,oDAAqB;;;;;;;QAArB,UAAsB,KAAU;;gBAC1B,OAAe;;gBACb,eAAe,GAAG,kDAAkD;YAC1E,IAAIE,iBAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE;gBACvC,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;aAC1C;iBAAM;gBACL,OAAO,GAAG,IAAI,CAAC,kBAAkB,IAAI,eAAe,CAAC;aACtD;YACD,OAAO,OAAO,CAAC;SAChB;;;;;;;;;;;QAKDF,wCAAS;;;;;;;;QAAT,UAAU,OAAe;YACvB,IAAI,OAAO,EAAE;gBACX,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;aAC9E;SACF;;;;;QAEDA,6CAAc;;;;QAAd,UAAe,KAAU;YACvB,IAAI,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE;gBACvC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC;aACnD;SACF;;;;;QAEDA,0CAAW;;;;QAAX,UAAY,KAAU;YACpB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;SAC5B;;oBA3QFJ,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;oBA3CQO,oBAAe;oDA+DnBC,SAAM,SAACC,aAAU;;;4BAAC,cAAM,OAAA,4BAA4B,GAAA,EAAC;oBA9DjDC,oBAAW;oBAWX,oBAAoB;oBAXPC,0BAAiB,uBAiElCH,SAAM,SAACI,sCAA6B;;;mCAnEzC;KA0CA;;;;;;AC1CA;QAEM,eAAe,GAAGC,oBAAS,CAC/B;QACEC,gBAAK,CAAC;YACJ,OAAO,EAAE,aAAa;YACtB,SAAS,EAAE,mDAAmD;SAC/D,CAAC;QACFC,kBAAO,CAAC,uDAAuD,EAAED,gBAAK,CAAC,GAAG,CAAC,CAAC;KAC7E,EACD;QACE,MAAM,EAAE;YACN,QAAQ,EAAE,OAAO;YACjB,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,GAAG;YACZ,KAAK,EAAE,GAAG;YACV,CAAC,EAAE,GAAG;YACN,CAAC,EAAE,GAAG;YACN,CAAC,EAAE,GAAG;SACP;KACF,CACF;;AAED,QAAa,2BAA2B,GAAG;QACzCE,kBAAO,CAAC,SAAS,EAAE,CAACC,qBAAU,CAAC,WAAW,EAAE,CAACC,uBAAY,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;QAE9EF,kBAAO,CAAC,gBAAgB,EAAE;YACxBG,gBAAK,CAAC,IAAI,EAAEL,gBAAK,CAAC,GAAG,CAAC,CAAC;YACvBK,gBAAK,CAAC,KAAK,EAAEL,gBAAK,CAAC,GAAG,CAAC,CAAC;YACxBK,gBAAK,CAAC,KAAK,EAAEL,gBAAK,CAAC,GAAG,CAAC,CAAC;YAExBG,qBAAU,CAAC,YAAY,EAAEG,gBAAK,CAAC,IAAI,EAAE,CAACC,kBAAO,CAAC,MAAM,EAAE,CAACC,uBAAY,EAAE,CAAC,CAAC,CAAC,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC5FL,qBAAU,CAAC,aAAa,EAAEG,gBAAK,CAAC,IAAI,EAAE,CAACC,kBAAO,CAAC,OAAO,EAAE,CAACC,uBAAY,EAAE,CAAC,CAAC,CAAC,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC9FL,qBAAU,CAAC,aAAa,EAAEG,gBAAK,CAAC,IAAI,EAAE,CAACC,kBAAO,CAAC,OAAO,EAAE,CAACC,uBAAY,EAAE,CAAC,CAAC,CAAC,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;SAC/F,CAAC;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCqHC,yCAC+B,UAAkB,EACxC,WAA+B,EAC9B,YAAyB;YAFJ,eAAU,GAAV,UAAU,CAAQ;YACxC,gBAAW,GAAX,WAAW,CAAoB;YAC9B,iBAAY,GAAZ,YAAY,CAAa;YAvC1B,cAAS,GAAsB,YAAY,CAAC,GAAG,CAAC;YAEhD,wBAAmB,GAAG,IAAI,CAAC;YAC3B,yBAAoB,GAAG,IAAI,CAAC;;YAK5B,cAAS,GAAG,uBAAuB,CAAC;YACpC,mBAAc,GAAG,aAAa,CAAC;YAC/B,oBAAe,GAAG,OAAO,CAAC;YAC1B,gBAAW,GAAG,IAAI,CAAC;YACnB,uBAAkB,GAAG,kBAAkB,CAAC;YACxC,0BAAqB,GAAG,yBAAyB,CAAC;YAClD,4BAAuB,GAAG,mBAAmB,CAAC;;YAG9C,cAAS,GAAG,OAAO,CAAC;YACpB,2BAAsB,GAAG,mBAAmB,CAAC;YAC7C,0BAAqB,GAAG,oCAAoC,CAAC;;YAG7D,iBAAY,GAAG,UAAU,CAAC;YAC1B,8BAAyB,GAAG,sBAAsB,CAAC;YAKlD,6BAAwB,GAAuB,IAAInB,eAAY,EAAQ,CAAC;YACxE,6BAAwB,GAAuB,IAAIA,eAAY,EAAQ,CAAC;YAGlF,kBAAa,GAAG,YAAY,CAAC;YAE7B,wBAAmB,GAAG,KAAK,CAAC;YAM1B,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,gBAAgB,CAAC;YAC9C,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,cAAc,CAAC;SAC3C;QAED,sBAAI,kDAAK;;;;YAAT;gBACE,OAAO,IAAI,CAAC,mBAAmB,GAAG,MAAM,GAAG,SAAS,CAAC;aACtD;;;WAAA;QAED,sBAAI,wDAAW;;;;YAAf;gBACE,OAAO,IAAI,CAAC,mBAAmB,GAAG,MAAM,GAAG,QAAQ,CAAC;aACrD;;;WAAA;;;;QAED,kDAAQ;;;QAAR;YAAA,iBAYC;YAVC,IAAIoB,wBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBACtC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;;;gBAAC,cAAM,OAAA,KAAI,CAAC,mBAAmB,GAAG,IAAI,GAAA,EAAC,CAAC;aAC1F;YAED,IAAI,CAAC,0BAA0B,EAAE,CAAC;YAElC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;gBACvC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACC,gBAAU,CAAC,QAAQ,EAAEA,gBAAU,CAAC,KAAK,CAAC,CAAC;gBACpD,QAAQ,EAAE,CAAC,EAAE,EAAEA,gBAAU,CAAC,QAAQ,CAAC;aACpC,CAAC,CAAC;SACJ;;;;QAEM,oEAA0B;;;QAAjC;YACE,IAAI,CAAC,WAAW,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;YAClE,IAAI,CAAC,WAAW,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;SAC/D;;;;QAEK,+CAAK;;;QAAX;;;;gCACS,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAC1E;gCACE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK;gCAC1C,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;6BACjD,CACF,EAAA;gCALD,sBAAO,SAKN,EAAA;;;;SACF;;oBA1LFC,YAAS,SAAC;wBACT,QAAQ,EAAE,2BAA2B;wBACrC,QAAQ,EAAE,mvIAgGT;wBACD,MAAM,EAAE,CAAC,smGAER,CAAC;wBACF,aAAa,EAAEC,oBAAiB,CAAC,IAAI;wBACrC,UAAU,EAAE,2BAA2B;qBACxC;;;;oBAyC4C,MAAM,uBAA9ClB,SAAM,SAACmB,cAAW;oBAtJf,kBAAkB;oBAFlBC,iBAAW;;;8BAkHhBC,QAAK;gCACLA,QAAK;iCACLA,QAAK;0CACLA,QAAK;2CACLA,QAAK;2CACLA,QAAK;yCACLA,QAAK;gCAGLA,QAAK;qCACLA,QAAK;sCACLA,QAAK;kCACLA,QAAK;yCACLA,QAAK;4CACLA,QAAK;8CACLA,QAAK;gCAGLA,QAAK;6CACLA,QAAK;4CACLA,QAAK;mCAGLA,QAAK;gDACLA,QAAK;gCAGLC,SAAM;8BACNA,SAAM;+CACNA,SAAM;+CACNA,SAAM;;QAkDT,sCAAC;KA3LD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEA,QAAa,wBAAwB;;;;IAAgB,UAAC,OAAwB;QAC5E,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE;YAC/B,OAAO,IAAI,CAAC;SACb;;YAEK,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC;;YACzC,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC;QAE7D,IAAI,CAAC,QAAQ,IAAI,CAAC,eAAe,EAAE;YACjC,OAAO,IAAI,CAAC;SACb;QAED,IAAI,eAAe,CAAC,KAAK,KAAK,EAAE,EAAE;YAChC,OAAO,IAAI,CAAC;SACb;QAED,IAAI,QAAQ,CAAC,KAAK,KAAK,eAAe,CAAC,KAAK,EAAE;YAC5C,OAAO,IAAI,CAAC;SACb;QAED,OAAO,EAAC,oBAAoB,EAAE,IAAI,EAAC,CAAC;IACtC,CAAC,CAAA;AAED;QA0JE,4CAAyC,UAAkB,EACvC,YAAyB,EAC1B,WAA+B;;YAFT,eAAU,GAAV,UAAU,CAAQ;YACvC,iBAAY,GAAZ,YAAY,CAAa;YAC1B,gBAAW,GAAX,WAAW,CAAoB;;YArCzC,cAAS,GAAG,mBAAmB,CAAC;YAChC,sBAAiB,GAAG,mBAAmB,CAAC;YACxC,2BAAsB,GAAG,sBAAsB,CAAC;YAChD,4BAAuB,GAAG,mBAAmB,CAAC;YAC9C,2BAAsB,GAAG,0BAA0B,CAAC;YACpD,oBAAe,GAAG,OAAO,CAAC;;YAG1B,aAAQ,GAAG,MAAM,CAAC;YAClB,0BAAqB,GAAG,kBAAkB,CAAC;;YAG3C,cAAS,GAAG,OAAO,CAAC;YACpB,2BAAsB,GAAG,mBAAmB,CAAC;YAC7C,0BAAqB,GAAG,oCAAoC,CAAC;;YAG7D,iBAAY,GAAG,UAAU,CAAC;YAC1B,8BAAyB,GAAG,sBAAsB,CAAC;YACnD,6BAAwB,GAAG,uBAAuB,CAAC;YACnD,0CAAqC,GAAG,mCAAmC,CAAC;YAC5E,2BAAsB,GAAG,qBAAqB,CAAC;YAK9C,qBAAgB,GAAuB,IAAI3B,eAAY,EAAQ,CAAC;YAI1E,wBAAmB,GAAG,KAAK,CAAC;;YAW1B,IAAI,CAAC,eAAe,GAAG,IAAI4B,YAAO,EAAE,CAAC;YACrC,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,gBAAgB,CAAC;YAC9C,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,cAAc,CAAC;SAC3C;QAED,sBAAI,qDAAK;;;;YAAT;gBACE,OAAO,IAAI,CAAC,mBAAmB,GAAG,MAAM,GAAG,SAAS,CAAC;aACtD;;;WAAA;QAED,sBAAI,2DAAW;;;;YAAf;gBACE,OAAO,IAAI,CAAC,mBAAmB,GAAG,MAAM,GAAG,QAAQ,CAAC;aACrD;;;WAAA;;;;QAED,qDAAQ;;;QAAR;YAAA,iBAoBC;YAnBC,IAAIR,wBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBACtC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;;;gBAAC,cAAM,OAAA,KAAI,CAAC,mBAAmB,GAAG,IAAI,GAAA,EAAC,CAAC;aAC1F;YACD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;gBAC1C,IAAI,EAAE,CAAC,EAAE,EAAEC,gBAAU,CAAC,QAAQ,CAAC;gBAC/B,KAAK,EAAE,CAAC,EAAE,EAAE,CAACA,gBAAU,CAAC,QAAQ,EAAEA,gBAAU,CAAC,KAAK,CAAC,CAAC;gBACpD,QAAQ,EAAE,CAAC,EAAE,EAAEA,gBAAU,CAAC,QAAQ,CAAC;gBACnC,eAAe,EAAE,CAAC,EAAE,EAAE,CAACA,gBAAU,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;aACvE,CAAC,CAAC;;;YAIH,IAAI,CAAC,YAAY;iBACd,QAAQ;iBACR,QAAQ;iBACR,YAAY,CAAC,IAAI,CAACQ,qBAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;iBAClD,SAAS;;;YAAC;gBACT,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,sBAAsB,EAAE,CAAC;aACrE,EAAC,CAAC;SACN;;;;;;;;QAKD,wDAAW;;;;QAAX;;YAEE,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;YAC5B,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;SACjC;;;;QAEK,0DAAa;;;QAAnB;;;;gCACS,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAClC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EACrC;gCACE,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK;gCAC7C,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;6BACpD,CACF,EAAA;gCAND,sBAAO,SAMN,EAAA;;;;SACF;;oBApNFP,YAAS,SAAC;wBACT,QAAQ,EAAE,8BAA8B;wBACxC,QAAQ,EAAE,o1JAsGT;wBACD,MAAM,EAAE,CAAC,+5GAER,CAAC;wBACF,aAAa,EAAEC,oBAAiB,CAAC,IAAI;wBACrC,UAAU,EAAE,2BAA2B;qBACxC;;;;oBA4CsD,MAAM,uBAA9ClB,SAAM,SAACmB,cAAW;oBA1LRC,iBAAW;oBAM5B,kBAAkB;;;8BA2IvBC,QAAK;iCACLA,QAAK;6BACLA,QAAK;uCACLA,QAAK;gCAGLA,QAAK;wCACLA,QAAK;6CACLA,QAAK;8CACLA,QAAK;6CACLA,QAAK;sCACLA,QAAK;+BAGLA,QAAK;4CACLA,QAAK;gCAGLA,QAAK;6CACLA,QAAK;4CACLA,QAAK;mCAGLA,QAAK;gDACLA,QAAK;+CACLA,QAAK;4DACLA,QAAK;6CACLA,QAAK;gCAGLC,SAAM;8BACNA,SAAM;uCACNA,SAAM;;QAoET,yCAAC;KArND;;;;;;ACjCA;QAuDE,iCAAmB,SAAgD,EACvB,IAA0B;YADnD,cAAS,GAAT,SAAS,CAAuC;YACvB,SAAI,GAAJ,IAAI,CAAsB;YAH9D,gCAA2B,GAAG,KAAK,CAAC;SAI3C;QAGD,sBAAI,+DAA0B;;;;YAA9B;gBACE,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;oBAClD,IAAI,CAAC,2BAA2B,GAAG,EAAE,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,kBAAkB,CAAC,CAAC;iBAChF;qBAAM,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;oBAC1D,IAAI,CAAC,2BAA2B,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAA;iBAClD;qBAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;oBAC1D,IAAI,CAAC,2BAA2B,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAA;iBAC5D;gBACD,OAAO,IAAI,CAAC,2BAA2B,CAAC;aACzC;;;WAAA;;;;QAED,6CAAW;;;QAAX;;gBACQ,MAAM,GAAyB;gBACnC,OAAO,EAAE,CAAC,IAAI,CAAC,0BAA0B;gBACzC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY;aACrC;YACD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SAC9B;;oBAzEFL,YAAS,SAAC;wBACT,QAAQ,EAAE,qCAAqC;wBAC/C,QAAQ,EAAE,ytCAsCT;wBACD,MAAM,EAAE,CAAC,sKAER,CAAC;qBACH;;;;oBA/CwBQ,qBAAY;oDAuDtBzB,SAAM,SAAC0B,wBAAe;;QAuBrC,8BAAC;KA3ED;;;;;;ACJA;;QAKE,SAAU,SAAS;QACnB,SAAU,SAAS;QACnB,SAAU,SAAS;QACnB,KAAM,KAAK;QACX,UAAW,UAAU;QACrB,QAAS,QAAQ;;;;QAIjB,KAAM,KAAK;QACX,QAAS,QAAQ;;;QA+VjB,gCAAmB,WAA+B;YAA/B,gBAAW,GAAX,WAAW,CAAoB;;YATzC,WAAM,GAAW,MAAM,CAAC,GAAG,CAAC;YAC5B,cAAS,GAAkC,YAAY,CAAC,GAAG,CAAC;YAKrE,WAAM,GAAG,KAAK,CAAC;YACf,iBAAY,GAAG,YAAY,CAAC;YAG1B,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,gBAAgB,CAAC;YAC9C,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,cAAc,CAAC;SAC3C;;oBA/VFT,YAAS,SAAC;wBACT,QAAQ,EAAE,+BAA+B;wBACzC,QAAQ,EAAE,y9gBAwUT;wBACD,MAAM,EAAE,CAAC,slCAER,CAAC;wBACF,UAAU,EAAE,2BAA2B;qBACxC;;;;oBAhWO,kBAAkB;;;4BAmWvBI,QAAK;6BACLA,QAAK;gCACLA,QAAK;gCAELC,SAAM;8BACNA,SAAM;;QAUT,6BAAC;KAjWD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA,QAAa,WAAW,GAAG,IAAI,MAAM,CAAC,CAAC,gEAAgE;QACrG,uDAAuD;QACvD,sCAAsC;QACtC,iBAAiB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;;AAE9B,QAAa,kBAAkB,GAAG,IAAI,MAAM,CAAC,4BAA4B,CAAC;AAE1E;QAwaE,uBAC+B,UAAkB,EACxC,IAAqB,EACrB,WAA+B,EAC/B,MAAiB,EACuC,MAA+B,EACtF,eAA+B,EAC/B,IAAuB;YANF,eAAU,GAAV,UAAU,CAAQ;YACxC,SAAI,GAAJ,IAAI,CAAiB;YACrB,gBAAW,GAAX,WAAW,CAAoB;YAC/B,WAAM,GAAN,MAAM,CAAW;YACuC,WAAM,GAAN,MAAM,CAAyB;YACtF,oBAAe,GAAf,eAAe,CAAgB;YAC/B,SAAI,GAAJ,IAAI,CAAmB;YAlHxB,cAAS,GAAkC,YAAY,CAAC,GAAG,CAAC;YAK5D,wBAAmB,GAAG,IAAI,CAAC;YAC3B,yBAAoB,GAAG,IAAI,CAAC;YAC5B,iBAAY,GAAG,IAAI,CAAC;YAWnB,sBAAiB,GAAoC,IAAI3B,eAAY,EAAE,CAAC;;YAGzE,qBAAgB,GAAG,IAAI,CAAC;YACxB,8BAAyB,GAAG,IAAI,CAAC;YACjC,8BAAyB,GAAG,IAAI,CAAC;YACjC,oBAAe,GAAG,IAAI,CAAC;YACvB,0BAAqB,GAAG,IAAI,CAAC;YAI5B,sBAAiB,GAAyB,IAAIA,eAAY,EAAE,CAAC;;;YAgB9D,yBAAoB,GAAG,kCAAkC,CAAC;YAC1D,2BAAsB,GAAG,kCAAkC,CAAC;YAC5D,mCAA8B,GAAG,2CAA2C,CAAC;YAC7E,kCAA6B,GAAG,qCAAqC,CAAC;YACtE,kCAA6B,GAAG,OAAO,CAAC;YACxC,kCAA6B,GAAG,kDAAkD,CAAC;;YAGnF,kBAAa,GAAG,SAAS,CAAC;YAC1B,wBAAmB,GAAG,YAAY,CAAC;YACnC,oBAAe,GAAG,QAAQ,CAAC;YAC3B,6BAAwB,GAAG,mBAAmB,CAAC;;YAG/C,aAAQ,GAAG,MAAM,CAAC;YAClB,0BAAqB,GAAG,kBAAkB,CAAC;YAC3C,2BAAsB,GAAG,wBAAwB,CAAC;YAClD,2BAAsB,GAAG,uBAAuB,CAAC;YAEjD,cAAS,GAAG,QAAQ,CAAC;YACrB,2BAAsB,GAAG,oBAAoB,CAAC;YAC9C,0BAAqB,GAAG,qCAAqC,CAAC;YAE9D,iBAAY,GAAG,UAAU,CAAC;YAC1B,8BAAyB,GAAG,sBAAsB,CAAC;YACnD,+BAA0B,GAAG,4BAA4B,CAAC;YAC1D,+BAA0B,GAAG,2BAA2B,CAAC;;YAGzD,oBAAe,GAAG,UAAU,CAAC;YAC7B,0BAAqB,GAAG,cAAc,CAAC;YACvC,uBAAkB,GAAG,UAAU,CAAC;YAChC,oBAAe,GAAG,mBAAmB,CAAC;;YAGtC,2BAAsB,GAAG,8BAA8B,CAAC;YACxD,0BAAqB,GAAG,0IAAwI,CAAC;YAE1K,iBAAY,GAAG,YAAY,CAAC;YAQ5B,wBAAmB,GAAG,KAAK,CAAC;YAE5B,cAAS,GAAG,KAAK,CAAC;YAGlB,kBAAa,GAAG,YAAY,CAAC;YAoB3B,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,gBAAgB,CAAC;YAC9C,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,cAAc,CAAC;SAC3C;;;;QAEM,gCAAQ;;;QAAf;YAAA,iBAcC;YAbC,IAAIoB,wBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBACtC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;;;gBAAC,cAAM,OAAA,KAAI,CAAC,mBAAmB,GAAG,IAAI,GAAA,EAAC,CAAC;aAC1F;YACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAChH,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAEhH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YAEtC,IAAI,CAAC,0BAA0B,EAAE,CAAC;;YAElC,IAAI,CAAC,2BAA2B,EAAE,CAAC;YACnC,IAAI,CAAC,2BAA2B,EAAE,CAAC;YACnC,IAAI,CAAC,kCAAkC,EAAE,CAAC;SAC3C;;;;QAED,uCAAe;;;QAAf;YAAA,iBAMC;YALC,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBACzB,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,SAAS;;;;gBAAC,UAAC,QAAgB;oBACjE,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACvC,EAAC,CAAC;aACJ;SACF;;;;;QAED,mCAAW;;;;QAAX,UAAY,OAAsB;YAChC,IAAI,OAAO,CAAC,oBAAoB,IAAI,OAAO,CAAC,kBAAkB,EAAE;gBAC9D,IAAI,CAAC,0BAA0B,EAAE,CAAC;aACnC;YACD,IAAI,OAAO,CAAC,GAAG,EAAE;gBACf,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;aACjH;YACD,IAAI,OAAO,CAAC,GAAG,EAAE;gBACf,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;aACjH;YACD,IAAI,OAAO,CAAC,SAAS,EAAE;gBACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;aACvC;SACF;;;;QAED,mCAAW;;;QAAX;YACE,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC5B,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;aACxC;SACF;;;;;QAED,mCAAW;;;;QAAX,UAAY,KAAwB;YAClC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC;SAC7B;;;;QAEK,+BAAO;;;QAAb;;;;;;4BAEI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;4BACtB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;4BACzB,qBAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAA;;4BAAhC,SAAgC,CAAC;;;4BAEjC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;4BACvB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;;;;;;SAE5B;;;;QAEK,8BAAM;;;QAAZ;;;;;4BACE,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE;gCAC/B,sBAAO;6BACR;;;;4BAEC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;4BACtB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;4BACzB,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE;oCACrE,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK;oCACvC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ;iCAC9C,CAAC,EAAA;;4BAHF,SAGE,CAAC;;;4BAEH,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;4BACvB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;;;;;;SAE5B;QAED,sBAAI,gCAAK;;;;YAAT;gBACE,OAAO,IAAI,CAAC,mBAAmB,GAAG,MAAM,GAAG,SAAS,CAAC;aACtD;;;WAAA;;;;QAED,kDAA0B;;;QAA1B;YACE,IAAI,CAAC,WAAW,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;YAClE,IAAI,CAAC,WAAW,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;SAC/D;;;;QAED,+CAAuB;;;QAAvB;YACE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;YAChC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;YAClB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;SAC1B;;;;;QAED,0CAAkB;;;;QAAlB,UAAmB,YAA2B;YAA9C,iBAkBC;YAjBC,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,gBAAgB,EAAE;;oBAClC,MAAM,GAAyB;oBACnC,MAAM,EAAE,IAAI,CAAC,MAAM;oBACnB,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;oBACvC,YAAY,EAAE,YAAY;iBAC3B;gBAED,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;gBAC3E,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS;;;;gBAAC,UAAC,MAA4B;oBAClE,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;wBAC5B,KAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI;;;wBAAC,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,KAAK,EAAE,GAAA,EAAC,CAAC;qBAC3F;oBACD,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;iBACvB,EAAC,CAAC;aACJ;iBAAM;gBACL,IAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC,IAAI;;;gBAAC,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,KAAK,EAAE,GAAA,EAAC,CAAC;aACpF;SACF;;;;QAEK,8BAAM;;;QAAZ;;;;;;4BAEI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;4BACtB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;4BAClB,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAClC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,EAC/B;oCACE,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK;oCACvC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ;iCAC9C,CACF,EAAA;gCAND,sBAAO,SAMN,EAAC;;4BAEF,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;4BACvB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;;;;;;SAE5B;;;;QAEK,yCAAiB;;;QAAvB;;;;;;4BAEI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;4BACtB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;4BACzB,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAA;;4BAA9D,SAA8D,CAAC;;;4BAE/D,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;4BACvB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;;;;;;SAE5B;;;;QAGD,qCAAa;;;QAAb;YAAA,iBAOC;YANC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC;iBACrE,IAAI;;;YAAC;gBACJ,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;gBAEtB,KAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;aAC1B,EAAC,CAAC;SACN;;;;;QAEO,qCAAa;;;;QAArB;YACE,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC;SAC1F;;;;;QAEO,mDAA2B;;;;QAAnC;YACE,IAAI,CAAC,eAAe,GAAG,IAAIY,eAAS,CAAC,EAAE,CAAC,CAAC;YACzC,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,sBAAsB,GAAG,IAAIC,iBAAW,CAAC,EAAE,EAC5F;gBACEZ,gBAAU,CAAC,QAAQ;gBACnBA,gBAAU,CAAC,OAAO,CAAC,WAAW,CAAC;aAChC,CAAC,CAAC,CAAC;YACN,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,wBAAwB,GAAG,IAAIY,iBAAW,CAAC,EAAE,EACjG;gBACEZ,gBAAU,CAAC,QAAQ;gBACnBA,gBAAU,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;gBAC9BA,gBAAU,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;aAC/B,CAAC,CAAC,CAAC;SACP;;;;;QAEO,mDAA2B;;;;QAAnC;YACE,IAAI,CAAC,eAAe,GAAG,IAAIW,eAAS,CAAC;gBACnC,IAAI,EAAE,IAAI,CAAC,oBAAoB,GAAG,IAAIC,iBAAW,CAAC,EAAE,EAClD;oBACEZ,gBAAU,CAAC,QAAQ;oBACnBA,gBAAU,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;oBAC/CA,gBAAU,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;iBAChD,CAAC;gBACJ,KAAK,EAAE,IAAI,CAAC,qBAAqB,GAAG,IAAIY,iBAAW,CAAC,EAAE,EACpD;oBACEZ,gBAAU,CAAC,QAAQ;oBACnBA,gBAAU,CAAC,OAAO,CAAC,WAAW,CAAC;iBAChC,CAAC;gBACJ,QAAQ,EAAE,IAAI,CAAC,wBAAwB,GAAG,IAAIY,iBAAW,CAAC,EAAE,EAC1D;oBACEZ,gBAAU,CAAC,QAAQ;oBACnBA,gBAAU,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;oBAC9BA,gBAAU,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;iBAC/B,CAAC;aACL,CAAC,CAAC;SACJ;;;;;QAEO,0DAAkC;;;;QAA1C;YACE,IAAI,CAAC,sBAAsB,GAAG,IAAIW,eAAS,CAAC;gBAC1C,KAAK,EAAE,IAAI,CAAC,6BAA6B,GAAG,IAAIC,iBAAW,CAAC,EAAE,EAC5D;oBACEZ,gBAAU,CAAC,QAAQ;oBACnBA,gBAAU,CAAC,OAAO,CAAC,WAAW,CAAC;iBAChC,CAAC;aACL,CAAC,CAAC;SACJ;;;;;;QAEO,8CAAsB;;;;;QAA9B,UAA+B,YAA2B;YACxD,IAAI,YAAY,KAAK,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE;gBAChD,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC;aACjC;YACD,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;SACtB;;oBApoBFC,YAAS,SAAC;wBACT,QAAQ,EAAE,qBAAqB;wBAC/B,QAAQ,EAAE,k6eA6ST;wBACD,MAAM,EAAE,CAAC,s/BAER,CAAC;wBACF,UAAU,EAAE,2BAA2B;wBACvC,eAAe,EAAEY,0BAAuB,CAAC,MAAM;qBAChD;;;;oBAoH4C,MAAM,uBAA9C7B,SAAM,SAACmB,cAAW;oBA9bfpB,oBAAe;oBAQf,kBAAkB;oBANlB+B,kBAAS;oDAgcZ9B,SAAM,SAACC,aAAU;;;4BAAC,cAAM,OAAA,4BAA4B,GAAA,EAAC;oBA/blD8B,iBAAc;oBAlBpBC,oBAAiB;;;kCA4VhBC,YAAS,SAACC,oBAAW,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;uCACtCD,YAAS,SAACE,6CAA4B,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;gCAIvDd,QAAK;qCACLA,QAAK;iCAELA,QAAK;+BACLA,QAAK;0CACLA,QAAK;2CACLA,QAAK;mCACLA,QAAK;6BACLA,QAAK;uCACLA,QAAK;gCACLA,QAAK;2CACLA,QAAK;yCACLA,QAAK;wDACLA,QAAK;gCAGLC,SAAM;8BACNA,SAAM;wCACNA,SAAM;uCAGND,QAAK;gDACLA,QAAK;gDACLA,QAAK;sCACLA,QAAK;4CACLA,QAAK;0BACLA,QAAK;0BACLA,QAAK;sCACLA,QAAK;wCACLC,SAAM;0CAIND,QAAK;2CAILA,QAAK;kDACLA,QAAK;4CACLA,QAAK;mDACLA,QAAK;kCACLA,QAAK;2CAILA,QAAK;6CACLA,QAAK;qDACLA,QAAK;oDACLA,QAAK;oDACLA,QAAK;oDACLA,QAAK;oCAGLA,QAAK;0CACLA,QAAK;sCACLA,QAAK;+CACLA,QAAK;+BAGLA,QAAK;4CACLA,QAAK;6CACLA,QAAK;6CACLA,QAAK;gCAELA,QAAK;6CACLA,QAAK;4CACLA,QAAK;mCAELA,QAAK;gDACLA,QAAK;iDACLA,QAAK;iDACLA,QAAK;sCAGLA,QAAK;4CACLA,QAAK;yCACLA,QAAK;sCACLA,QAAK;6CAGLA,QAAK;4CACLA,QAAK;;QAwPR,oBAAC;KAtoBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QC2KE,uBACS,IAAqB,EACrB,WAA+B,EAC9B,iBAAuC,EACvC,QAAqB,EACkC,MAA+B;YAJvF,SAAI,GAAJ,IAAI,CAAiB;YACrB,gBAAW,GAAX,WAAW,CAAoB;YAC9B,sBAAiB,GAAjB,iBAAiB,CAAsB;YACvC,aAAQ,GAAR,QAAQ,CAAa;YACkC,WAAM,GAAN,MAAM,CAAyB;YA/BhG,cAAS,GAAG,IAAI,CAAC;YAGjB,mBAAc,GAAG,IAAI,CAAC;YAGtB,qBAAgB,GAAG,IAAI,CAAC;YAMxB,cAAS,GAAuB,IAAI1B,eAAY,EAAE,CAAC;YAGnD,oBAAe,GAAuB,IAAIA,eAAY,EAAE,CAAC;YAGzD,qBAAgB,GAAuB,IAAIA,eAAY,EAAE,CAAC;SAcrD;;;;;QAEK,2CAAmB;;;;QAA7B;;gBACQ,WAAW,GAAS,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW;YACpD,IAAI,CAAC,eAAe,GAAG,IAAIgC,eAAS,CAAC;gBACnC,IAAI,EAAE,IAAI,CAAC,qBAAqB,GAAG,IAAIC,iBAAW,CAChD,EAAE,KAAK,EAAE,WAAW,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,EAC3D;oBACEZ,gBAAU,CAAC,QAAQ;oBACnBA,gBAAU,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;oBAC/CA,gBAAU,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;iBAChD,CACF;gBAED,KAAK,EAAE,IAAI,CAAC,sBAAsB,GAAG,IAAIY,iBAAW,CAClD,EAAC,KAAK,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAC,EACnD;oBACEZ,gBAAU,CAAC,QAAQ;oBACnBA,gBAAU,CAAC,OAAO,CAAC,WAAW,CAAC;iBAChC,CAAC;gBAEJ,WAAW,EAAE,IAAI,CAAC,4BAA4B,GAAG,IAAIY,iBAAW,CAC9D,EAAC,KAAK,EAAE,WAAW,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAC,EACzD,CAACZ,gBAAU,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;aAC5C,CAAC,CAAC;YAEH,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;SAC/B;;;;QAED,sCAAc;;;QAAd;YACE,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;YAE/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;SAC3D;;;;QAED,6BAAK;;;QAAL;YACE,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;YAC7B,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;YAC/B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;SAC7B;;;;QAEK,4BAAI;;;QAAV;;;;;;iCACM,IAAI,CAAC,eAAe,CAAC,KAAK,EAA1B,yBAA0B;4BACtB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW;;;;4BAKjC,WAAW,GAAa,EAAE;;;;iCAG1B,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAhC,wBAAgC;4BAClC,qBAAM,IAAI,CAAC,aAAa,CAAC,EAAC,WAAW,EAAE,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,EAAA;;4BAAzF,SAAyF,CAAC;4BAC1F,WAAW,CAAC,IAAI,CAAC,mCAAiC,IAAI,CAAC,WAAa,CAAC,CAAC;;;iCAGpE,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAjC,wBAAiC;4BACnC,qBAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,EAAA;;4BAAzD,SAAyD,CAAC;4BAC1D,WAAW,CAAC,IAAI,CAAC,oCAAkC,IAAI,CAAC,KAAO,CAAC,CAAC;;;iCAG/D,IAAI,CAAC,4BAA4B,CAAC,KAAK,EAAvC,wBAAuC;4BACzC,qBAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,EAAA;;4BAArE,SAAqE,CAAC;4BACtE,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;4BACxE,WAAW,CAAC,IAAI,CAAC,2CAAyC,IAAI,CAAC,WAAa,CAAC,CAAC;;;iCAG5E,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAA/B,wBAA+B;4BACjC,qBAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAAA;;4BAAjF,SAAiF,CAAC;;;;;4BAIpF,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,OAAK,IAAI,OAAK,CAAC,OAAO,GAAG,OAAK,CAAC,OAAO,GAAG,OAAK,CAAC,CAAC;4BAC3E,OAAO,CAAC,KAAK,CAAC,OAAK,CAAC,CAAC;;;4BAIvB,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gCAC1B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;6BACrD;;;4BAIH,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;;;;;SACvB;;;;QAED,+BAAO;;;QAAP;YAAA,iBAIC;YAHC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;iBACrB,IAAI;;;YAAC,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,GAAA,EAAC;iBACjC,KAAK;;;;YAAC,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,CAAC,CAAC,GAAA,EAAC,CAAC;SACzE;;;;;;;;;;;;;;;;QASK,qCAAa;;;;;;;;QAAnB;;;;;;;4BAEU,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW;;4BAGvC,qBAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAA;;;4BAAzC,SAAyC,CAAC;;4BAE1C,qBAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,EAAA;;;4BAArD,SAAqD,CAAC;;4BAEtD,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;4BAC7B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;4BACtB,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;4BAC3D,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,6CAA6C,CAAC,CAAC;;;;4BAE1E,OAAO,CAAC,GAAG,CAAC,iCAAiC,EAAE,OAAK,CAAC,CAAC;4BACtD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,iDAA+C,OAAK,CAAC,OAAS,CAAC,CAAC;;;;;;SAE9F;;oBAnUFC,YAAS,SAAC;wBACT,QAAQ,EAAE,0BAA0B;wBACpC,QAAQ,EAAE,qjNAkKT;wBACD,MAAM,EAAE,CAAC,mOAER,CAAC;qBACH;;;;oBAjLQlB,oBAAe;oBAKf,kBAAkB;oBAClB,oBAAoB;oBAJIG,oBAAW;oDAqNvCF,SAAM,SAACC,aAAU;;;4BAAC,cAAM,OAAA,4BAA4B,GAAA,EAAC;;;+BAnCvDoB,QAAK;gCAGLA,QAAK;qCAGLA,QAAK;uCAGLA,QAAK;iCAGLA,QAAK;gCAGLC,SAAM;sCAGNA,SAAM;uCAGNA,SAAM;;QAoIT,oBAAC;KApUD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCIM,mBAAmB,GAAG;QAC1B,oBAAoB,EAAE,8BAA8B;QACpD,2BAA2B,EAAE,iIAAiI;QAC9J,qBAAqB,EAAE,SAAS;QAChC,4BAA4B,EAAE,8BAA8B;QAC5D,WAAW,EAAE,UAAU;QACvB,iCAAiC,EAAE,mEAAmE;KACvG;AAED;QAwDE,oCAAmB,WAA+B,EAAU,OAAe,EAAU,IAAuB;YAAzF,gBAAW,GAAX,WAAW,CAAoB;YAAU,YAAO,GAAP,OAAO,CAAQ;YAAU,SAAI,GAAJ,IAAI,CAAmB;YAXlG,YAAO,GAAG,IAAI3B,eAAY,EAAE,CAAC;SAWyE;;;;;QAEhH,gDAAW;;;;QAAX,UAAY,OAAsB;YAChC,IAAI,OAAO,CAAC,mBAAmB,IAAI,OAAO,CAAC,mBAAmB,CAAC,YAAY,IAAI,IAAI,EAAE;gBACnF,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,eAAe,CAAC;gBAChD,OAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;aACzE;YACD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;SACxD;;;;QAED,6CAAQ;;;QAAR;YACE,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC7B,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;gBAC1C,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,eAAe,CAAC;aACjD;YACD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;YACvD,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC9D,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;SAC7D;;;;QAEK,6CAAQ;;;QAAd;;;;;;;4BAEI,qBAAM,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,EAAA;;4BAAvC,SAAuC,CAAC;4BACxC,qBAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAA;;4BAA7C,SAA6C,CAAC;;;;4BAE9C,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,OAAK,CAAC,CAAC;;;;;;SAEvC;;;;QAEK,6DAAwB;;;QAA9B;;;;;;;4BAEI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;4BACtB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;4BACzB,qBAAM,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,EAAA;;4BAAjD,SAAiD,CAAC;4BAClD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,iCAAiC,CAAC,CAAC;;;;4BAEtF,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,OAAK,CAAC,CAAC;;;4BAEpC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;4BACvB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;;;;;;SAE5B;;;;;QAEO,0DAAqB;;;;QAA7B;;gBACQ,OAAO,GAAG;gBACd,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,IAAI,mBAAmB,CAAC,oBAAoB;gBAC3F,2BAA2B,EAAE,IAAI,CAAC,2BAA2B,IAAI,mBAAmB,CAAC,2BAA2B;gBAChH,qBAAqB,EAAE,IAAI,CAAC,qBAAqB,IAAI,mBAAmB,CAAC,qBAAqB;gBAC9F,4BAA4B,EAAE,IAAI,CAAC,4BAA4B,IAAI,mBAAmB,CAAC,4BAA4B;gBACnH,WAAW,EAAE,IAAI,CAAC,WAAW,IAAI,mBAAmB,CAAC,WAAW;gBAChE,iCAAiC,EAAE,IAAI,CAAC,iCAAiC,IAAI,mBAAmB,CAAC,iCAAiC;aACnI;YACD,OAAO,OAAO,CAAC;SAChB;;oBA/GFsB,YAAS,SAAC;wBACT,QAAQ,EAAE,wCAAwC;wBAClD,QAAQ,EAAE,+qDAsBT;wBACD,MAAM,EAAE,CAAC,2lBAER,CAAC;wBACF,eAAe,EAAEY,0BAAuB,CAAC,MAAM;qBAChD;;;;oBAlDQ,kBAAkB;oBADlBO,SAAM;oBADmBJ,oBAAiB;;;4BAuDhDX,QAAK;gCACLA,QAAK;2CAELA,QAAK;kDACLA,QAAK;4CACLA,QAAK;mDACLA,QAAK;kCACLA,QAAK;wDACLA,QAAK;+BAGLA,QAAK;8BAELC,SAAM;sCASNW,YAAS,SAAC,oBAAoB,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC;;QA0DjD,iCAAC;KAhHD;;;;;;;ACOA,QAAa,2BAA2B,GAA4B;;;QAGlE,mBAAmB,EAAE,IAAI;QACzB,yBAAyB,EAAE,IAAI;QAC/B,uBAAuB,EAAE,IAAI;QAC7B,oBAAoB,EAAE,GAAG;QACzB,oBAAoB,EAAE,GAAG;;;QAIzB,iBAAiB,EAAE,EAAE;QACrB,iBAAiB,EAAE,CAAC;;QAGpB,aAAa,EAAE,EAAE;QACjB,aAAa,EAAE,CAAC;;;QAIhB,wCAAwC,EAAE,IAAI;KAC/C;;;;;;AAGD,aAAgB,8BAA8B,CAAC,kBAA2C;QACxF,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,2BAA2B,EAAE,kBAAkB,CAAC,CAAC;IAC5E,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCcC,0CAAmB,GAAoB,EACpB,MAAiB;YADjB,QAAG,GAAH,GAAG,CAAiB;YACpB,WAAM,GAAN,MAAM,CAAW;YAbpC,cAAS,GAAG,IAAI,CAAC;YAMjB,cAAS,GAAuB,IAAItC,eAAY,EAAE,CAAC;SAQlD;;;;QAED,mDAAQ;;;QAAR;YAAA,iBAMC;YALC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,SAAS;;;;YAAC,UAAC,IAAU;gBAC9B,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,KAAI,CAAC,mBAAmB,GAAG,IAAI,GAAG,KAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;aACxF,EAAC,CAAC;SACJ;;;;;QAED,iEAAsB;;;;QAAtB,UAAuB,WAA0B;YAC/C,IAAI,CAAC,WAAW,EAAE;gBAChB,OAAO,IAAI,CAAC;aACb;;gBACK,cAAc,GAAqB,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE;;gBACnE,QAAQ,GAAG,CAAC,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,cAAc,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,WAAW,EAAE;YAC9F,OAAO,QAAQ,CAAC;SACjB;;;;QAED,sDAAW;;;QAAX;YACE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SACjC;;;;QAEK,kDAAO;;;QAAb;;;;;;;4BAEI,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,EAAA;;4BAA7B,SAA6B,CAAC;;4BAE9B,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;;;;;4BAGtB,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,GAAC,CAAC,CAAC;;;;;;SAE5D;;oBA3FFsB,YAAS,SAAC;wBACT,QAAQ,EAAE,4BAA4B;wBACtC,QAAQ,EAAE,mqDAmCT;wBACD,MAAM,EAAE,CAAC,+EAER,CAAC;qBACH;;;;oBArDOlB,oBAAe;oBAGf+B,kBAAS;;;gCAqDdT,QAAK;4BAGLA,QAAK;gCAGLC,SAAM;;QA0CT,uCAAC;KA5FD;;;;;;ACbA;QAUE,yBAEU,MAA+B,EAC/B,MAAc,EACd,WAA+B;YAF/B,WAAM,GAAN,MAAM,CAAyB;YAC/B,WAAM,GAAN,MAAM,CAAQ;YACd,gBAAW,GAAX,WAAW,CAAoB;SACrC;;;;;;QAEJe,qCAAW;;;;;QAAX,UAAY,KAA6B,EAAE,KAA0B;YAArE,iBAoBC;YAnBC,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CACnCC,aAAG;;;;YAAC,UAAA,IAAI;gBACN,IAAI,IAAI,EAAE;oBACR,IAAI,KAAI,CAAC,MAAM,CAAC,wCAAwC,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;wBACpG,IAAI,KAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE;4BACpC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAG,KAAI,CAAC,MAAM,CAAC,oBAAsB,CAAC,EAAE,EAAE,WAAW,EAAE,EAAE,WAAW,EAAE,KAAK,CAAC,GAAG,EAAE,EAAC,CAAC,CAAC;yBAC3G;wBACD,OAAO,KAAK,CAAC;qBACd;yBAAM;wBACL,OAAO,IAAI,CAAC;qBACb;iBACF;qBAAM;oBACL,IAAI,KAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE;wBACpC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAI,KAAI,CAAC,MAAM,CAAC,oBAAsB,CAAC,EAAE,EAAE,WAAW,EAAE,EAAE,WAAW,EAAE,KAAK,CAAC,GAAG,EAAE,EAAC,CAAC,CAAC;qBAC5G;oBACD,OAAO,KAAK,CAAC;iBACd;aACF,EAAC,CACH,CAAC;SACH;;oBA/BF9C,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;oDAGIQ,SAAM,SAAC,4BAA4B;oBAVMoC,SAAM;oBAG3C,kBAAkB;;;8BAJ3B;KAMA;;;;;;;;ACmEA,QAAa,4BAA4B,GAAG,IAAIG,iBAAc,CAA0B,8BAA8B,CAAC;;;AAEvH,QAAa,uBAAuB,GAAG,IAAIA,iBAAc,CAA0B,yBAAyB,CAAC;AAE7G;QA2FE,iCAAoB,aAA8B,EAAU,UAAwB,EAAE,KAAyB;YAA3F,kBAAa,GAAb,aAAa,CAAiB;YAAU,eAAU,GAAV,UAAU,CAAc;YAClF,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAC3B,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC9B;;;;;;;QAjCM,+BAAO;;;;;;QAAd,UACE,aAAgC,EAChC,cAA0D,EAC1D,MAAoC;YADpC,+BAAA,EAAA;;;YAA2C,cAAM,OAAA,SAAS,GAAA,CAAA;YAC1D,uBAAA,EAAA,WAAoC;YAEpC,OAAO;gBACL,QAAQ,EAAE,uBAAuB;gBACjC,SAAS,EACP;oBACE;wBACE,OAAO,EAAEC,yBAAoB;wBAC7B,QAAQ,EAAE,aAAa;qBACxB;oBACD;wBACE,OAAO,EAAEC,8BAAyB;wBAClC,UAAU,EAAE,cAAc;qBAC3B;oBACD,EAAC,OAAO,EAAE,uBAAuB,EAAE,QAAQ,EAAE,MAAM,EAAC;oBACpD;wBACE,OAAO,EAAE,4BAA4B;wBACrC,UAAU,EAAE,8BAA8B;wBAC1C,IAAI,EAAE,CAAC,uBAAuB,CAAC;qBAChC;oBACD,kBAAkB;oBAClB,oBAAoB;oBACpB,aAAa;iBACd;aACJ,CAAC;SACH;;;;QAOD,uDAAqB;;;QAArB;YACE,IAAI,CAAC,aAAa;iBACf,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,wBAAwB,CAAC,CAAC;iBAC9F,UAAU,CAAC,gBAAgB,EAAE,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,oBAAoB,CAAC,CAAC;iBAClG,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,0BAA0B,CAAC,CAAC;iBAClG,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,yBAAyB,CAAC,CAAC;iBAChG,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,+BAA+B,CAAC,CAAC;iBACrG,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,2BAA2B,CAAC,CAAC;iBACpG,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,uBAAuB,CAAC,CAAC;iBAC5F,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,mBAAmB,CAAC,CAAC,CAAC;SAC7F;;oBA1GFC,WAAQ,SAAC;wBACR,OAAO,EAAE;4BACPC,mBAAY;;4BAEZC,eAAY;4BACZC,qBAAgB;;4BAEhBC,2BAAgB;;4BAEhBC,iBAAW;4BACXC,yBAAmB;;4BAEnBC,kBAAa;4BACbC,kBAAa;4BACbC,oBAAc;4BACdC,sBAAe;4BACfC,kBAAa;4BACbC,oBAAiB;4BACjBC,wBAAgB;4BAChBC,oBAAc;4BACdC,wBAAgB;4BAChBC,sBAAe;4BACfC,0BAAiB;4BACjBC,wCAAwB;4BACxBC,gCAAoB;4BACpBH,sBAAe;4BACfI,kBAAa;;4BAEbC,0CAAyB;;4BAEzBC,0BAAqB;4BACrBC,2BAAsB;yBACvB;wBACD,OAAO,EAAE;4BACP,aAAa;4BACb,aAAa;4BACb,gCAAgC;4BAChC,sBAAsB;4BACtB,0BAA0B;;4BAE1BD,0BAAqB;4BACrBC,2BAAsB;4BACtB,+BAA+B;4BAC/B,kCAAkC;yBACnC;wBACD,YAAY,EAAE;4BACZ,aAAa;4BACb,aAAa;4BACb,gCAAgC;4BAChC,sBAAsB;4BACtB,0BAA0B;4BAC1B,uBAAuB;4BACvB,+BAA+B;4BAC/B,kCAAkC;yBACnC;wBACD,eAAe,EAAE;4BACf,aAAa;4BACb,uBAAuB;yBACxB;qBACF;;;;oBAtHsBC,oBAAe;oBAgB9BC,4BAAY;oBAgBZ,kBAAkB;;QAsI1B,8BAAC;KA3GD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}