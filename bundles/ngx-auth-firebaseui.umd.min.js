!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/common"),require("@angular/core"),require("@angular/forms"),require("@angular/common/http"),require("@angular/router"),require("@angular/flex-layout"),require("@angular/fire"),require("@angular/fire/auth"),require("@angular/fire/firestore"),require("@angular/material/button"),require("@angular/material/card"),require("@angular/material/checkbox"),require("@angular/material/chips"),require("@angular/material/dialog"),require("@angular/material/divider"),require("@angular/material/icon"),require("@angular/material/input"),require("@angular/material/menu"),require("@angular/material/progress-bar"),require("@angular/material/progress-spinner"),require("@angular/material/snack-bar"),require("@angular/material/tabs"),require("@angular/material/tooltip"),require("@angular-material-extensions/password-strength"),require("@angular/material"),require("@firebase/app"),require("@firebase/auth"),require("lodash"),require("rxjs/operators"),require("@angular/animations"),require("rxjs"),require("rxjs/internal/operators"),require("@angular/platform-browser")):"function"==typeof define&&define.amd?define(["exports","@angular/common","@angular/core","@angular/forms","@angular/common/http","@angular/router","@angular/flex-layout","@angular/fire","@angular/fire/auth","@angular/fire/firestore","@angular/material/button","@angular/material/card","@angular/material/checkbox","@angular/material/chips","@angular/material/dialog","@angular/material/divider","@angular/material/icon","@angular/material/input","@angular/material/menu","@angular/material/progress-bar","@angular/material/progress-spinner","@angular/material/snack-bar","@angular/material/tabs","@angular/material/tooltip","@angular-material-extensions/password-strength","@angular/material","@firebase/app","@firebase/auth","lodash","rxjs/operators","@angular/animations","rxjs","rxjs/internal/operators","@angular/platform-browser"],e):e((t=t||self).ngxAuthFirebaseui={},t.ng.common,t.ng.core,t.ng.forms,t.ng["common,http"],t.ng.router,t.ng.flexLayout,t.ng.fire,t.ng.fire.auth,t.ng.fire.firestore,t.ng.material.button,t.ng.material.card,t.ng.material.checkbox,t.ng.material.chips,t.ng.material.dialog,t.ng.material.divider,t.ng.material.icon,t.ng.material.input,t.ng.material.menu,t.ng.material["progress-bar"],t.ng.material["progress-spinner"],t.ng.material["snack-bar"],t.ng.material.tabs,t.ng.material.tooltip,t.passwordStrength,t.ng.material,t.firebaseApp,null,t.lodash,t.rxjsOperators,t.ng.animations,t.rxjs,t.operators$1,t.ng.platformBrowser)}(this,function(t,e,r,n,a,o,i,s,u,l,c,m,p,d,h,g,f,b,x,y,v,w,I,P,T,E,k,L,C,A,F,S,U,R){"use strict";var M="account",O="account-check",q="account-off",N="users",G=function(){function t(t){this.afs=t}return t.prototype.getUserDocRefByUID=function(t){return this.afs.doc(N+"/"+t)},t.prototype.deleteUserData=function(t){return this.getUserDocRefByUID(t).delete()},t.prototype.updateUserData=function(t){var e=this.getUserDocRefByUID(t.uid),r={uid:t.uid,email:t.email,displayName:t.displayName,photoURL:t.photoURL,phoneNumber:t.phoneNumber,providerId:t.providerId};return e.set(r,{merge:!0})},t.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:l.AngularFirestore}]},t.ngInjectableDef=r.ɵɵdefineInjectable({factory:function(){return new G(r.ɵɵinject(l.AngularFirestore))},token:G,providedIn:"root"}),t}(),B=function(t,e,r,n){return new(r||(r=Promise))(function(a,o){function i(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){t.done?a(t.value):new r(function(e){e(t.value)}).then(i,s)}u((n=n.apply(t,e||[])).next())})},_=function(t,e){var r,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(t,i)}catch(t){o=[6,t],n=0}finally{r=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},D=new k.firebase.auth.FacebookAuthProvider,V=new k.firebase.auth.GoogleAuthProvider,j=new k.firebase.auth.TwitterAuthProvider,W=new k.firebase.auth.GithubAuthProvider,z=new k.firebase.auth.OAuthProvider("microsoft.com"),Y=new k.firebase.auth.OAuthProvider("yahoo.com"),H={ALL:"all",ANONYMOUS:"anonymous",EmailAndPassword:"firebase",Google:"google",Facebook:"facebook",Twitter:"twitter",Github:"github",Microsoft:"microsoft",Yahoo:"yahoo",PhoneNumber:"phoneNumber"},$=function(){function t(t,e,n,a,o){this.afa=t,this.config=e,this._snackBar=n,this._fireStoreService=a,this._matSnackBarConfig=o,this.onSuccessEmitter=new r.EventEmitter,this.onErrorEmitter=new r.EventEmitter}return t.prototype.listenToUserEvents=function(){var t=this;this.user$=this.afa.user.pipe(A.tap(function(e){t.user=e}))},t.prototype.resetPassword=function(t){var e=this;return this.afa.auth.sendPasswordResetEmail(t).then(function(){return console.log("Password reset email sent")}).catch(function(t){return e.notifyError(t)})},t.prototype.signInWith=function(t,e){return B(this,void 0,void 0,function(){var r,n;return _(this,function(a){switch(a.label){case 0:switch(a.trys.push([0,21,,22]),r=void 0,t){case H.ANONYMOUS:return[3,1];case H.EmailAndPassword:return[3,3];case H.Google:return[3,5];case H.Facebook:return[3,7];case H.Twitter:return[3,9];case H.Github:return[3,11];case H.Microsoft:return[3,13];case H.Yahoo:return[3,15];case H.PhoneNumber:return[3,17]}return[3,18];case 1:return[4,this.afa.auth.signInAnonymously()];case 2:return r=a.sent(),[3,19];case 3:return[4,this.afa.auth.signInWithEmailAndPassword(e.email,e.password)];case 4:return r=a.sent(),[3,19];case 5:return[4,this.afa.auth.signInWithPopup(V)];case 6:return r=a.sent(),[3,19];case 7:return[4,this.afa.auth.signInWithPopup(D)];case 8:return r=a.sent(),[3,19];case 9:return[4,this.afa.auth.signInWithPopup(j)];case 10:return r=a.sent(),[3,19];case 11:return[4,this.afa.auth.signInWithPopup(W)];case 12:return r=a.sent(),[3,19];case 13:return[4,this.afa.auth.signInWithPopup(z)];case 14:return r=a.sent(),[3,19];case 15:return[4,this.afa.auth.signInWithPopup(Y)];case 16:return r=a.sent(),[3,19];case 17:return[3,19];case 18:throw new Error(H[t]+" is not available as auth provider");case 19:return[4,this.handleSuccess(r)];case 20:return a.sent(),[3,22];case 21:return n=a.sent(),this.handleError(n),[3,22];case 22:return[2]}})})},t.prototype.signUp=function(t,e){return B(this,void 0,void 0,function(){var r,n,a;return _(this,function(o){switch(o.label){case 0:return o.trys.push([0,7,,8]),[4,this.afa.auth.createUserWithEmailAndPassword(e.email,e.password)];case 1:return r=o.sent(),n=r.user,[4,this.updateProfile(t,n.photoURL)];case 2:return o.sent(),this.config.enableFirestoreSync?[4,this._fireStoreService.getUserDocRefByUID(n.uid).set({uid:n.uid,displayName:t,email:n.email,photoURL:n.photoURL})]:[3,4];case 3:o.sent(),o.label=4;case 4:return[4,n.sendEmailVerification()];case 5:return o.sent(),this.emailConfirmationSent=!0,this.emailToConfirm=e.email,[4,this.handleSuccess(r)];case 6:return o.sent(),[3,8];case 7:return a=o.sent(),this.handleError(a),[3,8];case 8:return[2]}})})},t.prototype.sendNewVerificationEmail=function(){return B(this,void 0,void 0,function(){return _(this,function(t){return this.user?[2,this.user.sendEmailVerification()]:[2,Promise.reject(new Error("No signed in user"))]})})},t.prototype.signOut=function(){return B(this,void 0,void 0,function(){var t;return _(this,function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,this.afa.auth.signOut()];case 1:return e.sent(),[3,3];case 2:return t=e.sent(),this.notifyError(t),[3,3];case 3:return[2]}})})},t.prototype.updateProfile=function(t,e){return this.afa.auth.currentUser.updateProfile({displayName:t,photoURL:e})},t.prototype.deleteAccount=function(){return this.afa.auth.currentUser.delete()},t.prototype.parseUserInfo=function(t){return{uid:t.uid,displayName:t.displayName,email:t.email,phoneNumber:t.phoneNumber,photoURL:t.photoURL,providerId:t.providerData.length>0?t.providerData[0].providerId:null}},t.prototype.getUserPhotoUrl=function(){var t=this.afa.auth.currentUser;return t?t.photoURL?t.photoURL:t.emailVerified?this.getPhotoPath(O):t.isAnonymous?this.getPhotoPath(q):this.getPhotoPath(M):void 0},t.prototype.getPhotoPath=function(t){return"assets/user/"+t+".svg"},t.prototype.signInWithPhoneNumber=function(){},t.prototype.handleSuccess=function(t){return B(this,void 0,void 0,function(){var e,r;return _(this,function(n){switch(n.label){case 0:if(this.onSuccessEmitter.next(t.user),!this.config.enableFirestoreSync)return[3,4];n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this._fireStoreService.updateUserData(this.parseUserInfo(t.user))];case 2:return n.sent(),[3,4];case 3:return e=n.sent(),console.error("Error occurred while updating user data with firestore: "+e),[3,4];case 4:return this.config.toastMessageOnAuthSuccess&&(r="Hello "+(t.user.displayName?t.user.displayName:"")+"!",this.showToast(this.messageOnAuthSuccess||r)),[2]}})})},t.prototype.handleError=function(t){this.notifyError(t),console.error(t)},t.prototype.reloadUserInfo=function(){return this.user.reload()},t.prototype.getMessageOnAuthError=function(t){return C.isFunction(this.messageOnAuthError)?this.messageOnAuthError(t):this.messageOnAuthError||"Sorry, something went wrong. Please retry later."},t.prototype.showToast=function(t){t&&this._snackBar.open(t,this._matSnackBarConfig.duration?null:"OK")},t.prototype.showErrorToast=function(t){this.config.toastMessageOnAuthError&&this.showToast(this.getMessageOnAuthError(t))},t.prototype.notifyError=function(t){this.onErrorEmitter.emit(t),this.showErrorToast(t)},t.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:u.AngularFireAuth},{type:void 0,decorators:[{type:r.Inject,args:[r.forwardRef(function(){return St})]}]},{type:E.MatSnackBar},{type:G},{type:E.MatSnackBarConfig,decorators:[{type:r.Inject,args:[E.MAT_SNACK_BAR_DEFAULT_OPTIONS]}]}]},t.ngInjectableDef=r.ɵɵdefineInjectable({factory:function(){return new $(r.ɵɵinject(u.AngularFireAuth),r.ɵɵinject(St),r.ɵɵinject(w.MatSnackBar),r.ɵɵinject(G),r.ɵɵinject(w.MAT_SNACK_BAR_DEFAULT_OPTIONS))},token:$,providedIn:"root"}),t}(),K=F.animation([F.style({opacity:"{{opacity}}",transform:"scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})"}),F.animate("{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)",F.style("*"))],{params:{duration:"200ms",delay:"0ms",opacity:"0",scale:"1",x:"0",y:"0",z:"0"}}),X=[F.trigger("animate",[F.transition("void => *",[F.useAnimation(K)])]),F.trigger("animateStagger",[F.state("50",F.style("*")),F.state("100",F.style("*")),F.state("200",F.style("*")),F.transition("void => 50",F.query("@*",[F.stagger("50ms",[F.animateChild()])],{optional:!0})),F.transition("void => 100",F.query("@*",[F.stagger("100ms",[F.animateChild()])],{optional:!0})),F.transition("void => 200",F.query("@*",[F.stagger("200ms",[F.animateChild()])],{optional:!0}))])],Z=function(t,e,r,n){return new(r||(r=Promise))(function(a,o){function i(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){t.done?a(t.value):new r(function(e){e(t.value)}).then(i,s)}u((n=n.apply(t,e||[])).next())})},J=function(t,e){var r,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(t,i)}catch(t){o=[6,t],n=0}finally{r=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},Q=function(){function t(t,e,n){this.platformId=t,this.authProcess=e,this._formBuilder=n,this.providers=H.ALL,this.registrationEnabled=!0,this.resetPasswordEnabled=!0,this.titleText="LOGIN TO YOUR ACCOUNT",this.rememberMeText="Remember Me",this.loginButtonText="LOGIN",this.orLabelText="OR",this.forgotPasswordText="Forgot Password?",this.dontHaveAnAccountText="Don't have an account?",this.createAccountButtonText="Create an account",this.emailText="Email",this.emailErrorRequiredText="Email is required",this.emailErrorPatternText="Please enter a valid email address",this.passwordText="Password",this.passwordErrorRequiredText="Password is required",this.onCreateAccountRequested=new r.EventEmitter,this.onResetPasswordRequested=new r.EventEmitter,this.authProviders=H,this.authenticationError=!1,this.onSuccess=e.onSuccessEmitter,this.onError=e.onErrorEmitter}return Object.defineProperty(t.prototype,"color",{get:function(){return this.authenticationError?"warn":"primary"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"colorAccent",{get:function(){return this.authenticationError?"warn":"accent"},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){var t=this;e.isPlatformBrowser(this.platformId)&&(this.onErrorSubscription=this.onError.subscribe(function(){return t.authenticationError=!0})),this.updateAuthSnackbarMessages(),this.loginForm=this._formBuilder.group({email:["",[n.Validators.required,n.Validators.email]],password:["",n.Validators.required]})},t.prototype.updateAuthSnackbarMessages=function(){this.authProcess.messageOnAuthSuccess=this.messageOnAuthSuccess,this.authProcess.messageOnAuthError=this.messageOnAuthError},t.prototype.login=function(){return Z(this,void 0,void 0,function(){return J(this,function(t){switch(t.label){case 0:return[4,this.authProcess.signInWith(this.authProviders.EmailAndPassword,{email:this.loginForm.controls.email.value,password:this.loginForm.controls.password.value})];case 1:return[2,t.sent()]}})})},t.decorators=[{type:r.Component,args:[{selector:"ngx-auth-firebaseui-login",template:'\n    <div id="login" fxLayout="column">\n\n      <div id="login-form-wrapper" fxLayout="column" fxLayoutAlign="center center">\n\n        <div id="login-form" [@animateStagger]="{ value: \'50\' }">\n\n          <div *ngIf="logoUrl" class="logo">\n            <img [src]="logoUrl" alt="logo" [@animate]="{ value: \'*\', params: { x: \'50px\' } }">\n          </div>\n\n          <div class="title" [@animate]="{ value: \'*\', params: { x: \'-50px\' } }">{{titleText}}</div>\n\n          <form name="loginForm" [formGroup]="loginForm" novalidate\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}">\n\n            <mat-form-field [appearance]="appearance" [@animate]="{ value: \'*\', params: { x: \'50px\' } }">\n              <input matInput [placeholder]="emailText" formControlName="email">\n              <mat-icon matSuffix [color]="color">email</mat-icon>\n              <mat-error *ngIf="loginForm.get(\'email\')?.hasError(\'required\')">\n                {{emailErrorRequiredText}}\n              </mat-error>\n              <mat-error\n                *ngIf="!loginForm.get(\'email\')?.hasError(\'required\') &&\n                                    loginForm.get(\'email\')?.hasError(\'email\')">\n                {{emailErrorPatternText}}\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field [appearance]="appearance" [@animate]="{ value: \'*\', params: { x: \'50px\' } }">\n              <input matInput type="password" [placeholder]="passwordText" formControlName="password">\n              <mat-icon matSuffix [color]="color">lock</mat-icon>\n              <mat-error>\n                {{passwordErrorRequiredText}}\n              </mat-error>\n            </mat-form-field>\n\n            <div class="remember-forgot-password"\n                 fxLayout="row" fxLayout.xs="column"\n                 fxLayoutAlign="space-between center"\n                 [@animate]="{ value: \'*\', params: { x: \'50px\' } }">\n    \x3c!--          <mat-checkbox class="remember-me" aria-label="Remember Me">--\x3e\n    \x3c!--            {{rememberMeText}}--\x3e\n    \x3c!--          </mat-checkbox>--\x3e\n\n              <button *ngIf="resetPasswordEnabled"\n                      [@animate]="{ value: \'*\', params: { x: \'-50px\' } }"\n                      mat-button\n                      class="forgot-password"\n                      [color]="color"\n                      type="button"\n                      (click)="onResetPasswordRequested.emit()">\n                {{forgotPasswordText}}\n              </button>\n            </div>\n\n            <button mat-raised-button\n                    id="loginButton"\n                    [color]="colorAccent"\n                    class="submit-button"\n                    aria-label="LOG IN"\n                    [disabled]="loginForm.invalid"\n                    (click)="login()">\n              {{loginButtonText}}\n            </button>\n\n          </form>\n\n          <div *ngIf="providers.length > 0"\n               class="separator"\n               [@animate]="{ value: \'*\', params: { z: \'50px\', delay: \'50ms\', scale: \'0.2\' } }">\n            <span class="text">{{orLabelText}}</span>\n          </div>\n\n          <ngx-auth-firebaseui-providers layout="column"\n                                         fxLayoutAlign="center center"\n                                         theme="raised"\n                                         [providers]="providers"></ngx-auth-firebaseui-providers>\n\n          <div *ngIf="registrationEnabled"\n               [@animateStagger]="{ value: \'100\' }"\n               class="register"\n               fxLayout="column" fxLayoutAlign="center center">\n            <span class="text" [@animate]="{ value: \'*\', params: { x: \'100px\' } }">\n              {{dontHaveAnAccountText}}\n            </span>\n            <button [@animate]="{ value: \'*\', params: { x: \'-100px\' } }"\n                    mat-button\n                    id="createAccountButton"\n                    [color]="color"\n                    type="button"\n                    (click)="onCreateAccountRequested.emit()">{{createAccountButtonText}}</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  ',styles:['\n    ngx-auth-firebaseui-login #login-form-wrapper{-webkit-box-flex:1;flex:1 0 auto;padding:32px}@media screen and (max-width:599px){ngx-auth-firebaseui-login #login-form-wrapper{padding:16px}}ngx-auth-firebaseui-login #login-form-wrapper #login-form{width:384px;max-width:384px;padding:32px;text-align:center}@media screen and (max-width:599px){ngx-auth-firebaseui-login #login-form-wrapper #login-form{padding:24px;width:100%}}ngx-auth-firebaseui-login #login-form-wrapper #login-form .logo{width:150px;height:150px;margin:32px auto}ngx-auth-firebaseui-login #login-form-wrapper #login-form .title{font-size:20px;margin:16px 0 32px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form{width:100%;text-align:left}ngx-auth-firebaseui-login #login-form-wrapper #login-form form mat-form-field{width:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form form mat-checkbox{margin:0}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .remember-forgot-password{font-size:13px;margin-top:8px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .remember-forgot-password .remember-me{margin-bottom:16px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .remember-forgot-password .forgot-password{font-size:13px;font-weight:500;margin-bottom:16px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .submit-button{width:220px;margin:16px auto;display:block}@media screen and (max-width:599px){ngx-auth-firebaseui-login #login-form-wrapper #login-form form .submit-button{width:90%}}ngx-auth-firebaseui-login #login-form-wrapper #login-form .register{margin:32px auto 24px;font-weight:500}ngx-auth-firebaseui-login #login-form-wrapper #login-form .register .text{margin-right:8px}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator{font-size:15px;font-weight:600;margin:24px auto;position:relative;overflow:hidden;width:100px}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text{display:-webkit-inline-box;display:inline-flex;position:relative;padding:0 8px;z-index:9999}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:after,ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:before{content:"";display:block;width:30px;position:absolute;top:10px;border-top:1px solid}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:before{right:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:after{left:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form button.facebook-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.github-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.google-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.microsoft-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.twitter-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.yahoo-raised{width:192px;text-transform:none;color:#fff;font-size:13px;margin-bottom:8px}@media screen and (max-width:599px){ngx-auth-firebaseui-login #login-form-wrapper #login-form button{width:80%}}\n  '],encapsulation:r.ViewEncapsulation.None,animations:X}]}],t.ctorParameters=function(){return[{type:Object,decorators:[{type:r.Inject,args:[r.PLATFORM_ID]}]},{type:$},{type:n.FormBuilder}]},t.propDecorators={logoUrl:[{type:r.Input}],providers:[{type:r.Input}],appearance:[{type:r.Input}],registrationEnabled:[{type:r.Input}],resetPasswordEnabled:[{type:r.Input}],messageOnAuthSuccess:[{type:r.Input}],messageOnAuthError:[{type:r.Input}],titleText:[{type:r.Input}],rememberMeText:[{type:r.Input}],loginButtonText:[{type:r.Input}],orLabelText:[{type:r.Input}],forgotPasswordText:[{type:r.Input}],dontHaveAnAccountText:[{type:r.Input}],createAccountButtonText:[{type:r.Input}],emailText:[{type:r.Input}],emailErrorRequiredText:[{type:r.Input}],emailErrorPatternText:[{type:r.Input}],passwordText:[{type:r.Input}],passwordErrorRequiredText:[{type:r.Input}],onSuccess:[{type:r.Output}],onError:[{type:r.Output}],onCreateAccountRequested:[{type:r.Output}],onResetPasswordRequested:[{type:r.Output}]},t}(),tt=function(t,e,r,n){return new(r||(r=Promise))(function(a,o){function i(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){t.done?a(t.value):new r(function(e){e(t.value)}).then(i,s)}u((n=n.apply(t,e||[])).next())})},et=function(t,e){var r,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(t,i)}catch(t){o=[6,t],n=0}finally{r=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},rt=function(t){if(!t.parent||!t)return null;var e=t.parent.get("password"),r=t.parent.get("passwordConfirm");return e&&r?""===r.value?null:e.value===r.value?null:{passwordsNotMatching:!0}:null},nt=function(){function t(t,e,n){this.platformId=t,this._formBuilder=e,this.authProcess=n,this.titleText="CREATE AN ACCOUNT",this.readAncAcceptText="I read and accept",this.termsAndConditionsText="terms and conditions",this.createAccountButtonText="CREATE AN ACCOUNT",this.alreadyHaveAccountText="Already have an account?",this.loginButtonText="LOGIN",this.nameText="Name",this.nameErrorRequiredText="Name is required",this.emailText="Email",this.emailErrorRequiredText="Email is required",this.emailErrorPatternText="Please enter a valid email address",this.passwordText="Password",this.passwordErrorRequiredText="Password is required",this.passwordConfirmationText="Password Confirmation",this.passwordConfirmationErrorRequiredText="Password confirmation is required",this.passwordErrorMatchText="Password must match",this.onLoginRequested=new r.EventEmitter,this.authenticationError=!1,this._unsubscribeAll=new S.Subject,this.onSuccess=n.onSuccessEmitter,this.onError=n.onErrorEmitter}return Object.defineProperty(t.prototype,"color",{get:function(){return this.authenticationError?"warn":"primary"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"colorAccent",{get:function(){return this.authenticationError?"warn":"accent"},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){var t=this;e.isPlatformBrowser(this.platformId)&&(this.onErrorSubscription=this.onError.subscribe(function(){return t.authenticationError=!0})),this.registerForm=this._formBuilder.group({name:["",n.Validators.required],email:["",[n.Validators.required,n.Validators.email]],password:["",n.Validators.required],passwordConfirm:["",[n.Validators.required,rt]]}),this.registerForm.controls.password.valueChanges.pipe(U.takeUntil(this._unsubscribeAll)).subscribe(function(){t.registerForm.controls.passwordConfirm.updateValueAndValidity()})},t.prototype.ngOnDestroy=function(){this._unsubscribeAll.next(),this._unsubscribeAll.complete()},t.prototype.createAccount=function(){return tt(this,void 0,void 0,function(){return et(this,function(t){switch(t.label){case 0:return[4,this.authProcess.signUp(this.registerForm.controls.name.value,{email:this.registerForm.controls.email.value,password:this.registerForm.controls.password.value})];case 1:return[2,t.sent()]}})})},t.decorators=[{type:r.Component,args:[{selector:"ngx-auth-firebaseui-register",template:'\n    <div id="register" fxLayout="column">\n\n      <div id="register-form-wrapper" fxLayout="column" fxLayoutAlign="center center">\n\n        <div id="register-form" [@animateStagger]="{ value: \'50\' }">\n\n          <div *ngIf="logoUrl" class="logo">\n            <img [src]="logoUrl" alt="logo" [@animate]="{ value: \'*\', params: { x: \'50px\' } }">\n          </div>\n\n          <div class="title" [@animate]="{ value: \'*\', params: { x: \'-50px\' } }">{{titleText}}</div>\n\n          <form [formGroup]="registerForm" name="registerForm" novalidate\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}">\n\n            <mat-form-field [appearance]="appearance" [@animate]="{ value: \'*\', params: { x: \'50px\' } }">\n              <input formControlName="name" matInput [placeholder]="nameText"/>\n              <mat-icon matSuffix [color]="color">person</mat-icon>\n              <mat-error>\n                {{nameErrorRequiredText}}\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field [appearance]="appearance" [@animate]="{ value: \'*\', params: { x: \'50px\' } }">\n              <input formControlName="email" matInput [placeholder]="emailText"/>\n              <mat-icon matSuffix [color]="color">email</mat-icon>\n              <mat-error *ngIf="registerForm.get(\'email\')?.hasError(\'required\')">\n                {{emailErrorRequiredText}}\n              </mat-error>\n              <mat-error *ngIf="registerForm.get(\'email\')?.hasError(\'email\')">\n                {{emailErrorPatternText}}\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field [appearance]="appearance" [@animate]="{ value: \'*\', params: { x: \'50px\' } }">\n              <input formControlName="password" matInput [placeholder]="passwordText" type="password"/>\n              <mat-icon matSuffix [color]="color">lock</mat-icon>\n              <mat-error>\n                {{passwordErrorRequiredText}}\n              </mat-error>\n            </mat-form-field>\n\n            <mat-form-field [appearance]="appearance" [@animate]="{ value: \'*\', params: { x: \'50px\' } }">\n              <input formControlName="passwordConfirm" matInput [placeholder]="passwordConfirmationText" type="password"/>\n              <mat-icon matSuffix [color]="color">lock</mat-icon>\n              <mat-error *ngIf="registerForm.get(\'passwordConfirm\')?.hasError(\'required\')">\n                {{passwordConfirmationErrorRequiredText}}\n              </mat-error>\n              <mat-error\n                *ngIf="\n                  !registerForm.get(\'passwordConfirm\')?.hasError(\'required\') &&\n                  registerForm.get(\'passwordConfirm\')?.hasError(\'passwordsNotMatching\')\n                ">\n                {{passwordErrorMatchText}}\n              </mat-error>\n            </mat-form-field>\n\n            \x3c!--        <div *ngIf="this.tosUrl || this.privacyPolicyUrl"--\x3e\n            \x3c!--        <div--\x3e\n            \x3c!--          class="terms"--\x3e\n            \x3c!--          fxLayout="row" fxLayoutAlign="center center"--\x3e\n            \x3c!--          [@animate]="{value:\'*\',params:{duration:\'250ms\',y:\'100px\'}}">--\x3e\n            \x3c!--          <mat-checkbox aria-label="I read and accept" name="terms" required>--\x3e\n            \x3c!--            <span>{{readAncAcceptText}}</span>--\x3e\n            \x3c!--            <span>&nbsp;</span>--\x3e\n            \x3c!--            <a target="_blank"--\x3e\n            \x3c!--               [href]="this.tosUrl">--\x3e\n            \x3c!--              Terms of Service and Conditions--\x3e\n            \x3c!--            </a>--\x3e\n            \x3c!--          </mat-checkbox>--\x3e\n            \x3c!--        </div>--\x3e\n\n            <button mat-raised-button\n                    id="createAccountButton"\n                    class="submit-button"\n                    aria-label="CREATE AN ACCOUNT"\n                    [color]="colorAccent"\n                    [disabled]="registerForm.invalid"\n                    (click)="createAccount()">\n              {{createAccountButtonText}}\n            </button>\n          </form>\n\n          <div class="register" fxLayout="column" fxLayoutAlign="center center"\n               [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}">\n            <span class="text" [@animate]="{ value: \'*\', params: { x: \'100px\' } }">\n              {{alreadyHaveAccountText}}\n            </span>\n            <button mat-button\n                    id="loginButton"\n                    type="button"\n                    [color]="colorAccent"\n                    (click)="onLoginRequested.emit()"\n                    [@animate]="{ value: \'*\', params: { x: \'-100px\' } }">\n              {{loginButtonText}}\n            </button>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  ',styles:['\n    ngx-auth-firebaseui-register #register{width:100%;background-size:cover}ngx-auth-firebaseui-register #register #register-form-wrapper{-webkit-box-flex:1;flex:1 0 auto;padding:32px}@media screen and (max-width:599px){ngx-auth-firebaseui-register #register #register-form-wrapper{padding:16px}}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form{width:384px;max-width:384px;padding:32px;text-align:center}@media screen and (max-width:599px){ngx-auth-firebaseui-register #register #register-form-wrapper #register-form{padding:24px;width:100%}}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .logo{width:128px;margin:32px auto}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .title{font-size:20px;margin:16px 0 32px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form{width:100%;text-align:left}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form mat-form-field{width:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form mat-checkbox{margin:0}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .terms{margin:16px 0 32px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .terms a{font-size:16px;margin-left:4px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .submit-button{width:220px;margin:16px auto;display:block}@media screen and (max-width:599px){ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .submit-button{width:90%}}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .register{margin:32px auto 24px;font-weight:500}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .register .text{margin-right:8px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator{font-size:15px;font-weight:600;margin:24px auto;position:relative;overflow:hidden;width:100px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text{display:-webkit-inline-box;display:inline-flex;position:relative;padding:0 8px;z-index:9999}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:after,ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:before{content:"";display:block;width:30px;position:absolute;top:10px;border-top:1px solid}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:before{right:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:after{left:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.facebook,ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.google{width:192px;text-transform:none;color:#fff;font-size:13px}@media screen and (max-width:599px){ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button{width:80%}}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.google{background-color:#d73d32;margin-bottom:8px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.facebook{background-color:#3f5c9a}ngx-auth-firebaseui-register ::ng-deep .mat-checkbox-label{display:-webkit-box;display:flex;flex-wrap:wrap}\n  '],encapsulation:r.ViewEncapsulation.None,animations:X}]}],t.ctorParameters=function(){return[{type:Object,decorators:[{type:r.Inject,args:[r.PLATFORM_ID]}]},{type:n.FormBuilder},{type:$}]},t.propDecorators={logoUrl:[{type:r.Input}],appearance:[{type:r.Input}],tosUrl:[{type:r.Input}],privacyPolicyUrl:[{type:r.Input}],titleText:[{type:r.Input}],readAncAcceptText:[{type:r.Input}],termsAndConditionsText:[{type:r.Input}],createAccountButtonText:[{type:r.Input}],alreadyHaveAccountText:[{type:r.Input}],loginButtonText:[{type:r.Input}],nameText:[{type:r.Input}],nameErrorRequiredText:[{type:r.Input}],emailText:[{type:r.Input}],emailErrorRequiredText:[{type:r.Input}],emailErrorPatternText:[{type:r.Input}],passwordText:[{type:r.Input}],passwordErrorRequiredText:[{type:r.Input}],passwordConfirmationText:[{type:r.Input}],passwordConfirmationErrorRequiredText:[{type:r.Input}],passwordErrorMatchText:[{type:r.Input}],onSuccess:[{type:r.Output}],onError:[{type:r.Output}],onLoginRequested:[{type:r.Output}]},t}(),at=function(){function t(t,e){this.dialogRef=t,this.data=e,this._disableConfirmActionButton=!1}return Object.defineProperty(t.prototype,"disableConfirmActionButton",{get:function(){return this.data.tosUrl&&this.data.privacyPolicyUrl?this._disableConfirmActionButton=!(this.checkTOS&&this.checkPrivacyPolicy):this.data.tosUrl&&!this.data.privacyPolicyUrl?this._disableConfirmActionButton=!this.checkTOS:!this.data.tosUrl&&this.data.privacyPolicyUrl&&(this._disableConfirmActionButton=!this.checkPrivacyPolicy),this._disableConfirmActionButton},enumerable:!0,configurable:!0}),t.prototype.closeDialog=function(){var t={checked:!this.disableConfirmActionButton,authProvider:this.data.authProvider};this.dialogRef.close(t)},t.decorators=[{type:r.Component,args:[{selector:"ngx-auth-firebaseui-legality-dialog",template:'\n    <h1 matDialogTitle>Legal requirements</h1>\n\n    <mat-dialog-content>\n      <div fxLayout="column" fxLayoutAlign="start">\n        <mat-checkbox *ngIf="this.data.tosUrl" [(ngModel)]="checkTOS">\n          I agree to the\n          <span>&nbsp;</span>\n          <a target="_blank"\n             [href]="this.data.tosUrl">\n            Terms of Service and Conditions\n          </a>\n        </mat-checkbox>\n\n        <mat-checkbox *ngIf="this.data.privacyPolicyUrl"\n                      [(ngModel)]="checkPrivacyPolicy">\n          I have read and agree to the\n          <span>&nbsp;</span>\n          <a target="_blank"\n             [href]="this.data.privacyPolicyUrl">\n            Privacy\n          </a>\n        </mat-checkbox>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n      <button id="decline-action"\n              mat-raised-button\n              matDialogClose\n              color="warn">Decline</button>\n      <button id="confirm-action"\n              mat-raised-button\n              color="primary"\n              [disabled]="disableConfirmActionButton"\n              (click)="closeDialog()">Confirm\n      </button>\n    </mat-dialog-actions>\n  ',styles:["\n    ::ng-deep .mat-checkbox-label{display:-webkit-box;display:flex;flex-wrap:wrap}mat-dialog-content div{margin-top:1.5rem}mat-dialog-actions{margin-top:1rem}\n  "]}]}],t.ctorParameters=function(){return[{type:E.MatDialogRef},{type:void 0,decorators:[{type:r.Inject,args:[E.MAT_DIALOG_DATA]}]}]},t}(),ot={DEFAULT:"default",CLASSIC:"classic",STROKED:"stroked",FAB:"fab",MINI_FAB:"mini-fab",RAISED:"raised"},it={ROW:"row",COLUMN:"column"},st=function(){function t(t){this.authProcess=t,this.layout=it.ROW,this.providers=H.ALL,this.themes=ot,this.authProvider=H,this.onSuccess=t.onSuccessEmitter,this.onError=t.onErrorEmitter}return t.decorators=[{type:r.Component,args:[{selector:"ngx-auth-firebaseui-providers",template:'\n    <div [ngSwitch]="theme" [@animateStagger]="{ value: \'50\' }">\n\n      \x3c!--default icon buttons--\x3e\n      <div *ngSwitchDefault\n           [fxLayout]="layout"\n           fxLayout.xs="column"\n           [fxLayoutAlign]="layout == \'row\' ? \'space-around center\' : \'stretch\'">\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Google)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-button\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Google)">\n          <mat-icon svgIcon="google-colored"></mat-icon>\n          Google\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Facebook)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-button\n                class="facebook-filled"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Facebook)">\n          <mat-icon svgIcon="facebook"></mat-icon>\n          Facebook\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Twitter)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-button\n                class="twitter-filled"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Twitter)">\n          <mat-icon svgIcon="twitter"></mat-icon>\n          Twitter\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Github)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-button\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Github)">\n          <mat-icon svgIcon="github"></mat-icon>\n          GitHub\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Microsoft)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-button\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Microsoft)">\n          <mat-icon svgIcon="microsoft"></mat-icon>\n          Microsoft\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Yahoo)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-button\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Yahoo)">\n          <mat-icon svgIcon="yahoo"></mat-icon>\n          Yahoo\n        </button>\n      </div>\n\n      \x3c!--classic--\x3e\n      <div *ngSwitchCase="themes.CLASSIC"\n           class="buttons-classic"\n           [fxLayout]="layout"\n           fxLayout.xs="column"\n           [fxLayoutAlign]="layout == \'row\' ? \'space-around center\' : \'stretch\'">\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Google)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-button\n                class="google-classic"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Google)">\n          Google\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Facebook)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-button\n                class="facebook-classic"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Facebook)">\n          Facebook\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Twitter)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-button\n                class="twitter-classic"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Twitter)">\n          Twitter\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Github)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-button\n                class="github-classic"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Github)">\n          GitHub\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Microsoft)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-button\n                class="microsoft-classic"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Microsoft)">\n          Microsoft\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Yahoo)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-button\n                class="yahoo-classic"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Yahoo)">\n          Yahoo\n        </button>\n      </div>\n\n      \x3c!--stroked--\x3e\n      <div *ngSwitchCase="themes.STROKED"\n           class="buttons-classic"\n           [fxLayout]="layout"\n           fxLayout.xs="column"\n           [fxLayoutAlign]="layout == \'row\' ? \'space-around center\' : \'stretch\'">\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Google)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-stroked-button\n                class="google-classic"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Google)">\n          Google\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Facebook)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-stroked-button\n                class="facebook-classic"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Facebook)">\n          Facebook\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Twitter)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-stroked-button\n                class="twitter-classic"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Twitter)">\n          Twitter\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Github)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-stroked-button\n                class="github-classic"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Github)">\n          GitHub\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Microsoft)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-stroked-button\n                class="microsoft-classic"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Microsoft)">\n          Microsoft\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Yahoo)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-stroked-button\n                class="yahoo-classic"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Yahoo)">\n          Yahoo\n        </button>\n      </div>\n\n      \x3c!--raised--\x3e\n      <div *ngSwitchCase="themes.RAISED"\n           class="buttons-raised"\n           [fxLayout]="layout"\n           fxLayout.xs="column"\n           [fxLayoutAlign]="layout == \'row\' ? \'space-around center\' : \'stretch\'">\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Google)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-raised-button\n                class="google-raised"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Google)">\n          Google\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Facebook)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-raised-button\n                class="facebook-raised"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Facebook)">\n          Facebook\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Twitter)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-raised-button\n                class="twitter-raised"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Twitter)">\n          Twitter\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Github)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-raised-button\n                class="github-raised"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Github)">\n          GitHub\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Microsoft)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-raised-button\n                class="microsoft-raised"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Microsoft)">\n          Microsoft\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Yahoo)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-raised-button\n                class="yahoo-raised"\n                [ngClass.xs]="{\'space-full-xs\':true}"\n                (click)="authProcess.signInWith(authProvider.Yahoo)">\n          Yahoo\n        </button>\n      </div>\n\n      \x3c!--fab--\x3e\n      <div *ngSwitchCase="themes.FAB"\n           class="buttons-raised"\n           [fxLayout]="layout"\n           [fxLayoutAlign]="layout == \'row\' ? \'space-around center\' : \'stretch\'">\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Google)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-fab\n                class="google-raised"\n                (click)="authProcess.signInWith(authProvider.Google)">\n          <mat-icon svgIcon="google"></mat-icon>\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Facebook)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-fab\n                class="facebook-raised"\n                (click)="authProcess.signInWith(authProvider.Facebook)">\n          <mat-icon svgIcon="facebook"></mat-icon>\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Twitter)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-fab\n                class="twitter-raised"\n                (click)="authProcess.signInWith(authProvider.Twitter)">\n          <mat-icon svgIcon="twitter"></mat-icon>\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Github)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-fab\n                class="github-raised"\n                (click)="authProcess.signInWith(authProvider.Github)">\n          <mat-icon svgIcon="github"></mat-icon>\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Microsoft)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-fab\n                class="microsoft"\n                (click)="authProcess.signInWith(authProvider.Microsoft)">\n          <mat-icon svgIcon="microsoft"></mat-icon>\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Yahoo)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-fab\n                class="yahoo-raised"\n                (click)="authProcess.signInWith(authProvider.Yahoo)">\n          <mat-icon svgIcon="yahoo"></mat-icon>\n        </button>\n      </div>\n\n      \x3c!--mini-fab--\x3e\n      <div *ngSwitchCase="themes.MINI_FAB"\n           class="buttons-raised"\n           [fxLayout]="layout"\n           fxLayoutAlign.xs="center center"\n           [fxLayoutAlign]="layout == \'row\' ? \'space-around center\' : \'stretch\'">\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Google)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-mini-fab\n                class="google-raised"\n                fxFlexAlign="center"\n                (click)="authProcess.signInWith(authProvider.Google)">\n          <mat-icon svgIcon="google"></mat-icon>\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Facebook)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-mini-fab\n                class="facebook-raised"\n                (click)="authProcess.signInWith(authProvider.Facebook)">\n          <mat-icon svgIcon="facebook"></mat-icon>\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Twitter)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-mini-fab\n                class="twitter-raised"\n                (click)="authProcess.signInWith(authProvider.Twitter)">\n          <mat-icon svgIcon="twitter" class="icon-white"></mat-icon>\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Github)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-mini-fab\n                class="github-raised"\n                (click)="authProcess.signInWith(authProvider.Github)">\n          <mat-icon svgIcon="github"></mat-icon>\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Microsoft)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-mini-fab\n                class="microsoft"\n                (click)="authProcess.signInWith(authProvider.Microsoft)">\n          <mat-icon svgIcon="microsoft"></mat-icon>\n        </button>\n        <button *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Yahoo)"\n                [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                mat-mini-fab\n                class="yahoo-raised"\n                (click)="authProcess.signInWith(authProvider.Yahoo)">\n          <mat-icon svgIcon="yahoo"></mat-icon>\n        </button>\n      </div>\n    </div>\n  ',styles:["\n    :host{display:block}:host .mat-icon{vertical-align:inherit}.space-full-xs{width:100%;margin:.4rem}.facebook-filled mat-icon{fill:#385899}.twitter-filled mat-icon{fill:#1da1f2}.buttons-raised button{color:#fff!important}.buttons-raised .google-raised{background-color:#db4437}.buttons-raised .facebook-raised{background-color:#385899}.buttons-raised .twitter-raised{background-color:#1da1f2}.buttons-raised .github-raised{background-color:#000}.buttons-raised .microsoft-raised{background-color:#0078d4}.buttons-raised .yahoo-raised{background-color:#720e9e}.buttons-raised .phone-raised{background-color:#02bd7e}.buttons-classic button.google-classic{color:#db4437!important}.buttons-classic .facebook-classic{color:#385899!important}.buttons-classic .twitter-classic{color:#1da1f2!important}.buttons-classic .github-classic{color:#000!important}.buttons-classic .microsoft-classic{color:#0078d4!important}.buttons-classic .yahoo-classic{color:#720e9e!important}.buttons-classic .phone-classic{color:#02bd7e}.icon-white{color:#fff}.icon-white mat-icon{fill:#fff}button.microsoft{background:#f8f9fa}\n  "],animations:X}]}],t.ctorParameters=function(){return[{type:$}]},t.propDecorators={theme:[{type:r.Input}],layout:[{type:r.Input}],providers:[{type:r.Input}],onSuccess:[{type:r.Output}],onError:[{type:r.Output}]},t}(),ut=function(t,e,r,n){return new(r||(r=Promise))(function(a,o){function i(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){t.done?a(t.value):new r(function(e){e(t.value)}).then(i,s)}u((n=n.apply(t,e||[])).next())})},lt=function(t,e){var r,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(t,i)}catch(t){o=[6,t],n=0}finally{r=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},ct=new RegExp(['^(([^<>()[\\]\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\.,;:\\s@"]+)*)','|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.',"[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+","[a-zA-Z]{2,}))$"].join("")),mt=new RegExp(/^\+(?:[0-9] ?){6,14}[0-9]$/),pt=function(){function t(t,e,n,a,o,i,s){this.platformId=t,this.auth=e,this.authProcess=n,this.dialog=a,this.config=o,this._activatedRoute=i,this._cdr=s,this.providers=H.ALL,this.registrationEnabled=!0,this.resetPasswordEnabled=!0,this.guestEnabled=!0,this.selectedTabChange=new r.EventEmitter,this.enableLengthRule=!0,this.enableLowerCaseLetterRule=!0,this.enableUpperCaseLetterRule=!0,this.enableDigitRule=!0,this.enableSpecialCharRule=!0,this.onStrengthChanged=new r.EventEmitter,this.resetPasswordTabText="Reset e-mail address to password",this.resetPasswordInputText="Reset e-mail address to password",this.resetPasswordErrorRequiredText="E-mail is required to reset the password!",this.resetPasswordErrorPatternText="Please enter a valid e-mail address",this.resetPasswordActionButtonText="Reset",this.resetPasswordInstructionsText="Reset requested. Check your e-mail instructions.",this.signInTabText="Sign in",this.signInCardTitleText="Signing in",this.loginButtonText="Log In",this.forgotPasswordButtonText="Forgot Password ?",this.nameText="Name",this.nameErrorRequiredText="Name is required",this.nameErrorMinLengthText="The name is too short!",this.nameErrorMaxLengthText="The name is too long!",this.emailText="E-mail",this.emailErrorRequiredText="E-mail is required",this.emailErrorPatternText="Please enter a valid e-mail address",this.passwordText="Password",this.passwordErrorRequiredText="Password is required",this.passwordErrorMinLengthText="The password is too short!",this.passwordErrorMaxLengthText="The password is too long!",this.registerTabText="Register",this.registerCardTitleText="Registration",this.registerButtonText="Register",this.guestButtonText="continue as guest",this.emailConfirmationTitle="Confirm your e-mail address!",this.emailConfirmationText='A confirmation e-mail has been sent to you. Check your inbox and click on the link "Confirm my e-mail" to confirm your e-mail address.',this.authProvider=H,this.authenticationError=!1,this.passReset=!1,this.authProviders=H,this.onSuccess=n.onSuccessEmitter,this.onError=n.onErrorEmitter}return t.prototype.ngOnInit=function(){var t=this;e.isPlatformBrowser(this.platformId)&&(this.onErrorSubscription=this.onError.subscribe(function(){return t.authenticationError=!0})),this.min=null!=this.min?Math.max(this.min,this.config.passwordMinLength):this.config.passwordMinLength,this.max=null!=this.max?Math.min(this.max,this.config.passwordMaxLength):this.config.passwordMaxLength,this.goBackURL=this.chooseBackUrl(),this.updateAuthSnackbarMessages(),this._initSignInFormGroupBuilder(),this._initSignUpFormGroupBuilder(),this._initResetPasswordFormGroupBuilder()},t.prototype.ngAfterViewInit=function(){var t=this;this.passwordStrength&&this.passwordStrength.onStrengthChanged.subscribe(function(e){t.onStrengthChanged.emit(e)})},t.prototype.ngOnChanges=function(t){(t.messageOnAuthSuccess||t.messageOnAuthError)&&this.updateAuthSnackbarMessages(),t.min&&(this.min=null!=this.min?Math.max(this.min,this.config.passwordMinLength):this.config.passwordMinLength),t.max&&(this.max=null!=this.max?Math.min(this.max,this.config.passwordMaxLength):this.config.passwordMaxLength),t.goBackURL&&(this.goBackURL=this.chooseBackUrl())},t.prototype.ngOnDestroy=function(){this.onErrorSubscription&&this.onErrorSubscription.unsubscribe()},t.prototype.onTabChange=function(t){this.selectedTabChange.emit(t),this.tabIndex=t.index},t.prototype.signOut=function(){return ut(this,void 0,void 0,function(){return lt(this,function(t){switch(t.label){case 0:return t.trys.push([0,,2,3]),this.isLoading=!0,this._cdr.markForCheck(),[4,this.authProcess.signOut()];case 1:return t.sent(),[3,3];case 2:return this.isLoading=!1,this._cdr.markForCheck(),[7];case 3:return[2]}})})},t.prototype.signIn=function(){return ut(this,void 0,void 0,function(){return lt(this,function(t){switch(t.label){case 0:if(!this.signInFormGroup.valid)return[2];t.label=1;case 1:return t.trys.push([1,,3,4]),this.isLoading=!0,this._cdr.markForCheck(),[4,this.authProcess.signInWith(this.authProviders.EmailAndPassword,{email:this.signInFormGroup.value.email,password:this.signInFormGroup.value.password})];case 2:return t.sent(),[3,4];case 3:return this.isLoading=!1,this._cdr.markForCheck(),[7];case 4:return[2]}})})},Object.defineProperty(t.prototype,"color",{get:function(){return this.authenticationError?"warn":"primary"},enumerable:!0,configurable:!0}),t.prototype.updateAuthSnackbarMessages=function(){this.authProcess.messageOnAuthSuccess=this.messageOnAuthSuccess,this.authProcess.messageOnAuthError=this.messageOnAuthError},t.prototype.createForgotPasswordTab=function(){this.passwordResetWished=!0,this.tabIndex=2,this._cdr.markForCheck()},t.prototype.processLegalSignUP=function(t){var e=this;if(this.tosUrl||this.privacyPolicyUrl){var r={tosUrl:this.tosUrl,privacyPolicyUrl:this.privacyPolicyUrl,authProvider:t};this.dialogRef=this.dialog.open(at,{data:r}),this.dialogRef.afterClosed().subscribe(function(t){t&&t.checked&&e._afterSignUpMiddleware(t.authProvider).then(function(){return e.signUpFormGroup.reset()}),e.dialogRef=null})}else this._afterSignUpMiddleware(t).then(function(){return e.signUpFormGroup.reset()})},t.prototype.signUp=function(){return ut(this,void 0,void 0,function(){return lt(this,function(t){switch(t.label){case 0:return t.trys.push([0,,2,3]),this.isLoading=!0,this._cdr.markForCheck(),[4,this.authProcess.signUp(this.signUpFormGroup.value.name,{email:this.signUpFormGroup.value.email,password:this.signUpFormGroup.value.password})];case 1:return[2,t.sent()];case 2:return this.isLoading=!1,this._cdr.markForCheck(),[7];case 3:return[2]}})})},t.prototype.signUpAnonymously=function(){return ut(this,void 0,void 0,function(){return lt(this,function(t){switch(t.label){case 0:return t.trys.push([0,,2,3]),this.isLoading=!0,this._cdr.markForCheck(),[4,this.authProcess.signInWith(this.authProvider.ANONYMOUS)];case 1:return t.sent(),[3,3];case 2:return this.isLoading=!1,this._cdr.markForCheck(),[7];case 3:return[2]}})})},t.prototype.resetPassword=function(){var t=this;this.authProcess.resetPassword(this.resetPasswordEmailFormControl.value).then(function(){t.passReset=!0,t._cdr.markForCheck()})},t.prototype.chooseBackUrl=function(){return this._activatedRoute.snapshot.queryParams.redirectUrl||this.goBackURL||"/"},t.prototype._initSignInFormGroupBuilder=function(){this.signInFormGroup=new n.FormGroup({}),this.signInFormGroup.registerControl("email",this.signInEmailFormControl=new n.FormControl("",[n.Validators.required,n.Validators.pattern(ct)])),this.signInFormGroup.registerControl("password",this.sigInPasswordFormControl=new n.FormControl("",[n.Validators.required,n.Validators.minLength(this.min),n.Validators.maxLength(this.max)]))},t.prototype._initSignUpFormGroupBuilder=function(){this.signUpFormGroup=new n.FormGroup({name:this.sigUpNameFormControl=new n.FormControl("",[n.Validators.required,n.Validators.minLength(this.config.nameMinLength),n.Validators.maxLength(this.config.nameMaxLength)]),email:this.sigUpEmailFormControl=new n.FormControl("",[n.Validators.required,n.Validators.pattern(ct)]),password:this.sigUpPasswordFormControl=new n.FormControl("",[n.Validators.required,n.Validators.minLength(this.min),n.Validators.maxLength(this.max)])})},t.prototype._initResetPasswordFormGroupBuilder=function(){this.resetPasswordFormGroup=new n.FormGroup({email:this.resetPasswordEmailFormControl=new n.FormControl("",[n.Validators.required,n.Validators.pattern(ct)])})},t.prototype._afterSignUpMiddleware=function(t){return t===this.authProvider.ANONYMOUS?this.signUpAnonymously():this.signUp()},t.decorators=[{type:r.Component,args:[{selector:"ngx-auth-firebaseui",template:'\n    <ng-container *ngIf="authProcess.user$ | async as user; else showForm">\n\n      \x3c!-- This component will be shown when:\n        - we just sent a verification mail (notably after sign up)\n        - we arrived from the guard after trying to access a protected route even though we are connected\n      --\x3e\n      <div *ngIf="(config.guardProtectedRoutesUntilEmailIsVerified && !user.emailVerified) || (authProcess.emailConfirmationSent && !user.emailVerified); else signedInUser"\n           fxLayout="row" fxLayoutAlign="center center">\n          <ngx-auth-firebaseui-email-confirmation\n            [template]="verifyEmailTemplate"\n            [email]="user.email"\n            [goBackURL]="goBackURL"\n            [verifyEmailTitleText]="verifyEmailTitleText"\n            [verifyEmailConfirmationText]="verifyEmailConfirmationText"\n            [verifyEmailGoBackText]="verifyEmailGoBackText"\n            [sendNewVerificationEmailText]="sendNewVerificationEmailText"\n            [signOutText]="signOutText"\n            [messageOnEmailConfirmationSuccess]="messageOnEmailConfirmationSuccess"\n            (signOut)="signOut()">\n        </ngx-auth-firebaseui-email-confirmation>\n      </div>\n\n      <ng-template #signedInUser>\n          <div class="signed-in-container" fxLayout="column" fxLayoutAlign="center center">\n            <img class="account-circle" *ngIf="user.photoURL; else noPhoto" [src]="user.photoURL">\n            <ng-template #noPhoto><mat-icon class="account-circle">account_circle</mat-icon></ng-template>\n            <div class="user-display-name mat-title">{{ user.displayName }}</div>\n            <div class="user-email mat-body-2">{{ user.email }}</div>\n            <div class="actions">\n              <mat-progress-bar *ngIf="isLoading" mode="indeterminate"></mat-progress-bar>\n              <a mat-stroked-button class="go-back-button action-button" color="primary" [routerLink]="goBackURL">{{ verifyEmailGoBackText }}</a>\n              <button mat-stroked-button class="sign-out-button action-button" color="warn" (click)="signOut()">{{ signOutText }}</button>\n            </div>\n          </div>\n      </ng-template>\n\n    </ng-container>\n\n    <ng-template #showForm>\n      <mat-tab-group [color]="color" [selectedIndex]="tabIndex" (selectedTabChange)="onTabChange($event)">\n        \x3c!--Sign in tab--\x3e\n        <mat-tab [label]="signInTabText">\n          <mat-card>\n            <mat-card-title>{{signInCardTitleText}}</mat-card-title>\n            <mat-card-content>\n              <form  [@animateStagger]="{ value: \'50\' }"\n                     [formGroup]="signInFormGroup"\n                    (ngSubmit)="signIn()">\n                <div fxLayout="column" fxLayoutAlign="center">\n                  <mat-form-field [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                                  [appearance]="appearance">\n                    <mat-label>{{emailText}}</mat-label>\n                    <input matInput\n                          formControlName="email"\n                          required>\n                    <mat-icon matSuffix [color]="color">email</mat-icon>\n                    <mat-error *ngIf="signInEmailFormControl.hasError(\'required\')">\n                      {{emailErrorRequiredText}}\n                    </mat-error>\n                    <mat-error *ngIf="signInEmailFormControl.hasError(\'pattern\')">\n                      {{emailErrorPatternText}}\n                    </mat-error>\n                  </mat-form-field>\n\n                  <mat-form-field [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                                [appearance]="appearance">\n                    <mat-label>{{passwordText}}</mat-label>\n                    <input matInput [type]="togglePass.type" [minlength]="min" [maxlength]="max" formControlName="password"\n                          required/>\n                    <mat-pass-toggle-visibility #togglePass matSuffix></mat-pass-toggle-visibility>\n                    <mat-icon matSuffix [color]="color">lock</mat-icon>\n                    <mat-hint align="end" aria-live="polite"> {{ signInFormGroup.value.password.length }}\n                      / {{ max }} </mat-hint>\n                    <mat-error *ngIf="sigInPasswordFormControl.hasError(\'required\')">\n                      {{passwordErrorRequiredText}}\n                    </mat-error>\n                    <mat-error *ngIf="sigInPasswordFormControl.hasError(\'minlength\')">\n                      {{ passwordErrorMinLengthText }}\n                    </mat-error>\n                    <mat-error *ngIf="sigInPasswordFormControl.hasError(\'maxlength\')">\n                      {{ passwordErrorMaxLengthText }}\n                    </mat-error>\n                  </mat-form-field>\n\n                  <button [@animate]="{ value: \'*\', params: { x: \'50px\' } }"\n                        mat-raised-button\n                          style="margin-top: 20px"\n                          type="submit"\n                          class="space-top"\n                          [color]="color"\n                          [disabled]="signInFormGroup.invalid">\n                    {{loginButtonText}}\n                  </button>\n\n                </div>\n              </form>\n\n              <div fxLayoutAlign="center">\n                <button *ngIf="resetPasswordEnabled"\n                        [@animate]="{ value: \'*\', params: { x: \'-50px\' } }"\n                      mat-button\n                      class="space-top"\n                      [color]="color"\n                      (click)="createForgotPasswordTab()">\n                {{forgotPasswordButtonText}}\n              </button>\n            </div>\n\n            </mat-card-content>\n            <mat-card-footer *ngIf="isLoading">\n              <mat-progress-bar [@animate]="{ value: \'*\', params: { z: \'50px\', delay: \'50ms\', scale: \'0.2\' } }"\n                              mode="indeterminate"></mat-progress-bar>\n            </mat-card-footer>\n          </mat-card>\n        </mat-tab>\n\n        \x3c!--tab register--\x3e\n        <mat-tab [label]="registerTabText" *ngIf="registrationEnabled">\n          <mat-card>\n            <mat-card-title>{{registerCardTitleText}}</mat-card-title>\n              <mat-card-content fxLayout="column" fxLayoutAlign="center">\n                <form [@animateStagger]="{ value: \'50\' }"\n                    [formGroup]="signUpFormGroup" (ngSubmit)="signUpFormGroup.valid &&\n                processLegalSignUP(authProvider.EmailAndPassword)">\n                  <div fxLayout="column" fxLayoutAlign="center">\n                    \x3c!--name--\x3e\n                    <mat-form-field [@animate]="{ value: \'*\', params: { x: \'50px\' } }"\n                                  [appearance]="appearance">\n                      \x3c!--labels will work only with @angular/material@6.2.0 --\x3e\n                      <mat-label>{{nameText}}</mat-label>\n                      <input\n                        matInput\n                        [minlength]="config.nameMinLength"\n                        [maxlength]="config.nameMaxLength"\n                        [formControl]="sigUpNameFormControl"\n                        required\n                      />\n                      <mat-icon matSuffix [color]="color">person</mat-icon>\n                      <mat-hint align="end" aria-live="polite"> {{ signUpFormGroup.value.name?.length }}\n                        / {{ config.nameMaxLength }} </mat-hint>\n                      <mat-error *ngIf="sigUpNameFormControl.hasError(\'required\')">\n                        {{nameErrorRequiredText}}\n                      </mat-error>\n                      <mat-error *ngIf="sigUpNameFormControl.hasError(\'minlength\')">\n                        {{nameErrorMinLengthText}}\n                      </mat-error>\n                      <mat-error *ngIf="sigUpNameFormControl.hasError(\'maxlength\')">\n                        {{nameErrorMaxLengthText}}\n                      </mat-error>\n                    </mat-form-field>\n\n                    \x3c!--email--\x3e\n                    <mat-form-field [@animate]="{ value: \'*\', params: { x: \'50px\' } }"\n                                  [appearance]="appearance">\n                      <mat-label>{{emailText}}</mat-label>\n                      <input matInput\n                            type="email"\n                            [formControl]="sigUpEmailFormControl"\n                            required>\n                      <mat-icon matSuffix [color]="color">email</mat-icon>\n                      <mat-error *ngIf="sigUpEmailFormControl.hasError(\'required\')">\n                        {{emailErrorRequiredText}}\n                      </mat-error>\n                      <mat-error *ngIf="sigUpEmailFormControl.hasError(\'pattern\')">\n                        {{emailErrorPatternText}}\n                      </mat-error>\n                    </mat-form-field>\n\n                    \x3c!--password--\x3e\n                    <div fxLayout="column">\n                      <mat-form-field [@animate]="{ value: \'*\', params: { x: \'50px\' } }"\n                                    [appearance]="appearance">\n                        <mat-label>{{passwordText}}</mat-label>\n                        <input\n                          matInput\n                          [type]="toggle.type"\n                          name="password"\n                          [formControl]="sigUpPasswordFormControl"\n                          required\n                          [minlength]="min"\n                          [maxlength]="max"\n                        />\n                        <mat-pass-toggle-visibility #toggle matSuffix></mat-pass-toggle-visibility>\n\n                        <mat-icon matSuffix [color]="color">lock</mat-icon>\n\n                        <mat-hint align="end" aria-live="polite">\n                          {{signUpFormGroup.value.password?.length}} / {{ max }}\n                        </mat-hint>\n\n                        <mat-error *ngIf="sigUpPasswordFormControl.hasError(\'required\')" class="cut-text">\n                          {{passwordErrorRequiredText}}\n                        </mat-error>\n\n                        <mat-error *ngIf="sigUpPasswordFormControl.hasError(\'minlength\')" class="cut-text">\n                          {{ passwordErrorMinLengthText }}\n                        </mat-error>\n                        <mat-error *ngIf="sigUpPasswordFormControl.hasError(\'maxlength\')" class="cut-text">\n                          {{ passwordErrorMaxLengthText }}\n                        </mat-error>\n\n                      </mat-form-field>\n\n                      <mat-password-strength #passwordStrength\n                                            [min]="min"\n                                            [max]="max"\n                                            [customValidator]="customValidator"\n                                            [enableLengthRule]="enableLengthRule"\n                                            [enableLowerCaseLetterRule]="enableLowerCaseLetterRule"\n                                            [enableUpperCaseLetterRule]="enableUpperCaseLetterRule"\n                                            [enableDigitRule]="enableDigitRule"\n                                            [enableSpecialCharRule]="enableSpecialCharRule"\n                                            [password]="signUpFormGroup.value.password"\n                                            [externalError]="sigUpPasswordFormControl.dirty">\n                      </mat-password-strength>\n\n                    </div>\n\n                    <button [@animate]="{ value: \'*\', params: { x: \'100px\' } }"\n                          mat-raised-button\n                            style="margin-top: 20px"\n                            type="submit"\n                            [disabled]="signUpFormGroup.invalid"\n                            [color]="color">\n                      {{registerButtonText}}\n                    </button>\n\n                  </div>\n                </form>\n\n                <button *ngIf="guestEnabled"\n                        [@animate]="{ value: \'*\', params: { x: \'-100px\' } }"\n                      mat-button\n                      style="margin-top: 20px"\n                      [color]="color"\n                      (click)="processLegalSignUP(authProvider.ANONYMOUS)">\n                <mat-icon>fingerprint</mat-icon>\n                {{guestButtonText}}\n              </button>\n\n              </mat-card-content>\n\n              <mat-card-footer *ngIf="isLoading">\n                <mat-progress-bar [@animate]="{ value: \'*\', params: { z: \'50px\', delay: \'50ms\', scale: \'0.2\' } }"\n                                mode="indeterminate"></mat-progress-bar>\n              </mat-card-footer>\n\n          </mat-card>\n        </mat-tab>\n\n        \x3c!--Reset password tab--\x3e\n        <mat-tab *ngIf="passwordResetWished" class="reset-password-tab">\n          <ng-template mat-tab-label>\n            <button mat-icon-button class="reset-password-tab__close-button" (click)="passwordResetWished = false">\n              {{ resetPasswordTabText }}\n              <mat-icon>close</mat-icon>\n            </button>\n          </ng-template>\n          <form [@animateStagger]="{ value: \'50\' }"\n                [formGroup]="resetPasswordFormGroup"\n                (ngSubmit)="resetPasswordFormGroup.valid && resetPassword()">\n            <mat-card class="reset-password-card">\n              <mat-card-content>\n                <mat-form-field [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}" class="full-width"\n                                [appearance]="appearance">\n                  <mat-label> {{ resetPasswordInputText }} </mat-label>\n                  <input matInput\n                        [title]="resetPasswordInputText"\n                        formControlName="email"\n                        required>\n                  <mat-icon matSuffix [color]="color">email</mat-icon>\n                  <mat-error *ngIf="resetPasswordEmailFormControl.hasError(\'required\')">\n                    {{resetPasswordErrorRequiredText}}\n                  </mat-error>\n                  <mat-error *ngIf="resetPasswordEmailFormControl.hasError(\'pattern\')">\n                    {{resetPasswordErrorPatternText}}\n                  </mat-error>\n                </mat-form-field>\n                <p *ngIf="passReset">{{resetPasswordInstructionsText}}</p>\n              </mat-card-content>\n              <mat-card-actions fxLayoutAlign="center">\n                <mat-progress-bar *ngIf="isLoading" mode="indeterminate"></mat-progress-bar>\n                <button [@animate]="{ value: \'*\', params: { x: \'50px\' } }"\n                        mat-raised-button\n                        type="submit"\n                        [color]="color">\n                  {{resetPasswordActionButtonText}}\n                </button>\n              </mat-card-actions>\n            </mat-card>\n          </form>\n        </mat-tab>\n\n      </mat-tab-group>\n      <mat-divider></mat-divider>\n      <ngx-auth-firebaseui-providers *ngIf="tabIndex !== 2"\n                                     [providers]="providers"\n                                     [theme]="providersTheme">\n      </ngx-auth-firebaseui-providers>\n    </ng-template>\n  ',styles:["\n    .mat-card{margin:2rem}.space-top{margin-top:.5rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.signed-in-container .account-circle{font-size:12rem;width:12rem;height:12rem}.signed-in-container img.account-circle{-o-object-fit:cover;object-fit:cover;border-radius:50%}.signed-in-container .sign-out-button{margin-top:2rem}.signed-in-container .user-display-name{margin-top:1rem}.signed-in-container .user-email{margin-top:-1rem}.signed-in-container .actions{margin-top:2rem}.signed-in-container .actions .action-button,.signed-in-container .actions mat-progress-bar{width:100%}.signed-in-container .actions .action-button{margin-top:1rem}.reset-password-tab mat-progress-bar{margin-bottom:1rem}.reset-password-tab__close-button{width:100%;display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.reset-password-tab__close-button mat-icon{font-size:18px;position:relative;top:-1px}\n  "],animations:X,changeDetection:r.ChangeDetectionStrategy.OnPush}]}],t.ctorParameters=function(){return[{type:Object,decorators:[{type:r.Inject,args:[r.PLATFORM_ID]}]},{type:u.AngularFireAuth},{type:$},{type:E.MatDialog},{type:void 0,decorators:[{type:r.Inject,args:[r.forwardRef(function(){return St})]}]},{type:o.ActivatedRoute},{type:r.ChangeDetectorRef}]},t.propDecorators={matTabGroup:[{type:r.ViewChild,args:[E.MatTabGroup,{static:!1}]}],passwordStrength:[{type:r.ViewChild,args:[T.MatPasswordStrengthComponent,{static:!1}]}],providers:[{type:r.Input}],providersTheme:[{type:r.Input}],appearance:[{type:r.Input}],tabIndex:[{type:r.Input}],registrationEnabled:[{type:r.Input}],resetPasswordEnabled:[{type:r.Input}],guestEnabled:[{type:r.Input}],tosUrl:[{type:r.Input}],privacyPolicyUrl:[{type:r.Input}],goBackURL:[{type:r.Input}],messageOnAuthSuccess:[{type:r.Input}],messageOnAuthError:[{type:r.Input}],messageOnEmailConfirmationSuccess:[{type:r.Input}],onSuccess:[{type:r.Output}],onError:[{type:r.Output}],selectedTabChange:[{type:r.Output}],enableLengthRule:[{type:r.Input}],enableLowerCaseLetterRule:[{type:r.Input}],enableUpperCaseLetterRule:[{type:r.Input}],enableDigitRule:[{type:r.Input}],enableSpecialCharRule:[{type:r.Input}],min:[{type:r.Input}],max:[{type:r.Input}],customValidator:[{type:r.Input}],onStrengthChanged:[{type:r.Output}],verifyEmailTemplate:[{type:r.Input}],verifyEmailTitleText:[{type:r.Input}],verifyEmailConfirmationText:[{type:r.Input}],verifyEmailGoBackText:[{type:r.Input}],sendNewVerificationEmailText:[{type:r.Input}],signOutText:[{type:r.Input}],resetPasswordTabText:[{type:r.Input}],resetPasswordInputText:[{type:r.Input}],resetPasswordErrorRequiredText:[{type:r.Input}],resetPasswordErrorPatternText:[{type:r.Input}],resetPasswordActionButtonText:[{type:r.Input}],resetPasswordInstructionsText:[{type:r.Input}],signInTabText:[{type:r.Input}],signInCardTitleText:[{type:r.Input}],loginButtonText:[{type:r.Input}],forgotPasswordButtonText:[{type:r.Input}],nameText:[{type:r.Input}],nameErrorRequiredText:[{type:r.Input}],nameErrorMinLengthText:[{type:r.Input}],nameErrorMaxLengthText:[{type:r.Input}],emailText:[{type:r.Input}],emailErrorRequiredText:[{type:r.Input}],emailErrorPatternText:[{type:r.Input}],passwordText:[{type:r.Input}],passwordErrorRequiredText:[{type:r.Input}],passwordErrorMinLengthText:[{type:r.Input}],passwordErrorMaxLengthText:[{type:r.Input}],registerTabText:[{type:r.Input}],registerCardTitleText:[{type:r.Input}],registerButtonText:[{type:r.Input}],guestButtonText:[{type:r.Input}],emailConfirmationTitle:[{type:r.Input}],emailConfirmationText:[{type:r.Input}]},t}(),dt=function(t,e,r,n){return new(r||(r=Promise))(function(a,o){function i(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){t.done?a(t.value):new r(function(e){e(t.value)}).then(i,s)}u((n=n.apply(t,e||[])).next())})},ht=function(t,e){var r,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(t,i)}catch(t){o=[6,t],n=0}finally{r=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},gt=function(){function t(t,e,n,a,o){this.auth=t,this.authProcess=e,this._fireStoreService=n,this.snackBar=a,this.config=o,this.canLogout=!0,this.canEditAccount=!0,this.canDeleteAccount=!0,this.onSignOut=new r.EventEmitter,this.onAccountEdited=new r.EventEmitter,this.onAccountDeleted=new r.EventEmitter}return t.prototype.initUpdateFormGroup=function(){var t=this.auth.auth.currentUser;this.updateFormGroup=new n.FormGroup({name:this.updateNameFormControl=new n.FormControl({value:t.displayName,disabled:this.editMode},[n.Validators.required,n.Validators.minLength(this.config.nameMinLength),n.Validators.maxLength(this.config.nameMaxLength)]),email:this.updateEmailFormControl=new n.FormControl({value:t.email,disabled:this.editMode},[n.Validators.required,n.Validators.pattern(ct)]),phoneNumber:this.updatePhoneNumberFormControl=new n.FormControl({value:t.phoneNumber,disabled:this.editMode},[n.Validators.pattern(mt)])}),this.updateFormGroup.enable()},t.prototype.changeEditMode=function(){this.editMode=!this.editMode,this.editMode?this.initUpdateFormGroup():this.reset()},t.prototype.reset=function(){this.updateFormGroup.reset(),this.updateFormGroup.disable(),this.updateFormGroup=null},t.prototype.save=function(){return dt(this,void 0,void 0,function(){var t,e,r;return ht(this,function(n){switch(n.label){case 0:if(!this.updateFormGroup.dirty)return[3,12];t=this.auth.auth.currentUser,e=[],n.label=1;case 1:return n.trys.push([1,10,,11]),this.updateNameFormControl.dirty?[4,t.updateProfile({displayName:this.updateNameFormControl.value,photoURL:null})]:[3,3];case 2:n.sent(),e.push("your name has been updated to "+t.displayName),n.label=3;case 3:return this.updateEmailFormControl.dirty?[4,t.updateEmail(this.updateEmailFormControl.value)]:[3,5];case 4:n.sent(),e.push("your email has been updated to "+t.email),n.label=5;case 5:return this.updatePhoneNumberFormControl.dirty?[4,t.updatePhoneNumber(this.updatePhoneNumberFormControl.value)]:[3,7];case 6:n.sent(),console.log("phone number = ",this.updatePhoneNumberFormControl.value),e.push("your phone number has been updated to "+t.phoneNumber),n.label=7;case 7:return this.config.enableFirestoreSync?[4,this._fireStoreService.updateUserData(this.authProcess.parseUserInfo(t))]:[3,9];case 8:n.sent(),n.label=9;case 9:return[3,11];case 10:return r=n.sent(),this.authProcess.showToast(r&&r.message?r.message:r),console.error(r),[3,11];case 11:e.length>0&&this.authProcess.showToast(e.join("\\n")),n.label=12;case 12:return this.editMode=!1,[2]}})})},t.prototype.signOut=function(){var t=this;this.auth.auth.signOut().then(function(){return t.onSignOut.emit()}).catch(function(t){return console.error("An error happened while signing out!",t)})},t.prototype.deleteAccount=function(){return dt(this,void 0,void 0,function(){var t,e;return ht(this,function(r){switch(r.label){case 0:return r.trys.push([0,3,,4]),t=this.auth.auth.currentUser,[4,this.auth.auth.currentUser.delete()];case 1:return r.sent(),[4,this._fireStoreService.deleteUserData(t.uid)];case 2:return r.sent(),this.onAccountDeleted.emit(),this.editMode=!1,console.log("Your account has been successfully deleted!"),this.authProcess.showToast("Your account has been successfully deleted!"),[3,4];case 3:return e=r.sent(),console.log("Error while delete user account",e),this.authProcess.showToast("Error occurred while deleting your account: "+e.message),[3,4];case 4:return[2]}})})},t.decorators=[{type:r.Component,args:[{selector:"ngx-auth-firebaseui-user",template:'\n    <div *ngIf="auth.authState| async as user; then authenticated else none">\n\n    </div>\n\n    <ng-template #authenticated>\n      <mat-card *ngIf="auth.user | async as user">\n        \x3c!--<form [formGroup]="updateFormGroup" >--\x3e\n        \x3c!--card header--\x3e\n        <mat-card-header fxLayout="column" fxLayoutAlign="center center">\n\n          <img mat-card-avatar [src]="authProcess?.getUserPhotoUrl()">\n\n          <div *ngIf="user.emailVerified; then emailVerified else emailNotVerified"></div>\n          <ng-template #emailVerified>\n            <mat-icon color="primary"\n                      matTooltip="email is verified"\n                      matTooltipPosition="after">\n              verified_user\n            </mat-icon>\n          </ng-template>\n          <ng-template #emailNotVerified>\n            <mat-icon color="warn"\n                      matTooltip="email is not verified"\n                      matTooltipPosition="after">\n              warning\n            </mat-icon>\n          </ng-template>\n\n        </mat-card-header>\n\n        \x3c!--card content--\x3e\n        <mat-card-content *ngIf="editMode; then edit else readonly">\n        </mat-card-content>\n\n        <ng-template #edit>\n          <form [formGroup]="updateFormGroup" (submit)="save()">\n\n            <mat-card-content fxLayout="column" fxLayoutAlign="center center">\n              <div fxLayoutAlign="center">\n                <button mat-raised-button color="warn" class="edit-button"\n                        (click)="changeEditMode()">\n                  cancel\n                </button>\n              </div>\n\n              \x3c!--name--\x3e\n              <mat-form-field class="full-width" [appearance]="appearance">\n                <mat-label>Name</mat-label>\n                <input matInput\n                       placeholder="Name"\n                       [formControl]="updateNameFormControl">\n                <mat-icon matSuffix>person</mat-icon>\n                <mat-hint align="end" aria-live="polite"> {{ updateNameFormControl.value?.length }} / {{ config.nameMaxLength }} </mat-hint>\n                <mat-error *ngIf="updateNameFormControl.hasError(\'required\')">\n                  Name is required\n                </mat-error>\n              </mat-form-field>\n\n              \x3c!--email--\x3e\n              <mat-form-field class="full-width" [appearance]="appearance">\n                <mat-label>E-mail</mat-label>\n                <input matInput\n                       placeholder="E-mail"\n                       [formControl]="updateEmailFormControl">\n                <mat-icon matSuffix>email</mat-icon>\n                <mat-error *ngIf="updateEmailFormControl.hasError(\'required\')">\n                  E-mail is required {{updateEmailFormControl.value}}\n                </mat-error>\n                <mat-error *ngIf="updateEmailFormControl.hasError(\'pattern\')">\n                  Please enter a valid e-mail address {{updateEmailFormControl.value}}\n                </mat-error>\n              </mat-form-field>\n\n              \x3c!--phone number--\x3e\n              <mat-form-field class="full-width" [appearance]="appearance">\n                <mat-label>Phone number</mat-label>\n                <input matInput\n                       type="number"\n                       placeholder="Phone number"\n                       [formControl]="updatePhoneNumberFormControl">\n                <mat-icon matSuffix>phone</mat-icon>\n                <mat-hint align="end" aria-live="polite">\n                  The phone number is international. Therefore, it should start with a + sign or 00,\n                  followed by the country code, - and national number e.g: +49-12345678 or 0041-1234567890\n\n                  NOTE : the phone number must be a valid phone credential !!\n                </mat-hint>\n                <mat-error *ngIf="updatePhoneNumberFormControl.hasError(\'pattern\')">\n                  Please enter a valid phone number\n                </mat-error>\n              </mat-form-field>\n\n            </mat-card-content>\n\n            <mat-card-actions fxLayout="column">\n              <button mat-button\n                      color="primary"\n                      type="submit">\n                Save changes\n              </button>\n            </mat-card-actions>\n          </form>\n        </ng-template>\n\n        <ng-template #readonly>\n          <div fxLayoutAlign="center">\n            <button mat-raised-button color="primary" class="edit-button"\n                    (click)="changeEditMode()">\n              edit\n            </button>\n          </div>\n\n          \x3c!--name--\x3e\n          <mat-form-field class="full-width" [appearance]="appearance">\n            <mat-label>Name</mat-label>\n            <input matInput\n                   placeholder="Name"\n                   [value]="user.displayName"\n                   [disabled]="!editMode">\n            <mat-icon matSuffix color="primary">person</mat-icon>\n          </mat-form-field>\n\n          \x3c!--email--\x3e\n          <mat-form-field class="full-width" [appearance]="appearance">\n            <mat-label>E-mail</mat-label>\n            <input matInput\n                   placeholder="E-mail" [value]="user.email"\n                   [disabled]="!editMode">\n            <mat-icon matSuffix color="primary">email</mat-icon>\n          </mat-form-field>\n\n          \x3c!--phone number--\x3e\n          <mat-form-field class="full-width" [appearance]="appearance">\n            <mat-label>Phone number</mat-label>\n            <input matInput\n                   placeholder="Phone number"\n                   [value]="user.phoneNumber"\n                   [disabled]="!editMode">\n            <mat-icon matSuffix color="primary">phone</mat-icon>\n          </mat-form-field>\n\n          <mat-card-actions fxLayout="column">\n            <button *ngIf="canLogout" mat-button color="primary" (click)="signOut()">Sign out</button>\n            <button *ngIf="canDeleteAccount" mat-button color="warn" (click)="deleteAccount()">Delete account</button>\n          </mat-card-actions>\n\n        </ng-template>\n\n      </mat-card>\n\n    </ng-template>\n\n\n    <ng-template #none>\n      <mat-card class="none-card" fxLayout="row" fxLayoutAlign="center center">\n        <mat-card-content fxLayout="row" fxLayoutAlign="center center">\n          <mat-icon color="accent">warning</mat-icon>\n          <span>You are not logged in!</span>\n        </mat-card-content>\n      </mat-card>\n    </ng-template>\n  ',styles:["\n    .edit-button{margin:1rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.none-card{min-height:430px}.none-card span{font-size:24px;text-align:center;color:rgba(0,0,0,.54)}\n  "]}]}],t.ctorParameters=function(){return[{type:u.AngularFireAuth},{type:$},{type:G},{type:E.MatSnackBar},{type:void 0,decorators:[{type:r.Inject,args:[r.forwardRef(function(){return St})]}]}]},t.propDecorators={editMode:[{type:r.Input}],canLogout:[{type:r.Input}],canEditAccount:[{type:r.Input}],canDeleteAccount:[{type:r.Input}],appearance:[{type:r.Input}],onSignOut:[{type:r.Output}],onAccountEdited:[{type:r.Output}],onAccountDeleted:[{type:r.Output}]},t}(),ft=function(t,e,r,n){return new(r||(r=Promise))(function(a,o){function i(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){t.done?a(t.value):new r(function(e){e(t.value)}).then(i,s)}u((n=n.apply(t,e||[])).next())})},bt=function(t,e){var r,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(t,i)}catch(t){o=[6,t],n=0}finally{r=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},xt="Confirm your e-mail address!",yt='A confirmation e-mail has been sent. Check your inbox and click on the link "Confirm my e-mail" to confirm your e-mail address.',vt="Go back",wt="Send new confirmation e-mail",It="Sign out",Pt="A new confirmation e-mail has been sent. Please check your inbox.",Tt=function(){function t(t,e,n){this.authProcess=t,this._router=e,this._cdr=n,this.signOut=new r.EventEmitter}return t.prototype.ngOnChanges=function(t){t.verifyEmailTemplate&&null==t.verifyEmailTemplate.currentValue&&(this.verifyEmailTemplate=this.defaultTemplate,console.log("ngOnChanges - defaultTemplate:",this.verifyEmailTemplate)),this.verifyEmailContext=this.createTemplateContext()},t.prototype.ngOnInit=function(){this.verifyEmailTemplate||(console.log("ngOnInit - defaultTemplate"),this.verifyEmailTemplate=this.defaultTemplate),this.verifyEmailContext=this.createTemplateContext(),console.log("verifyEmailTemplate:",this.verifyEmailTemplate),console.log("verifyEmailContext:",this.verifyEmailContext)},t.prototype.continue=function(){return ft(this,void 0,void 0,function(){var t;return bt(this,function(e){switch(e.label){case 0:return e.trys.push([0,3,,4]),[4,this.authProcess.reloadUserInfo()];case 1:return e.sent(),[4,this._router.navigate([this.goBackURL])];case 2:return e.sent(),[3,4];case 3:return t=e.sent(),this.authProcess.notifyError(t),[3,4];case 4:return[2]}})})},t.prototype.sendNewVerificationEmail=function(){return ft(this,void 0,void 0,function(){var t;return bt(this,function(e){switch(e.label){case 0:return e.trys.push([0,2,3,4]),this.isLoading=!0,this._cdr.markForCheck(),[4,this.authProcess.sendNewVerificationEmail()];case 1:return e.sent(),this.authProcess.showToast(this.verifyEmailContext.messageOnEmailConfirmationSuccess),[3,4];case 2:return t=e.sent(),this.authProcess.notifyError(t),[3,4];case 3:return this.isLoading=!1,this._cdr.markForCheck(),[7];case 4:return[2]}})})},t.prototype.createTemplateContext=function(){return{email:this.email,goBackURL:this.goBackURL,verifyEmailTitleText:this.verifyEmailTitleText||xt,verifyEmailConfirmationText:this.verifyEmailConfirmationText||yt,verifyEmailGoBackText:this.verifyEmailGoBackText||vt,sendNewVerificationEmailText:this.sendNewVerificationEmailText||wt,signOutText:this.signOutText||It,messageOnEmailConfirmationSuccess:this.messageOnEmailConfirmationSuccess||Pt}},t.decorators=[{type:r.Component,args:[{selector:"ngx-auth-firebaseui-email-confirmation",template:'\n    <ng-container *ngTemplateOutlet="verifyEmailTemplate; context: verifyEmailContext"></ng-container>\n    <ng-template #defaultVerifyEmail let-email="email" let-goBackURL="goBackURL" let-verifyEmailTitleText="verifyEmailTitleText" let-verifyEmailConfirmationText="verifyEmailConfirmationText" let-verifyEmailGoBackText="verifyEmailGoBackText" let-signOutText="signOutText" let-sendNewVerificationEmailText="sendNewVerificationEmailText">\n      <mat-card class="verify-email">\n        <mat-card-content fxLayout="column" fxLayoutAlign="center center">\n          <mat-icon>email</mat-icon>\n          <p class="title" fxLayout="column" fxLayoutAlign="center center">\n              <span class="mat-subheading-2">{{ verifyEmailTitleText }}</span>\n              <span class="mat-body-2">{{ email }}</span>\n            </p>\n            <p class="subtitle">{{ verifyEmailConfirmationText }}</p>\n            <mat-progress-bar *ngIf="isLoading" mode="indeterminate"></mat-progress-bar>\n        </mat-card-content>\n        <mat-card-actions fxLayout="column" fxLayoutAlign="center center">\n          <button *ngIf="goBackURL" mat-stroked-button (click)="continue()" class="go-back-button action-button">\n            {{ verifyEmailGoBackText }}\n          </button>\n          <button mat-stroked-button (click)="sendNewVerificationEmail()" class="send-new-mail-button action-button">{{ sendNewVerificationEmailText }}</button>\n          <button mat-stroked-button color="warn" (click)="this.signOut.emit()" class="sign-out-button action-button">{{ signOutText }}</button>\n        </mat-card-actions>\n      </mat-card>\n    </ng-template>\n  ',styles:["\n    .material-icons{font-size:4rem}.verify-email{width:360px}.verify-email .mat-icon{height:4rem;width:4rem;color:#444}.verify-email .title{margin-top:16px}.verify-email .title .mat-subheading-2{margin-bottom:0}.verify-email .subtitle{margin:16px auto;text-align:justify}.verify-email p{display:block;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0}.verify-email mat-card-actions{text-align:center;margin-top:1rem}.verify-email mat-card-actions .action-button{width:100%}.verify-email mat-card-actions .action-button+.action-button{margin-top:1rem}\n  "],changeDetection:r.ChangeDetectionStrategy.OnPush}]}],t.ctorParameters=function(){return[{type:$},{type:o.Router},{type:r.ChangeDetectorRef}]},t.propDecorators={email:[{type:r.Input}],goBackURL:[{type:r.Input}],verifyEmailTitleText:[{type:r.Input}],verifyEmailConfirmationText:[{type:r.Input}],verifyEmailGoBackText:[{type:r.Input}],sendNewVerificationEmailText:[{type:r.Input}],signOutText:[{type:r.Input}],messageOnEmailConfirmationSuccess:[{type:r.Input}],template:[{type:r.Input}],signOut:[{type:r.Output}],defaultTemplate:[{type:r.ViewChild,args:["defaultVerifyEmail",{static:!0}]}]},t}(),Et={enableFirestoreSync:!0,toastMessageOnAuthSuccess:!0,toastMessageOnAuthError:!0,authGuardFallbackURL:"/",authGuardLoggedInURL:"/",passwordMaxLength:60,passwordMinLength:8,nameMaxLength:50,nameMinLength:2,guardProtectedRoutesUntilEmailIsVerified:!0};function kt(t){return Object.assign({},Et,t)}var Lt=function(t,e,r,n){return new(r||(r=Promise))(function(a,o){function i(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){t.done?a(t.value):new r(function(e){e(t.value)}).then(i,s)}u((n=n.apply(t,e||[])).next())})},Ct=function(t,e){var r,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(t,i)}catch(t){o=[6,t],n=0}finally{r=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},At=function(){function t(t,e){this.afa=t,this.dialog=e,this.canLogout=!0,this.onSignOut=new r.EventEmitter}return t.prototype.ngOnInit=function(){var t=this;this.user$=this.afa.user,this.user$.subscribe(function(e){t.user=e,t.displayNameInitials=e?t.getDisplayNameInitials(e.displayName):null})},t.prototype.getDisplayNameInitials=function(t){if(!t)return null;var e=t.match(/\b\w/g)||[];return((e.shift()||"")+(e.pop()||"")).toUpperCase()},t.prototype.openProfile=function(){this.dialog.open(gt)},t.prototype.signOut=function(){return Lt(this,void 0,void 0,function(){var t;return Ct(this,function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,this.afa.auth.signOut()];case 1:return e.sent(),this.onSignOut.emit(),[3,3];case 2:return t=e.sent(),console.error("An error happened while signing out!",t),[3,3];case 3:return[2]}})})},t.decorators=[{type:r.Component,args:[{selector:"ngx-auth-firebaseui-avatar",template:'\n    <button *ngIf="user"\n            mat-mini-fab\n            [matMenuTriggerFor]="posXMenu"\n            aria-label="Open x-positioned menu"\n            [style.background-image]="\'url(\' + user?.photoURL + \')\'"\n            style="background-size: cover"\n            [matTooltip]="user?.displayName">\n      <span *ngIf="!user?.photoURL">{{displayNameInitials || \'\'}}</span>\n    </button>\n\n    <mat-menu xPosition="before" #posXMenu="matMenu" class="before">\n      <div fxLayout="row" fxLayout.xs="column" style="padding-left: 10px; padding-right: 10px">\n        <button mat-fab\n                [style.background-image]="\'url(\' + user?.photoURL + \')\'"\n                style="background-size: cover">\n          <span *ngIf="!user?.photoURL">{{displayNameInitials || \'\'}}</span>\n        </button>\n        <div fxLayout="column" style="padding-left: 10px; padding-right: 10px">\n          <strong mat-card-title>{{user?.displayName}}</strong>\n          <em mat-card-subtitle style="font-style: italic">{{user?.email}}</em>\n        </div>\n      </div>\n\n      <div fxLayout="column" fxFlex="100">\n        <div class="links-menu" *ngFor="let menuItem of links">\n          <button mat-menu-item (click)="menuItem?.callback()">\n            <mat-icon>{{menuItem?.icon}}</mat-icon>{{menuItem?.text}}</button>\n        </div>\n        <button mat-raised-button fxLayoutAlign="center" color="primary" (click)="openProfile()">Profile\n        </button>\n        <button *ngIf="canLogout" mat-raised-button fxLayoutAlign="center" color="warn" (click)="signOut()">Sign Out\n        </button>\n      </div>\n    </mat-menu>\n  ',styles:["\n    .mat-raised-button{margin:.2rem 1rem}.links-menu{text-align:center}\n  "]}]}],t.ctorParameters=function(){return[{type:u.AngularFireAuth},{type:E.MatDialog}]},t.propDecorators={canLogout:[{type:r.Input}],links:[{type:r.Input}],onSignOut:[{type:r.Output}]},t}(),Ft=function(){function t(t,e,r){this.config=t,this.router=e,this.authProcess=r}return t.prototype.canActivate=function(t,e){var r=this;return this.authProcess.afa.user.pipe(A.map(function(t){return t?!(r.config.guardProtectedRoutesUntilEmailIsVerified&&!t.emailVerified&&!t.isAnonymous)||(r.config.authGuardFallbackURL&&r.router.navigate([""+r.config.authGuardFallbackURL],{queryParams:{redirectUrl:e.url}}),!1):(r.config.authGuardFallbackURL&&r.router.navigate(["/"+r.config.authGuardFallbackURL],{queryParams:{redirectUrl:e.url}}),!1)}))},t.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:void 0,decorators:[{type:r.Inject,args:[St]}]},{type:o.Router},{type:$}]},t.ngInjectableDef=r.ɵɵdefineInjectable({factory:function(){return new Ft(r.ɵɵinject(St),r.ɵɵinject(o.Router),r.ɵɵinject($))},token:Ft,providedIn:"root"}),t}(),St=new r.InjectionToken("NgxAuthFirebaseUIConfigToken"),Ut=new r.InjectionToken("UserProvidedConfigToken"),Rt=function(){function t(t,e,r){this._iconRegistry=t,this._sanitizer=e,r.listenToUserEvents(),this.registerProviderIcons()}return t.forRoot=function(e,r,n){return void 0===r&&(r=function(){}),void 0===n&&(n={}),{ngModule:t,providers:[{provide:s.FirebaseOptionsToken,useValue:e},{provide:s.FirebaseNameOrConfigToken,useFactory:r},{provide:Ut,useValue:n},{provide:St,useFactory:kt,deps:[Ut]},$,G,Ft]}},t.prototype.registerProviderIcons=function(){this._iconRegistry.addSvgIcon("google",this._sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/google.svg")).addSvgIcon("google-colored",this._sanitizer.bypassSecurityTrustResourceUrl("/assets/google.svg")).addSvgIcon("facebook",this._sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/facebook.svg")).addSvgIcon("twitter",this._sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/twitter.svg")).addSvgIcon("github",this._sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/github-circle.svg")).addSvgIcon("microsoft",this._sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/microsoft.svg")).addSvgIcon("yahoo",this._sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/yahoo.svg")).addSvgIcon("phone",this._sanitizer.bypassSecurityTrustResourceUrl("/assets/phone.svg"))},t.decorators=[{type:r.NgModule,args:[{imports:[e.CommonModule,o.RouterModule,a.HttpClientModule,i.FlexLayoutModule,n.FormsModule,n.ReactiveFormsModule,I.MatTabsModule,m.MatCardModule,b.MatInputModule,c.MatButtonModule,f.MatIconModule,w.MatSnackBarModule,g.MatDividerModule,d.MatChipsModule,P.MatTooltipModule,h.MatDialogModule,p.MatCheckboxModule,v.MatProgressSpinnerModule,y.MatProgressBarModule,h.MatDialogModule,x.MatMenuModule,T.MatPasswordStrengthModule,u.AngularFireAuthModule,l.AngularFirestoreModule],exports:[pt,gt,At,st,Tt,u.AngularFireAuthModule,l.AngularFirestoreModule,Q,nt],declarations:[pt,gt,At,st,Tt,at,Q,nt],entryComponents:[gt,at]}]}],t.ctorParameters=function(){return[{type:f.MatIconRegistry},{type:R.DomSanitizer},{type:$}]},t}();t.AuthComponent=pt,t.AuthProcessService=$,t.AuthProvider=H,t.AuthProvidersComponent=st,t.FirestoreSyncService=G,t.Layout=it,t.LegalityDialogComponent=at,t.LoggedInGuard=Ft,t.NgxAuthFirebaseUIConfigToken=St,t.NgxAuthFirebaseUIModule=Rt,t.NgxAuthFirebaseuiAvatarComponent=At,t.NgxAuthFirebaseuiLoginComponent=Q,t.NgxAuthFirebaseuiRegisterComponent=nt,t.Theme=ot,t.UserComponent=gt,t.UserProvidedConfigToken=Ut,t.ɵa=Et,t.ɵb=kt,t.ɵc=X,t.ɵd=Tt,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-auth-firebaseui.umd.min.js.map
